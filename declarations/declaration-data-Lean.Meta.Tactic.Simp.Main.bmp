{"name":"Lean.Meta.Tactic.Simp.Main","instances":[{"typeNames":["Lean.Meta.Simp.M"],"name":"Lean.Meta.Simp.instInhabitedM","className":"Inhabited"}],"imports":["Init","Lean.Meta.Transform","Lean.Meta.Tactic.Replace","Lean.Meta.Tactic.UnifyEq","Lean.Meta.Tactic.Simp.Rewrite"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L1019-L1048","name":"Lean.Meta.dsimpGoal","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.dsimpGoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L1003-L1017","name":"Lean.Meta.simpTargetStar","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpTargetStar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L967-L1001","name":"Lean.Meta.simpGoal","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpGoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L959-L965","name":"Lean.Meta.simpLocalDecl","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L947-L957","name":"Lean.Meta.applySimpResultToLocalDecl","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.applySimpResultToLocalDecl","doc":"Simplify `simp` result to the given local declaration. Return `none` if the goal was closed.\nThis method assumes `mvarId` is not assigned, and we are already using `mvarId`s local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L931-L942","name":"Lean.Meta.applySimpResultToLocalDeclCore","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.applySimpResultToLocalDeclCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L926-L929","name":"Lean.Meta.simpStep","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpStep","doc":"Simplify `prop` (which is inhabited by `proof`). Return `none` if the goal was closed. Return `some (proof', prop')`\notherwise, where `proof' : prop'` and `prop'` is the simplified `prop`.\n\nThis method assumes `mvarId` is not assigned, and we are already using `mvarId`s local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L917-L919","name":"Lean.Meta.applySimpResultToFVarId","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.applySimpResultToFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L902-L915","name":"Lean.Meta.applySimpResultToProp","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.applySimpResultToProp","doc":"Apply the result `r` for `prop` (which is inhabited by `proof`). Return `none` if the goal was closed. Return `some (proof', prop')`\notherwise, where `proof' : prop'` and `prop'` is the simplified `prop`.\n\nThis method assumes `mvarId` is not assigned, and we are already using `mvarId`s local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L891-L895","name":"Lean.Meta.simpTarget","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpTarget","doc":"Simplify the given goal target (aka type). Return `none` if the goal was closed. Return `some mvarId'` otherwise,\nwhere `mvarId'` is the simplified new goal. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L876-L886","name":"Lean.Meta.simpTargetCore","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simpTargetCore","doc":"See `simpTarget`. This method assumes `mvarId` is not assigned, and we are already using `mvarId`s local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L866-L873","name":"Lean.Meta.applySimpResultToTarget","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.applySimpResultToTarget","doc":"Auxiliary method.\nGiven the current `target` of `mvarId`, apply `r` which is a new target and proof that it is equal to the current one.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L858-L860","name":"Lean.Meta.dsimp","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.dsimp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L852-L856","name":"Lean.Meta.simp","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.simp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L844-L845","name":"Lean.Meta.Simp.DefaultMethods.methods","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.DefaultMethods.methods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L840-L841","name":"Lean.Meta.Simp.DefaultMethods.post","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.DefaultMethods.post","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L837-L838","name":"Lean.Meta.Simp.DefaultMethods.pre","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.DefaultMethods.pre","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L815-L835","name":"Lean.Meta.Simp.DefaultMethods.discharge?","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.DefaultMethods.discharge?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L798-L811","name":"Lean.Meta.Simp.dischargeEqnThmHypothesis?.go?","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?.go?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L789-L811","name":"Lean.Meta.Simp.dischargeEqnThmHypothesis?","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.dischargeEqnThmHypothesis?","doc":"Tries to solve `e` using `unifyEq?`.\nIt assumes that `isEqnThmHypothesis e` is `true`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L776-L783","name":"Lean.Meta.Simp.dischargeUsingAssumption?","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.dischargeUsingAssumption?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L774-L774","name":"Lean.Meta.Simp.Discharge","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.Discharge","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L769-L772","name":"Lean.Meta.Simp.isEqnThmHypothesis.go","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.isEqnThmHypothesis.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L766-L772","name":"Lean.Meta.Simp.isEqnThmHypothesis","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.isEqnThmHypothesis","doc":"Return true if `e` is of the form `(x : α) → ... → s = t → ... → False`\n\nRecall that this kind of proposition is generated by Lean when creating equations for\nfunctions and match-expressions with overlapping cases.\nExample: the following `match`-expression has overlapping cases.\n```\ndef f (x y : Nat) :=\n  match x, y with\n  | Nat.succ n, Nat.succ m => ...\n  | _, _ => 0\n```\nThe second equation is of the form\n```\n(x y : Nat) → ((n m : Nat) → x = Nat.succ n → y = Nat.succ m → False) → f x y = 0\n```\nThe hypothesis `(n m : Nat) → x = Nat.succ n → y = Nat.succ m → False` is essentially\nsaying the first case is not applicable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L739-L745","name":"Lean.Meta.Simp.dsimpMain","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.dsimpMain","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L729-L737","name":"Lean.Meta.Simp.main","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L726-L727","name":"Lean.Meta.Simp.withSimpConfig","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.withSimpConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L720-L724","name":"Lean.Meta.Simp.simp.cacheResult","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.cacheResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L688-L718","name":"Lean.Meta.Simp.simp.simpLet","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L673-L686","name":"Lean.Meta.Simp.simp.simpForall","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L638-L671","name":"Lean.Meta.Simp.simp.simpArrow","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpArrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L627-L636","name":"Lean.Meta.Simp.simp.simpLambda","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L612-L625","name":"Lean.Meta.Simp.simp.withNewLemmas","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.withNewLemmas","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L609-L610","name":"Lean.Meta.Simp.simp.simpConst","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpConst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L599-L607","name":"Lean.Meta.Simp.simp.simpApp","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L586-L597","name":"Lean.Meta.Simp.simp.congr","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.congr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L538-L584","name":"Lean.Meta.Simp.simp.trySimpCongrTheorem?","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.trySimpCongrTheorem?","doc":"Try to rewrite `e` children using the given congruence theorem "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L504-L535","name":"Lean.Meta.Simp.simp.processCongrHypothesis","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.processCongrHypothesis","doc":"Process the given congruence theorem hypothesis. Return true if it made \"progress\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L496-L501","name":"Lean.Meta.Simp.simp.congrDefault","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.congrDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L407-L494","name":"Lean.Meta.Simp.simp.tryAutoCongrTheorem?","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.tryAutoCongrTheorem?","doc":"Try to use automatically generated congruence theorems. See `mkCongrSimp?`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L389-L404","name":"Lean.Meta.Simp.simp.mkCongrSimp?","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.mkCongrSimp?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L375-L387","name":"Lean.Meta.Simp.simp.visitFn","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.visitFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L357-L373","name":"Lean.Meta.Simp.simp.congrArgs","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.congrArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L331-L355","name":"Lean.Meta.Simp.simp.simpProj","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L320-L329","name":"Lean.Meta.Simp.simp.simpLit","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L305-L318","name":"Lean.Meta.Simp.simp.simpStep","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpStep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L284-L303","name":"Lean.Meta.Simp.simp.simpLoop","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp.simpLoop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L267-L724","name":"Lean.Meta.Simp.simp","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.simp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L261-L265","name":"Lean.Meta.Simp.removeUnnecessaryCasts.elimDummyEqRec","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.removeUnnecessaryCasts.elimDummyEqRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L258-L259","name":"Lean.Meta.Simp.removeUnnecessaryCasts.isDummyEqRec","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.removeUnnecessaryCasts.isDummyEqRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L245-L265","name":"Lean.Meta.Simp.removeUnnecessaryCasts","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.removeUnnecessaryCasts","doc":"Given the application `e`, remove unnecessary casts of the form `Eq.rec a rfl` and `Eq.ndrec a rfl`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L230-L242","name":"Lean.Meta.Simp.getSimpLetCase","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.getSimpLetCase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L228-L228","name":"Lean.Meta.Simp.SimpLetCase.nondep","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.SimpLetCase.nondep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L227-L227","name":"Lean.Meta.Simp.SimpLetCase.nondepDepVar","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.SimpLetCase.nondepDepVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L226-L226","name":"Lean.Meta.Simp.SimpLetCase.dep","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.SimpLetCase.dep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L225-L228","name":"Lean.Meta.Simp.SimpLetCase","kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.SimpLetCase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L220-L223","name":"Lean.Meta.Simp.lambdaTelescopeDSimp.go","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.lambdaTelescopeDSimp.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L217-L223","name":"Lean.Meta.Simp.lambdaTelescopeDSimp","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.lambdaTelescopeDSimp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L214-L215","name":"Lean.Meta.Simp.instInhabitedM","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.instInhabitedM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L72-L73","name":"Lean.Meta.Simp.isOfNatNatLit","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.isOfNatNatLit","doc":"Return true if `e` is of the form `ofNat n` where `n` is a kernel Nat literal "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L57-L63","name":"Lean.Meta.Simp.mkCongr","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.mkCongr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L52-L55","name":"Lean.Meta.Simp.mkCongrFun","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.mkCongrFun","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L41-L50","name":"Lean.Meta.Simp.Result.getProof'","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.Result.getProof'","doc":"Similar to `Result.getProof`, but adds a `mkExpectedTypeHint` if `proof?` is `none`\n(i.e., result is definitionally equal to input), but we cannot establish that\n`source` and `r.expr` are definitionally when using `TransparencyMode.reducible`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L32-L35","name":"Lean.Meta.Simp.Result.getProof","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.Result.getProof","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L23-L30","name":"Lean.Meta.Simp.Config.updateArith","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.Config.updateArith","doc":"Helper method for bootstrapping purposes. It disables `arith` if support theorems have not been defined yet.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L17-L18","name":"Lean.Meta.Simp.throwCongrHypothesisFailed","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.throwCongrHypothesisFailed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/Main.lean#L14-L15","name":"Lean.Meta.Simp.congrHypothesisExceptionId","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Main.html#Lean.Meta.Simp.congrHypothesisExceptionId","doc":""}]}