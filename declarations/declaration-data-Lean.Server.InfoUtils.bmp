{"name":"Lean.Server.InfoUtils","instances":[],"imports":["Init","Lean.PrettyPrinter"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L369-L379","name":"Lean.Elab.InfoTree.hasSorry.go","kind":"opaque","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L367-L379","name":"Lean.Elab.InfoTree.hasSorry","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L363-L365","name":"Lean.Elab.InfoTree.termGoalAt?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.termGoalAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L358-L360","name":"Lean.Elab.InfoTree.goalsAt?.isEmptyBy","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?.isEmptyBy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L345-L357","name":"Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","kind":"opaque","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L319-L360","name":"Lean.Elab.InfoTree.goalsAt?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?","doc":"Try to retrieve `TacticInfo` for `hoverPos`.\nWe retrieve all `TacticInfo` nodes s.t. `hoverPos` is inside the node's range plus trailing whitespace.\nWe usually prefer the innermost such nodes so that for composite tactics such as `induction`, we show the nested proofs' states.\nHowever, if `hoverPos` is after the tactic, we prefer nodes that are not indented relative to it, meaning that e.g. at `|` in\n```lean\nhave := by\n  exact foo\n|\n```\nwe show the (final, see below) state of `have`, not `exact`.\n\nMoreover, we instruct the LSP server to use the state after tactic execution if\n- the hover position is after the info's start position *and*\n- there is no nested tactic info after the hover position (tactic combinators should decide for themselves\n  where to show intermediate states by calling `withTacticInfoContext`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L301-L301","name":"Lean.Elab.GoalsAtResult.priority","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.priority","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L299-L299","name":"Lean.Elab.GoalsAtResult.indented","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.indented","doc":"Whether the tactic info is further indented than the hover position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L297-L297","name":"Lean.Elab.GoalsAtResult.useAfter","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.useAfter","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L296-L296","name":"Lean.Elab.GoalsAtResult.tacticInfo","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.tacticInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L295-L295","name":"Lean.Elab.GoalsAtResult.ctxInfo","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.ctxInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L294-L301","name":"Lean.Elab.GoalsAtResult","kind":"structure","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L287-L292","name":"Lean.Elab.Info.fmtHover?.isAtomicFormat","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.isAtomicFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L260-L285","name":"Lean.Elab.Info.fmtHover?.fmtTermAndModule?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.fmtTermAndModule?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L256-L258","name":"Lean.Elab.Info.fmtHover?.fmtModule?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.fmtModule?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L235-L292","name":"Lean.Elab.Info.fmtHover?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?","doc":"Construct a hover popup, if any, from an info node in a context."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L216-L232","name":"Lean.Elab.Info.docString?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.docString?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L210-L214","name":"Lean.Elab.Info.type?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.type?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L165-L208","name":"Lean.Elab.InfoTree.hoverableInfoAt?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hoverableInfoAt?","doc":"Find an info node, if any, which should be shown on hover/cursor at position `hoverPos`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L155-L162","name":"Lean.Elab.InfoTree.smallestInfo?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.smallestInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L149-L153","name":"Lean.Elab.Info.occursInside?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInside?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L144-L147","name":"Lean.Elab.Info.occursBefore?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursBefore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L138-L142","name":"Lean.Elab.Info.isSmaller","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isSmaller","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L132-L135","name":"Lean.Elab.Info.size?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.size?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L129-L130","name":"Lean.Elab.Info.contains","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L126-L127","name":"Lean.Elab.Info.range?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.range?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L123-L124","name":"Lean.Elab.Info.tailPos?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.tailPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L120-L121","name":"Lean.Elab.Info.pos?","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.pos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L115-L118","name":"Lean.Elab.Info.lctx","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.lctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L102-L113","name":"Lean.Elab.Info.stx","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.stx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L96-L100","name":"Lean.Elab.InfoTree.getCompletionInfos","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.getCompletionInfos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L92-L94","name":"Lean.Elab.Info.isCompletion","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L88-L90","name":"Lean.Elab.Info.isTerm","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L79-L86","name":"Lean.Elab.InfoTree.foldInfo.go","kind":"opaque","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L77-L86","name":"Lean.Elab.InfoTree.foldInfo","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L68-L75","name":"Lean.Elab.InfoTree.deepestNodes","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodes","doc":"For every branch of the `InfoTree`, find the deepest node in that branch for which `p` returns\n`some _`  and return the union of all such nodes. The visitor `p` is given a node together with\nits innermost surrounding `ContextInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L61-L62","name":"Lean.Elab.InfoTree.collectNodesBottomUp","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUp","doc":"Visit nodes bottom-up, passing in a surrounding context (the innermost one) and the union of nested results (empty at leaves). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L54-L57","name":"Lean.Elab.InfoTree.visitM'","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM'","doc":"`InfoTree.visitM` specialized to `Unit` return type "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L44-L51","name":"Lean.Elab.InfoTree.visitM.go","kind":"opaque","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L39-L51","name":"Lean.Elab.InfoTree.visitM","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM","doc":"Visit nodes, passing in a surrounding context (the innermost one) and accumulating results on the way back up. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L36-L36","name":"Lean.Elab.InfoWithCtx.children","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.children","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L35-L35","name":"Lean.Elab.InfoWithCtx.info","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.info","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L34-L34","name":"Lean.Elab.InfoWithCtx.ctx","kind":"def","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.ctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L33-L36","name":"Lean.Elab.InfoWithCtx","kind":"structure","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx","doc":"Elaborator information with elaborator context.\n\nIt can be thought of as a \"thunked\" elaboration computation that allows us\nto retroactively extract type information, symbol locations, etc.\nthrough arbitrary invocations of `runMetaM` (where the necessary context and state\ncan be reconstructed from `ctx` and `info.lctx`).\n\nW.r.t. widgets, this is used to tag different parts of expressions in `ppExprTagged`.\nThis is the input to the RPC call `Lean.Widget.InteractiveDiagnostics.infoToInteractive`.\nIt carries over information about delaborated\n`Info` nodes in a `CodeWithInfos`, and the associated pretty-printing\nfunctionality is purpose-specific to showing the contents of infoview popups.\n\nFor use in standard LSP go-to-definition (see `Lean.Server.FileWorker.locationLinksOfInfo`),\nall the elaborator information we need for similar tasks is already fully recoverable via\nthe `InfoTree` structure (see `Lean.Elab.InfoTree.visitM`).\nThere we use this as a convienience wrapper for queried nodes (e.g. the return value of\n`Lean.Elab.InfoTree.hoverableInfoAt?`). It also includes the children info nodes\nas additional context (this is unused in the RPC case, as delaboration has no notion of child nodes).\n\nNOTE: This type is for internal use in the infoview/LSP. It should not be used in user widgets.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L1-L1","name":"Lean.Elab.InfoWithCtx.mk","kind":"ctor","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Server/InfoUtils.lean#L1-L1","name":"Lean.Elab.GoalsAtResult.mk","kind":"ctor","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.mk","doc":""}]}