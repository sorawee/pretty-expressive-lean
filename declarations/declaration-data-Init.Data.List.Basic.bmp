{"name":"Init.Data.List.Basic","instances":[{"typeNames":["List","Nat","List","Nat","LT.lt","instLTNat","List.length"],"name":"List.instGetElemListNatLtInstLTNatLength","className":"GetElem"},{"typeNames":["List"],"name":"List.instAppendList","className":"Append"},{"typeNames":["List"],"name":"List.instEmptyCollectionList","className":"EmptyCollection"},{"typeNames":["List"],"name":"List.instMembershipList","className":"Membership"},{"typeNames":["Membership.mem","List","List.instMembershipList"],"name":"List.instDecidableMemListInstMembershipList","className":"Decidable"},{"typeNames":["List"],"name":"List.instLTList","className":"LT"},{"typeNames":["LT.lt","List","List.instLTList"],"name":"List.hasDecidableLt","className":"Decidable"},{"typeNames":["List"],"name":"List.instLEList","className":"LE"},{"typeNames":["LE.le","List","List.instLEList"],"name":"List.instForAllListDecidableLeInstLEList","className":"Decidable"},{"typeNames":["List"],"name":"List.instBEqList","className":"BEq"},{"typeNames":["List","List.instBEqList"],"name":"List.instLawfulBEqListInstBEqList","className":"LawfulBEq"}],"imports":["Init.SimpLemmas","Init.Data.Nat.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L853-L857","name":"List.drop_eq_nil_of_le","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.drop_eq_nil_of_le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L850-L851","name":"List.concat_eq_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.concat_eq_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L841-L848","name":"List.of_concat_eq_concat","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.of_concat_eq_concat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L825-L839","name":"List.instLawfulBEqListInstBEqList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instLawfulBEqListInstBEqList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L821-L823","name":"List.minimum?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.minimum?","doc":"Returns the smallest element of the list, if it is not empty.\n* `[].minimum? = none`\n* `[4].minimum? = some 4`\n* `[1, 4, 2, 10, 6].minimum? = some 1`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L811-L813","name":"List.maximum?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.maximum?","doc":"Returns the largest element of the list, if it is not empty.\n* `[].maximum? = none`\n* `[4].maximum? = some 4`\n* `[1, 4, 2, 10, 6].maximum? = some 10`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L800-L803","name":"List.length_reverse","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_reverse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L795-L798","name":"List.length_map","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L790-L793","name":"List.length_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L783-L788","name":"List.length_dropLast_cons","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_dropLast_cons","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L775-L781","name":"List.length_set","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_set","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L770-L773","name":"List.length_concat","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_concat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L767-L768","name":"List.length_replicate","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_replicate","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L762-L765","name":"List.dropLast","kind":"def","docLink":"./Init/Data/List/Basic.html#List.dropLast","doc":"Removes the last element of the list.\n* `dropLast [] = []`\n* `dropLast [a] = []`\n* `dropLast [a, b, c] = [a, b]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L752-L754","name":"List.replicate_eq_replicateTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.replicate_eq_replicateTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L747-L750","name":"List.replicateTR_loop_replicate_eq","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.replicateTR_loop_replicate_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L742-L744","name":"List.replicateTR.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.replicateTR.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L741-L745","name":"List.replicateTR","kind":"def","docLink":"./Init/Data/List/Basic.html#List.replicateTR","doc":"Tail-recursive version of `List.replicate`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L736-L738","name":"List.replicate","kind":"def","docLink":"./Init/Data/List/Basic.html#List.replicate","doc":"`replicate n a` is `n` copies of `a`:\n* `replicate 5 a = [a, a, a, a, a]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L730-L730","name":"List.instBEqList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instBEqList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L725-L728","name":"List.beq","kind":"def","docLink":"./Init/Data/List/Basic.html#List.beq","doc":"The equality relation on lists asserts that they have the same length\nand they are pairwise `BEq`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L716-L719","name":"List.isEqv","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isEqv","doc":"`O(min |as| |bs|)`. Returns true if `as` and `bs` have the same length,\nand they are pairwise related by `eqv`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L709-L710","name":"List.isSuffixOf?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isSuffixOf?","doc":"`isSuffixOf? l₁ l₂` returns `some t` when `l₂ == t ++ l₁`."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L705-L706","name":"List.isSuffixOf","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isSuffixOf","doc":"`isSuffixOf l₁ l₂` returns `true` Iff `l₁` is a suffix of `l₂`.\nThat is, there exists a `t` such that `l₂ == t ++ l₁`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L697-L701","name":"List.isPrefixOf?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isPrefixOf?","doc":"`isPrefixOf? l₁ l₂` returns `some t` when `l₂ == l₁ ++ t`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L691-L694","name":"List.isPrefixOf","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isPrefixOf","doc":"`isPrefixOf l₁ l₂` returns `true` Iff `l₁` is a prefix of `l₂`.\nThat is, there exists a `t` such that `l₂ == l₁ ++ t`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L686-L687","name":"List.instForAllListDecidableLeInstLEList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instForAllListDecidableLeInstLEList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L684-L684","name":"List.instLEList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instLEList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L682-L682","name":"List.le","kind":"def","docLink":"./Init/Data/List/Basic.html#List.le","doc":"The lexicographic order on lists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L662-L679","name":"List.hasDecidableLt","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.hasDecidableLt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L660-L660","name":"List.instLTList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instLTList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L657-L658","name":"List.lt.tail","kind":"ctor","docLink":"./Init/Data/List/Basic.html#List.lt.tail","doc":"If `a` and `b` are equivalent and `as < bs`, then `a::as < b::bs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L655-L656","name":"List.lt.head","kind":"ctor","docLink":"./Init/Data/List/Basic.html#List.lt.head","doc":"If `a < b` then `a::as < b::bs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L653-L654","name":"List.lt.nil","kind":"ctor","docLink":"./Init/Data/List/Basic.html#List.lt.nil","doc":"`[]` is the smallest element in the order. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L652-L658","name":"List.lt","kind":"inductive","docLink":"./Init/Data/List/Basic.html#List.lt","doc":"The lexicographic order on lists.\n`[] < a::as`, and `a::as < b::bs` if `a < b` or if `a` and `b` are equivalent and `as < bs`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L646-L646","name":"List.pure","kind":"def","docLink":"./Init/Data/List/Basic.html#List.pure","doc":"`pure x = [x]` is the `pure` operation of the list monad. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L643-L643","name":"List.bind","kind":"def","docLink":"./Init/Data/List/Basic.html#List.bind","doc":"`bind xs f` is the bind operation of the list monad. It applies `f` to each element of `xs`\nto get a list of lists, and then concatenates them all together.\n* `[2, 3, 2].bind range = [0, 1, 0, 1, 2, 0, 1]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L635-L636","name":"List.intercalate","kind":"def","docLink":"./Init/Data/List/Basic.html#List.intercalate","doc":"`O(|xs|)`. `intercalate sep xs` alternates `sep` and the elements of `xs`:\n* `intercalate sep [] = []`\n* `intercalate sep [a] = a`\n* `intercalate sep [a, b] = a ++ sep ++ b`\n* `intercalate sep [a, b, c] = a ++ sep ++ b ++ sep ++ c`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L623-L626","name":"List.intersperse","kind":"def","docLink":"./Init/Data/List/Basic.html#List.intersperse","doc":"`O(|l|)`. `intersperse sep l` alternates `sep` and the elements of `l`:\n* `intersperse sep [] = []`\n* `intersperse sep [a] = [a]`\n* `intersperse sep [a, b] = [a, sep, b]`\n* `intersperse sep [a, b, c] = [a, sep, b, sep, c]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L614-L614","name":"List.enum","kind":"def","docLink":"./Init/Data/List/Basic.html#List.enum","doc":"`O(|l|)`. `enum l` pairs up each element with its index in the list.\n* `enum [a, b, c] = [(0, a), (1, b), (2, c)]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L606-L608","name":"List.enumFrom","kind":"def","docLink":"./Init/Data/List/Basic.html#List.enumFrom","doc":"`O(|l|)`. `enumFrom n l` is like `enum` but it allows you to specify the initial index.\n* `enumFrom 5 [a, b, c] = [(5, a), (6, b), (7, c)]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L595-L600","name":"List.iota_eq_iotaTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.iota_eq_iotaTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L589-L591","name":"List.iotaTR.go","kind":"def","docLink":"./Init/Data/List/Basic.html#List.iotaTR.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L588-L592","name":"List.iotaTR","kind":"def","docLink":"./Init/Data/List/Basic.html#List.iotaTR","doc":"Tail-recursive version of `iota`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L583-L585","name":"List.iota","kind":"def","docLink":"./Init/Data/List/Basic.html#List.iota","doc":"`O(n)`. `iota n` is the numbers from `1` to `n` inclusive, in decreasing order.\n* `iota 5 = [5, 4, 3, 2, 1]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L575-L577","name":"List.range.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.range.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L572-L577","name":"List.range","kind":"def","docLink":"./Init/Data/List/Basic.html#List.range","doc":"`O(n)`. `range n` is the numbers from `0` to `n` exclusive, in increasing order.\n* `range 5 = [0, 1, 2, 3, 4]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L564-L566","name":"List.unzip","kind":"def","docLink":"./Init/Data/List/Basic.html#List.unzip","doc":"`O(|l|)`. Separates a list of pairs into two lists containing the first components and second components.\n* `unzip [(x₁, y₁), (x₂, y₂), (x₃, y₃)] = ([x₁, x₂, x₃], [y₁, y₂, y₃])`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L557-L558","name":"List.zip","kind":"def","docLink":"./Init/Data/List/Basic.html#List.zip","doc":"`O(min |xs| |ys|)`. Combines the two lists into a list of pairs, with one element from each list.\nThe longer list is truncated to match the shorter list.\n* `zip [x₁, x₂, x₃] [y₁, y₂, y₃, y₄] = [(x₁, y₁), (x₂, y₂), (x₃, y₃)]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L548-L550","name":"List.zipWith","kind":"def","docLink":"./Init/Data/List/Basic.html#List.zipWith","doc":"`O(min |xs| |ys|)`. Applies `f` to the two lists in parallel, stopping at the shorter list.\n* `zipWith f [x₁, x₂, x₃] [y₁, y₂, y₃, y₄] = [f x₁ y₁, f x₂ y₂, f x₃ y₃]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L542-L542","name":"List.and","kind":"def","docLink":"./Init/Data/List/Basic.html#List.and","doc":"`O(|l|)`. Returns true if every element of `l` is the value `true`.\n* `and [a, b, c] = a && b && c`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L536-L536","name":"List.or","kind":"def","docLink":"./Init/Data/List/Basic.html#List.or","doc":"`O(|l|)`. Returns true if `true` is an element of the list of booleans `l`.\n* `or [a, b, c] = a || b || c`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L529-L530","name":"List.all","kind":"def","docLink":"./Init/Data/List/Basic.html#List.all","doc":"`O(|l|)`. Returns true if `p` is true for every element of `l`.\n* `any p [a, b, c] = p a && p b && p c`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L522-L523","name":"List.any","kind":"def","docLink":"./Init/Data/List/Basic.html#List.any","doc":"`O(|l|)`. Returns true if `p` is true for any element of `l`.\n* `any p [a, b, c] = p a || p b || p c`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L514-L516","name":"List.foldr","kind":"def","docLink":"./Init/Data/List/Basic.html#List.foldr","doc":"`O(|l|)`. Applies function `f` to all of the elements of the list, from right to left.\n* `foldr f init [a, b, c] = f a <| f b <| f c <| init`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L504-L508","name":"List.takeWhile","kind":"def","docLink":"./Init/Data/List/Basic.html#List.takeWhile","doc":"`O(|xs|)`. Returns the longest initial segment of `xs` for which `p` returns true.\n* `takeWhile (· > 5) [7, 6, 4, 8] = [7, 6]`\n* `takeWhile (· > 5) [7, 6, 6, 8] = [7, 6, 6, 8]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L494-L497","name":"List.take","kind":"def","docLink":"./Init/Data/List/Basic.html#List.take","doc":"`O(min n |xs|)`. Returns the first `n` elements of `xs`, or the whole list if `n` is too large.\n* `take 0 [a, b, c, d, e] = []`\n* `take 3 [a, b, c, d, e] = [a, b, c]`\n* `take 6 [a, b, c, d, e] = [a, b, c, d, e]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L483-L486","name":"List.get_drop_eq_drop","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.get_drop_eq_drop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L480-L481","name":"List.drop_nil","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.drop_nil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L475-L478","name":"List.drop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.drop","doc":"`O(min n |xs|)`. Removes the first `n` elements of `xs`.\n* `drop 0 [a, b, c, d, e] = [a, b, c, d, e]`\n* `drop 3 [a, b, c, d, e] = [d, e]`\n* `drop 6 [a, b, c, d, e] = []`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L466-L467","name":"List.removeAll","kind":"def","docLink":"./Init/Data/List/Basic.html#List.removeAll","doc":"`O(|xs|)`. Computes the \"set difference\" of lists,\nby filtering out all elements of `xs` which are also in `ys`.\n* `removeAll [1, 1, 5, 1, 2, 4, 5] [1, 2, 2] = [5, 4, 5]`\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L456-L460","name":"List.lookup","kind":"def","docLink":"./Init/Data/List/Basic.html#List.lookup","doc":"`O(|l|)`. `lookup a l` treats `l : List (α × β)` like an association list,\nand returns the first `β` value corresponding to an `α` value in the list equal to `a`.\n\n* `lookup 3 [(1, 2), (3, 4), (3, 5)] = some 4`\n* `lookup 2 [(1, 2), (3, 4), (3, 5)] = none`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L443-L447","name":"List.groupBy.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.groupBy.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L439-L447","name":"List.groupBy","kind":"def","docLink":"./Init/Data/List/Basic.html#List.groupBy","doc":"`O(|l|)`. `groupBy R l` splits `l` into chains of elements\nsuch that adjacent elements are related by `R`.\n\n* `groupBy (·==·) [1, 1, 2, 2, 2, 3, 2] = [[1, 1], [2, 2, 2], [3], [2]]`\n* `groupBy (·<·) [1, 2, 5, 4, 5, 1, 4] = [[1, 2, 5], [4, 5], [1, 4]]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L426-L430","name":"List.span.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.span.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L423-L430","name":"List.span","kind":"def","docLink":"./Init/Data/List/Basic.html#List.span","doc":"`O(|l|)`. `span p l` splits the list `l` into two parts, where the first part\ncontains the longest initial segment for which `p` returns true\nand the second part is everything else.\n\n* `span (· > 5) [6, 8, 9, 5, 2, 9] = ([6, 8, 9], [5, 2, 9])`\n* `span (· > 10) [6, 8, 9, 5, 2, 9] = ([6, 8, 9, 5, 2, 9], [])`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L409-L413","name":"List.eraseReps.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.eraseReps.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L405-L413","name":"List.eraseReps","kind":"def","docLink":"./Init/Data/List/Basic.html#List.eraseReps","doc":"`O(|l|)`. Erase repeated adjacent elements. Keeps the first occurrence of each run.\n* `eraseReps [1, 3, 2, 2, 2, 3, 5] = [1, 3, 2, 3, 5]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L395-L399","name":"List.eraseDups.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.eraseDups.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L392-L399","name":"List.eraseDups","kind":"def","docLink":"./Init/Data/List/Basic.html#List.eraseDups","doc":"`O(|l|^2)`. Erase duplicated elements in the list.\nKeeps the first occurrence of duplicated elements.\n* `eraseDups [1, 3, 2, 2, 3, 5] = [1, 3, 2, 5]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L382-L386","name":"List.mem_append_of_mem_right","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.mem_append_of_mem_right","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L376-L380","name":"List.mem_append_of_mem_left","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.mem_append_of_mem_left","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L373-L374","name":"List.instDecidableMemListInstMembershipList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instDecidableMemListInstMembershipList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L368-L371","name":"List.elem_eq_true_of_mem","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.elem_eq_true_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L359-L366","name":"List.mem_of_elem_eq_true","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.mem_of_elem_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L356-L357","name":"List.instMembershipList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instMembershipList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L353-L354","name":"List.Mem.tail","kind":"ctor","docLink":"./Init/Data/List/Basic.html#List.Mem.tail","doc":"A member of the tail of a list is a member of the list: `a ∈ l → a ∈ b :: l`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L351-L352","name":"List.Mem.head","kind":"ctor","docLink":"./Init/Data/List/Basic.html#List.Mem.head","doc":"The head of a list is a member: `a ∈ a :: as`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L350-L354","name":"List.Mem","kind":"inductive","docLink":"./Init/Data/List/Basic.html#List.Mem","doc":"`a ∈ l` is a predicate which asserts that `a` is in the list `l`.\nUnlike `elem`, this uses `=` instead of `==` and is suited for mathematical reasoning.\n* `a ∈ [x, y, z] ↔ a = x ∨ a = y ∨ a = z`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L342-L343","name":"List.contains","kind":"def","docLink":"./Init/Data/List/Basic.html#List.contains","doc":"`O(|l|)`. `elem a l` or `l.contains a` is true if there is an element in `l` equal to `a`.\n\n* `elem 3 [1, 4, 2, 3, 3, 7] = true`\n* `elem 5 [1, 4, 2, 3, 3, 7] = false`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L339-L340","name":"List.notElem","kind":"def","docLink":"./Init/Data/List/Basic.html#List.notElem","doc":"`notElem a l` is `!(elem a l)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L332-L336","name":"List.elem","kind":"def","docLink":"./Init/Data/List/Basic.html#List.elem","doc":"`O(|l|)`. `elem a l` or `l.contains a` is true if there is an element in `l` equal to `a`.\n\n* `elem 3 [1, 4, 2, 3, 3, 7] = true`\n* `elem 5 [1, 4, 2, 3, 3, 7] = false`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L320-L324","name":"List.replace","kind":"def","docLink":"./Init/Data/List/Basic.html#List.replace","doc":"`O(|l|)`. `replace l a b` replaces the first element in the list equal to `a` with `b`.\n\n* `replace [1, 4, 2, 3, 3, 7] 3 6 = [1, 4, 2, 6, 3, 7]`\n* `replace [1, 4, 2, 3, 3, 7] 5 6 = [1, 4, 2, 3, 3, 7]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L308-L312","name":"List.findSome?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.findSome?","doc":"`O(|l|)`. `findSome? f l` applies `f` to each element of `l`, and returns the first non-`none` result.\n\n* `findSome? (fun x => if x < 5 then some (10 * x) else none) [7, 6, 5, 8, 1, 2, 6] = some 10`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L297-L301","name":"List.find?","kind":"def","docLink":"./Init/Data/List/Basic.html#List.find?","doc":"`O(|l|)`. `find? p l` returns the first element for which `p` returns true,\nor `none` if no such element is found.\n\n* `find? (· < 5) [7, 6, 5, 8, 1, 2, 6] = some 1`\n* `find? (· < 1) [7, 6, 5, 8, 1, 2, 6] = none`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L284-L288","name":"List.dropWhile","kind":"def","docLink":"./Init/Data/List/Basic.html#List.dropWhile","doc":"`O(|l|)`. `dropWhile p l` removes elements from the list until it finds the first element\nfor which `p` returns false; this element and everything after it is returned.\n```\ndropWhile (· < 4) [1, 3, 2, 4, 2, 7, 4] = [4, 2, 7, 4]\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L270-L275","name":"List.partition.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.partition.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L267-L275","name":"List.partition","kind":"def","docLink":"./Init/Data/List/Basic.html#List.partition","doc":"`O(|l|)`. `partition p l` calls `p` on each element of `l`, partitioning the list into two lists\n`(l_true, l_false)` where `l_true` has the elements where `p` was true\nand `l_false` has the elements where `p` is false.\n`partition p l = (filter p l, filter (not ∘ p) l)`, but it is slightly more efficient\nsince it only has to do one pass over the list.\n```\npartition (· > 2) [1, 2, 5, 2, 7, 7] = ([5, 7, 7], [1, 2, 2])\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L253-L255","name":"List.filter_eq_filterTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.filter_eq_filterTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L243-L251","name":"List.filterTR_loop_eq","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.filterTR_loop_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L237-L241","name":"List.filterTR.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.filterTR.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L234-L241","name":"List.filterTR","kind":"def","docLink":"./Init/Data/List/Basic.html#List.filterTR","doc":"Tail-recursive version of `List.filter`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L227-L231","name":"List.filter","kind":"def","docLink":"./Init/Data/List/Basic.html#List.filter","doc":"`O(|l|)`. `filter f l` returns the list of elements in `l` for which `f` returns true.\n```\nfilter (· > 2) [1, 2, 5, 2, 7, 7] = [5, 7, 7]\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L214-L219","name":"List.filterMap","kind":"def","docLink":"./Init/Data/List/Basic.html#List.filterMap","doc":"`O(|l|)`. `filterMap f l` takes a function `f : α → Option β` and applies it to each element of `l`;\nthe resulting non-`none` values are collected to form the output list.\n```\nfilterMap\n  (fun x => if x > 2 then some (2 * x) else none)\n  [1, 2, 5, 2, 7, 7]\n= [10, 14, 14]\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L200-L202","name":"List.join","kind":"def","docLink":"./Init/Data/List/Basic.html#List.join","doc":"`O(|join L|)`. `join L` concatenates all the lists in `L` into one list.\n* `join [[a], [], [b, c], [d, e, f]] = [a, b, c, d, e, f]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L192-L194","name":"List.map_eq_mapTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.map_eq_mapTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L183-L190","name":"List.mapTR_loop_eq","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.mapTR_loop_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L178-L181","name":"List.reverse_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverse_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L174-L176","name":"List.reverse_cons","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverse_cons","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L171-L172","name":"List.reverse_nil","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverse_nil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L163-L169","name":"List.reverseAux_eq_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverseAux_eq_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L159-L161","name":"List.mapTR.loop","kind":"def","docLink":"./Init/Data/List/Basic.html#List.mapTR.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L156-L161","name":"List.mapTR","kind":"def","docLink":"./Init/Data/List/Basic.html#List.mapTR","doc":"Tail-recursive version of `List.map`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L151-L153","name":"List.map","kind":"def","docLink":"./Init/Data/List/Basic.html#List.map","doc":"`O(|l|)`. `map f l` applies `f` to each element of the list.\n* `map f [a, b, c] = [f a, f b, f c]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L143-L145","name":"List.isEmpty","kind":"def","docLink":"./Init/Data/List/Basic.html#List.isEmpty","doc":"`O(1)`. `isEmpty l` is true if the list is empty.\n* `isEmpty [] = true`\n* `isEmpty [a] = false`\n* `isEmpty [a, b] = false`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L132-L135","name":"List.eraseIdx","kind":"def","docLink":"./Init/Data/List/Basic.html#List.eraseIdx","doc":"`O(i)`. `eraseIdx l i` removes the `i`'th element of the list `l`.\n* `erase [a, b, c, d, e] 0 = [b, c, d, e]`\n* `erase [a, b, c, d, e] 1 = [a, c, d, e]`\n* `erase [a, b, c, d, e] 5 = [a, b, c, d, e]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L120-L124","name":"List.erase","kind":"def","docLink":"./Init/Data/List/Basic.html#List.erase","doc":"`O(|l|)`. `erase l a` removes the first occurrence of `a` from `l`.\n* `erase [1, 5, 3, 2, 5] 5 = [1, 3, 2, 5]`\n* `erase [1, 5, 3, 2, 5] 6 = [1, 5, 3, 2, 5]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L113-L113","name":"List.instEmptyCollectionList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instEmptyCollectionList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L108-L111","name":"List.append_cons","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.append_cons","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L103-L106","name":"List.append_assoc","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.append_assoc","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L101-L101","name":"List.List.append_eq","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.List.append_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L99-L99","name":"List.cons_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.cons_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L93-L97","name":"List.append_nil","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.append_nil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L92-L92","name":"List.nil_append","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.nil_append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L90-L90","name":"List.instAppendList","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instAppendList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L82-L88","name":"List.append_eq_appendTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.append_eq_appendTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L79-L80","name":"List.appendTR","kind":"def","docLink":"./Init/Data/List/Basic.html#List.appendTR","doc":"Tail-recursive version of `List.append`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L74-L76","name":"List.append","kind":"def","docLink":"./Init/Data/List/Basic.html#List.append","doc":"`O(|xs|)`: append two lists. `[1, 2, 3] ++ [4, 5] = [1, 2, 3, 4, 5]`.\nIt takes time proportional to the first list.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L67-L68","name":"List.reverse_reverse","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverse_reverse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L62-L65","name":"List.reverseAux_reverseAux","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverseAux_reverseAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L57-L60","name":"List.reverseAux_reverseAux_nil","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.reverseAux_reverseAux_nil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L54-L55","name":"List.reverse","kind":"def","docLink":"./Init/Data/List/Basic.html#List.reverse","doc":"`O(|as|)`. Reverse of a list:\n* `[1, 2, 3, 4].reverse = [4, 3, 2, 1]`\n\nNote that because of the \"functional but in place\" optimization implemented by Lean's compiler,\nthis function works without any allocations provided that the input list is unshared:\nit simply walks the linked list and reverses all the node pointers.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L42-L44","name":"List.reverseAux","kind":"def","docLink":"./Init/Data/List/Basic.html#List.reverseAux","doc":"Auxiliary for `List.reverse`. `List.reverseAux l r = l.reverse ++ r`, but it is defined directly. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L38-L39","name":"List.length_nil","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_nil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L34-L36","name":"List.length_eq_lengthTR","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_eq_lengthTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L27-L32","name":"List.length_add_eq_lengthTRAux","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.length_add_eq_lengthTRAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L24-L25","name":"List.cons_getElem_succ","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.cons_getElem_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L21-L22","name":"List.cons_getElem_zero","kind":"theorem","docLink":"./Init/Data/List/Basic.html#List.cons_getElem_zero","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/List/Basic.lean#L18-L19","name":"List.instGetElemListNatLtInstLTNatLength","kind":"instance","docLink":"./Init/Data/List/Basic.html#List.instGetElemListNatLtInstLTNatLength","doc":""}]}