{"name":"Lean.Compiler.LCNF.CompilerM","instances":[{"typeNames":["Lean.Compiler.LCNF.Phase"],"name":"Lean.Compiler.LCNF.instInhabitedPhase","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM.State"],"name":"Lean.Compiler.LCNF.CompilerM.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM.Context"],"name":"Lean.Compiler.LCNF.CompilerM.instInhabitedContext","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM"],"name":"Lean.Compiler.LCNF.instMonadCompilerM","className":"Monad"},{"typeNames":["Lean.Compiler.LCNF.CompilerM"],"name":"Lean.Compiler.LCNF.instAddMessageContextCompilerM","className":"Lean.AddMessageContext"},{"typeNames":["Lean.Compiler.LCNF.NormFVarResult"],"name":"Lean.Compiler.LCNF.instInhabitedNormFVarResult","className":"Inhabited"},{"typeNames":[],"name":"Lean.Compiler.LCNF.instMonadFVarSubst","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":[],"name":"Lean.Compiler.LCNF.instMonadFVarSubstState","className":"Lean.Compiler.LCNF.MonadFVarSubstState"},{"typeNames":["Lean.Compiler.LCNF.NormalizerM"],"name":"Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","className":"Lean.Compiler.LCNF.MonadFVarSubst"}],"imports":["Init","Lean.CoreM","Lean.Compiler.LCNF.Basic","Lean.Compiler.LCNF.LCtx","Lean.Compiler.LCNF.ConfigOptions"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L482-L483","name":"Lean.Compiler.LCNF.CompilerM.run","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L479-L480","name":"Lean.Compiler.LCNF.getConfig","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L476-L477","name":"Lean.Compiler.LCNF.mkAuxParam","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkAuxParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L473-L474","name":"Lean.Compiler.LCNF.mkFreshJpName","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFreshJpName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L470-L471","name":"Lean.Compiler.LCNF.replaceFVars","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.replaceFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L467-L468","name":"Lean.Compiler.LCNF.replaceExprFVars","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.replaceExprFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L464-L465","name":"Lean.Compiler.LCNF.normCode","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normCode","doc":"Similar to `internalize`, but does not refresh `FVarId`s. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L460-L461","name":"Lean.Compiler.LCNF.normFunDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L443-L457","name":"Lean.Compiler.LCNF.normCodeImp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normCodeImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L437-L441","name":"Lean.Compiler.LCNF.normFunDeclImp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFunDeclImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L431-L434","name":"Lean.Compiler.LCNF.withNormFVarResult","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.withNormFVarResult","doc":"If `result` is `.fvar fvarId`, then return `x fvarId`. Otherwise, it is `.erased`,\nand method returns `let _x.i := .erased; return _x.i`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L424-L425","name":"Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L422-L422","name":"Lean.Compiler.LCNF.NormalizerM","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.NormalizerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L419-L420","name":"Lean.Compiler.LCNF.normLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L416-L417","name":"Lean.Compiler.LCNF.normParams","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L413-L414","name":"Lean.Compiler.LCNF.normParam","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L410-L411","name":"Lean.Compiler.LCNF.FunDeclCore.updateValue","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.updateValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L407-L408","name":"Lean.Compiler.LCNF.FunDeclCore.update'","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.update'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L405-L405","name":"Lean.Compiler.LCNF.FunDeclCore.update","kind":"opaque","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L394-L395","name":"Lean.Compiler.LCNF.LetDecl.updateValue","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.LetDecl.updateValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L392-L392","name":"Lean.Compiler.LCNF.LetDecl.update","kind":"opaque","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.LetDecl.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L382-L382","name":"Lean.Compiler.LCNF.Param.update","kind":"opaque","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Param.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L370-L372","name":"Lean.Compiler.LCNF.mkReturnErased","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkReturnErased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L367-L368","name":"Lean.Compiler.LCNF.mkLetDeclErased","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkLetDeclErased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L360-L365","name":"Lean.Compiler.LCNF.mkFunDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L353-L358","name":"Lean.Compiler.LCNF.mkLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L346-L351","name":"Lean.Compiler.LCNF.mkParam","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L336-L340","name":"Lean.Compiler.LCNF.ensureNotAnonymous","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.ensureNotAnonymous","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L331-L334","name":"Lean.Compiler.LCNF.mkFreshBinderName","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFreshBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L328-L329","name":"Lean.Compiler.LCNF.normArgs","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normArgs","doc":"Normalize the given arguments using the current substitution.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L322-L323","name":"Lean.Compiler.LCNF.normExprCore","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normExprCore","doc":"Replace the free variables in `e` using the given substitution.\n\nIf `translator = true`, then we assume the free variables occurring in the range of the substitution are in another\nlocal context. For example, `translator = true` during internalization where we are making sure all free variables\nin a given expression are replaced with new ones that do not collide with the ones in the current local context.\n\nIf `translator = false`, we assume the substitution contains free variable replacements in the same local context,\nand given entries such as `x₁ ↦ x₂`, `x₂ ↦ x₃`, ..., `xₙ₋₁ ↦ xₙ`, and the expression `f x₁ x₂`, we want the resulting\nexpression to be `f xₙ xₙ`. We use this setting, for example, in the simplifier.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L318-L319","name":"Lean.Compiler.LCNF.normLetValue","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normLetValue","doc":"Replace the free variables in `e` using the given substitution.\n\nSee `normExprImp`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L315-L316","name":"Lean.Compiler.LCNF.normArg","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normArg","doc":"Replace the free variables in `arg` using the given substitution.\n\nSee `normExprImp`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L312-L313","name":"Lean.Compiler.LCNF.normExpr","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normExpr","doc":"Replace the free variables in `e` using the given substitution.\n\nIf `translator = true`, then we assume the free variables occurring in the range of the substitution are in another\nlocal context. For example, `translator = true` during internalization where we are making sure all free variables\nin a given expression are replaced with new ones that do not collide with the ones in the current local context.\n\nIf `translator = false`, we assume the substitution contains free variable replacements in the same local context,\nand given entries such as `x₁ ↦ x₂`, `x₂ ↦ x₃`, ..., `xₙ₋₁ ↦ xₙ`, and the expression `f x₁ x₂`, we want the resulting\nexpression to be `f xₙ xₙ`. We use this setting, for example, in the simplifier.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L309-L310","name":"Lean.Compiler.LCNF.normFVar","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFVar","doc":"Normalize the given free variable.\nSee `normExprImp` for documentation on the `translator` parameter.\nThis function is meant to be used in contexts where the input free-variable is computationally relevant.\nThis function panics if the substitution is mapping `fvarId` to an expression that is not another free variable.\nThat is, it is not a type (or type former), nor `lcErased`. Recall that a valid `FVarSubst` contains only\nexpressions that are free variables, `lcErased`, or type formers.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L306-L307","name":"Lean.Compiler.LCNF.addSubst","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.addSubst","doc":"Add the substitution `fvarId ↦ e`, `e` must be a valid LCNF argument.\nThat is, it must be a free variable, type (or type former), or `lcErased`.\n\nSee `Check.lean` for the free variable substitution checker.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L297-L298","name":"Lean.Compiler.LCNF.addFVarSubst","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.addFVarSubst","doc":"Add the entry `fvarId ↦ fvarId'` to the free variable substitution.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L291-L292","name":"Lean.Compiler.LCNF.instMonadFVarSubstState","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubstState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L287-L287","name":"Lean.Compiler.LCNF.MonadFVarSubstState.modifySubst","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState.modifySubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L286-L286","name":"Lean.Compiler.LCNF.MonadFVarSubstState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L286-L287","name":"Lean.Compiler.LCNF.MonadFVarSubstState","kind":"class","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L283-L284","name":"Lean.Compiler.LCNF.instMonadFVarSubst","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L279-L279","name":"Lean.Compiler.LCNF.MonadFVarSubst.getSubst","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst.getSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L278-L278","name":"Lean.Compiler.LCNF.MonadFVarSubst.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L278-L279","name":"Lean.Compiler.LCNF.MonadFVarSubst","kind":"class","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst","doc":"Interface for monads that have a free substitutions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L215-L215","name":"Lean.Compiler.LCNF.instInhabitedNormFVarResult","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instInhabitedNormFVarResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L211-L214","name":"Lean.Compiler.LCNF.NormFVarResult.erased","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.NormFVarResult.erased","doc":"Free variable has been erased. This can happen when instantiating polymorphic code\nwith computationally irrelant stuff. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L209-L210","name":"Lean.Compiler.LCNF.NormFVarResult.fvar","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.NormFVarResult.fvar","doc":"New free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L208-L215","name":"Lean.Compiler.LCNF.NormFVarResult","kind":"inductive","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.NormFVarResult","doc":"Result type for `normFVar` and `normFVarImp`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L168-L168","name":"Lean.Compiler.LCNF.FVarSubst","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst","doc":"A free variable substitution.\nWe use these substitutions when inlining definitions and \"internalizing\" LCNF code into `CompilerM`.\nDuring the internalization process, we ensure all free variables in the LCNF code do not collide with existing ones\nat the `CompilerM` local context.\nRemark: in LCNF, (computationally relevant) data is in A-normal form, but this is not the case for types and type formers.\nSo, when inlining we often want to replace a free variable with a type or type former.\n\nThe substitution contains entries `fvarId ↦ e` s.t., `e` is a valid LCNF argument. That is,\nit is a free variable, a type (or type former), or `lcErased`.\n\n`Check.lean` contains a substitution validator.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L152-L153","name":"Lean.Compiler.LCNF.Decl.erase","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Decl.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L148-L150","name":"Lean.Compiler.LCNF.eraseDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L145-L146","name":"Lean.Compiler.LCNF.eraseCodeDecls","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCodeDecls","doc":"Erase all free variables occurring in `decls` from the local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L137-L140","name":"Lean.Compiler.LCNF.eraseCodeDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCodeDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L134-L135","name":"Lean.Compiler.LCNF.eraseParams","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L131-L132","name":"Lean.Compiler.LCNF.eraseParam","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L128-L129","name":"Lean.Compiler.LCNF.eraseCode","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L125-L126","name":"Lean.Compiler.LCNF.eraseFunDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L122-L123","name":"Lean.Compiler.LCNF.eraseLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L119-L120","name":"Lean.Compiler.LCNF.modifyLCtx","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.modifyLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L115-L117","name":"Lean.Compiler.LCNF.getFunDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L111-L113","name":"Lean.Compiler.LCNF.getLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L107-L109","name":"Lean.Compiler.LCNF.getParam","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L103-L105","name":"Lean.Compiler.LCNF.Arg.isConstructorApp","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Arg.isConstructorApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L99-L101","name":"Lean.Compiler.LCNF.isConstructorApp","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.isConstructorApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L95-L97","name":"Lean.Compiler.LCNF.findLetValue?","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findLetValue?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L92-L93","name":"Lean.Compiler.LCNF.findFunDecl?","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findFunDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L89-L90","name":"Lean.Compiler.LCNF.findLetDecl?","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findLetDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L86-L87","name":"Lean.Compiler.LCNF.findParam?","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findParam?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L75-L84","name":"Lean.Compiler.LCNF.getBinderName","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L64-L73","name":"Lean.Compiler.LCNF.getType","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L57-L62","name":"Lean.Compiler.LCNF.instAddMessageContextCompilerM","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instAddMessageContextCompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L54-L55","name":"Lean.Compiler.LCNF.inBasePhase","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.inBasePhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L51-L52","name":"Lean.Compiler.LCNF.getPhase","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L48-L49","name":"Lean.Compiler.LCNF.withPhase","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.withPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L46-L46","name":"Lean.Compiler.LCNF.instMonadCompilerM","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadCompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L43-L43","name":"Lean.Compiler.LCNF.CompilerM","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L41-L41","name":"Lean.Compiler.LCNF.CompilerM.instInhabitedContext","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.instInhabitedContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L40-L40","name":"Lean.Compiler.LCNF.CompilerM.Context.config","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.Context.config","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L39-L39","name":"Lean.Compiler.LCNF.CompilerM.Context.phase","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.Context.phase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L38-L41","name":"Lean.Compiler.LCNF.CompilerM.Context","kind":"structure","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L36-L36","name":"Lean.Compiler.LCNF.CompilerM.instInhabitedState","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L35-L35","name":"Lean.Compiler.LCNF.CompilerM.State.nextIdx","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.State.nextIdx","doc":"Next auxiliary variable suffix "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L33-L33","name":"Lean.Compiler.LCNF.CompilerM.State.lctx","kind":"def","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.State.lctx","doc":"A `LocalContext` to store local declarations from let binders\nand other constructs in as we move through `Expr`s.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L28-L36","name":"Lean.Compiler.LCNF.CompilerM.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.State","doc":"The state managed by the `CompilerM` `Monad`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L23-L23","name":"Lean.Compiler.LCNF.instInhabitedPhase","kind":"instance","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instInhabitedPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L21-L22","name":"Lean.Compiler.LCNF.Phase.impure","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.impure","doc":"In this phase impure stuff such as RC or efficient BaseIO transformations happen. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L19-L20","name":"Lean.Compiler.LCNF.Phase.mono","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.mono","doc":"In this phase polymorphism has been eliminated. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L16-L18","name":"Lean.Compiler.LCNF.Phase.base","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.base","doc":"Here we still carry most of the original type information, most\nof the dependent portion is already (partially) erased though. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L15-L23","name":"Lean.Compiler.LCNF.Phase","kind":"inductive","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase","doc":"The pipeline phase a certain `Pass` is supposed to happen in.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L1-L1","name":"Lean.Compiler.LCNF.CompilerM.Context.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/CompilerM.lean#L1-L1","name":"Lean.Compiler.LCNF.CompilerM.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.State.mk","doc":""}]}