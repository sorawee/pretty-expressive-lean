{"name":"Lean.Data.SMap","instances":[{"typeNames":["Lean.SMap"],"name":"Lean.SMap.instInhabitedSMap","className":"Inhabited"},{"typeNames":["Lean.SMap"],"name":"Lean.instReprSMap","className":"Repr"}],"imports":["Init","Lean.Data.HashMap","Lean.Data.PersistentHashMap"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L103-L104","name":"Lean.instReprSMap","kind":"instance","docLink":"./Lean/Data/SMap.html#Lean.instReprSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L100-L101","name":"Lean.List.toSMap","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.List.toSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L95-L96","name":"Lean.SMap.toList","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.toList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L92-L93","name":"Lean.SMap.numBuckets","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.numBuckets","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L89-L90","name":"Lean.SMap.stageSizes","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.stageSizes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L86-L87","name":"Lean.SMap.size","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L83-L84","name":"Lean.SMap.fold","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.fold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L80-L81","name":"Lean.SMap.foldStage2","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.foldStage2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L77-L78","name":"Lean.SMap.switch","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.switch","doc":"Move from stage 1 into stage 2. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L72-L74","name":"Lean.SMap.forM","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L68-L70","name":"Lean.SMap.find?'","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.find?'","doc":"Similar to `find?`, but searches for result in the hashmap first.\nSo, the result is correct only if we never \"overwrite\" `map₁` entries using `map₂`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L62-L64","name":"Lean.SMap.contains","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L57-L60","name":"Lean.SMap.find!","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.find!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L54-L55","name":"Lean.SMap.findD","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.findD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L50-L52","name":"Lean.SMap.find?","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L46-L48","name":"Lean.SMap.insert'","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.insert'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L42-L44","name":"Lean.SMap.insert","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L39-L40","name":"Lean.SMap.fromHashMap","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.fromHashMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L37-L37","name":"Lean.SMap.empty","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L36-L36","name":"Lean.SMap.instInhabitedSMap","kind":"instance","docLink":"./Lean/Data/SMap.html#Lean.SMap.instInhabitedSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L31-L31","name":"Lean.SMap.map₂","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.map₂","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L30-L30","name":"Lean.SMap.map₁","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.map₁","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L29-L29","name":"Lean.SMap.stage₁","kind":"def","docLink":"./Lean/Data/SMap.html#Lean.SMap.stage₁","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L28-L28","name":"Lean.SMap.mk","kind":"ctor","docLink":"./Lean/Data/SMap.html#Lean.SMap.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Data/SMap.lean#L28-L31","name":"Lean.SMap","kind":"structure","docLink":"./Lean/Data/SMap.html#Lean.SMap","doc":"Staged map for implementing the Environment. The idea is to store\nimported entries into a hashtable and local entries into a persistent hashtable.\n\nHypotheses:\n- The number of entries (i.e., declarations) coming from imported files is much bigger than\n  the number of entries in the current file.\n- HashMap is faster than PersistentHashMap.\n- When we are reading imported files, we have exclusive access to the map, and efficient\n  destructive updates are performed.\n\nRemarks:\n- We never remove declarations from the Environment. In principle, we could support\n  deletion by using `(PHashMap α (Option β))` where the value `none` would indicate\n  that an entry was \"removed\" from the hashtable.\n- We do not need additional bookkeeping for extracting the local entries.\n"}]}