{"name":"Lean.Compiler.LCNF.Simp.SimpM","instances":[{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM"],"name":"Lean.Compiler.LCNF.Simp.instMonadSimpM","className":"Monad"},{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM","Bool.false"],"name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM"],"name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","className":"Lean.Compiler.LCNF.MonadFVarSubstState"}],"imports":["Init","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.Renaming","Lean.Compiler.LCNF.ElimDead","Lean.Compiler.LCNF.AlphaEqv","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Simp.JpCases","Lean.Compiler.LCNF.Simp.DiscrM","Lean.Compiler.LCNF.Simp.FunDeclInfo","Lean.Compiler.LCNF.Simp.Config"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L242-L248","name":"Lean.Compiler.LCNF.Simp.addFVarSubst","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFVarSubst","doc":"Similar to `LCNF.addFVarSubst`. That is, add the entry\n`fvarId ↦ fvarId'` to the free variable substitution.\nIf `fvarId` has a non-internal binder name `n`, but `fvarId'` does not,\nthis method also adds the entry `fvarId' ↦ n` to the `binderRenaming` map.\nThe goal is to preserve user provided names.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L231-L233","name":"Lean.Compiler.LCNF.Simp.eraseFunDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.eraseFunDecl","doc":"Erase the given local function declaration from the local context,\nand set the `simplified` flag to true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L223-L225","name":"Lean.Compiler.LCNF.Simp.eraseLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.eraseLetDecl","doc":"Erase the given let-declaration from the local context,\nand set the `simplified` flag to true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L211-L217","name":"Lean.Compiler.LCNF.Simp.betaReduce","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.betaReduce","doc":"LCNF \"Beta-reduce\". The equivalent of `(fun params => code) args`.\nIf `mustInline` is true, the local function declarations in the resulting code are marked as `.mustInline`.\nSee comment at `updateFunDeclInfo`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L200-L204","name":"Lean.Compiler.LCNF.Simp.shouldInlineLocal","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.shouldInlineLocal","doc":"Return `true` if the given local function declaration should be inlined.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L194-L195","name":"Lean.Compiler.LCNF.Simp.isSmall","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.isSmall","doc":"Return `true` if the given code is considered \"small\".\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L186-L189","name":"Lean.Compiler.LCNF.Simp.isOnceOrMustInline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.isOnceOrMustInline","doc":"Return true if the given local function declaration or join point id is marked as\n`once` or `mustInline`. We use this information to decide whether to inline them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L174-L180","name":"Lean.Compiler.LCNF.Simp.withAddMustInline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withAddMustInline","doc":"Execute `x` with `fvarId` set as `mustInline`.\nAfter execution the original setting is restored.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L152-L168","name":"Lean.Compiler.LCNF.Simp.withIncRecDepth.throwMaxRecDepth","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withIncRecDepth.throwMaxRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L144-L168","name":"Lean.Compiler.LCNF.Simp.withIncRecDepth","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withIncRecDepth","doc":"Similar to the default `Lean.withIncRecDepth`, but include the `inlineStack` in the error messsage.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L132-L139","name":"Lean.Compiler.LCNF.Simp.withInlining.check","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withInlining.check","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L125-L139","name":"Lean.Compiler.LCNF.Simp.withInlining","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withInlining","doc":"Execute `x` with an updated `inlineStack`. If `value` is of the form `const ...`, add `const` to the stack.\nOtherwise, do not change the `inlineStack`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L116-L119","name":"Lean.Compiler.LCNF.Simp.updateFunDeclInfo","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.updateFunDeclInfo","doc":"Traverse `code` and update function occurrence map.\nThis map is used to decide whether we inline local functions or not.\nIf `mustInline := true`, then all local function declarations occurring in\n`code` are tagged as `.mustInline`.\nRecall that we use `.mustInline` for local function declarations occurring in type class instances.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L112-L113","name":"Lean.Compiler.LCNF.Simp.addFunHoOcc","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFunHoOcc","doc":"Add a new occurrence of local function `fvarId` in argument position . "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L108-L109","name":"Lean.Compiler.LCNF.Simp.addFunOcc","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFunOcc","doc":"Add a new occurrence of local function `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L104-L105","name":"Lean.Compiler.LCNF.Simp.addMustInline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addMustInline","doc":"Mark the local function declaration or join point with the given id as a \"must inline\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L100-L101","name":"Lean.Compiler.LCNF.Simp.incInlineLocal","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incInlineLocal","doc":"Increment `inlineLocal` performance counter. It is the number of inlined local function and join point declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L96-L97","name":"Lean.Compiler.LCNF.Simp.incInline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incInline","doc":"Increment `inline` performance counter. It is the number of inlined global declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L92-L93","name":"Lean.Compiler.LCNF.Simp.incVisited","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incVisited","doc":"Increment `visited` performance counter. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L88-L89","name":"Lean.Compiler.LCNF.Simp.markSimplified","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.markSimplified","doc":"Set the `simplified` flag to `true`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L84-L85","name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L81-L82","name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L79-L79","name":"Lean.Compiler.LCNF.Simp.instMonadSimpM","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadSimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L76-L76","name":"Lean.Compiler.LCNF.Simp.SimpM","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L74-L74","name":"Lean.Compiler.LCNF.Simp.State.inlineLocal","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.inlineLocal","doc":"Number of local functions inlined.\nThis is a performance counter.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L69-L69","name":"Lean.Compiler.LCNF.Simp.State.inline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.inline","doc":"Number of definitions inlined.\nThis is a performance counter.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L64-L64","name":"Lean.Compiler.LCNF.Simp.State.visited","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.visited","doc":"Number of visited `let-declarations` and terminal values.\nThis is a performance counter, and currently has no impact on code generation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L59-L59","name":"Lean.Compiler.LCNF.Simp.State.simplified","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.simplified","doc":"`true` if some simplification was performed in the current simplification pass.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L55-L55","name":"Lean.Compiler.LCNF.Simp.State.funDeclInfoMap","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.funDeclInfoMap","doc":"Mapping used to decide whether a local function declaration must be inlined or not.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L51-L51","name":"Lean.Compiler.LCNF.Simp.State.binderRenaming","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.binderRenaming","doc":"Mapping containing free variables ids that need to be renamed (i.e., the `binderName`).\nWe use this map to preserve user provide names.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L46-L46","name":"Lean.Compiler.LCNF.Simp.State.used","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.used","doc":"Track used local declarations to be able to eliminate dead variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L42-L42","name":"Lean.Compiler.LCNF.Simp.State.subst","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.subst","doc":"Free variable substitution. We use it to implement inlining and removing redundant variables `let _x.i := _x.j`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L38-L74","name":"Lean.Compiler.LCNF.Simp.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L36-L36","name":"Lean.Compiler.LCNF.Simp.Context.inlineStackOccs","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context.inlineStackOccs","doc":"Mapping from declaration names to number of occurrences at `inlineStack`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L32-L32","name":"Lean.Compiler.LCNF.Simp.Context.inlineStack","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context.inlineStack","doc":"Stack of global declarations being recursively inlined.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L28-L28","name":"Lean.Compiler.LCNF.Simp.Context.config","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context.config","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L27-L27","name":"Lean.Compiler.LCNF.Simp.Context.declName","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context.declName","doc":"Name of the declaration being simplified.\nWe currently use this information because we are generating phase1 declarations  on demand,\nand it may trigger non-termination when trying to access the phase1 declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L21-L36","name":"Lean.Compiler.LCNF.Simp.Context","kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L1-L1","name":"Lean.Compiler.LCNF.Simp.Context.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L1-L1","name":"Lean.Compiler.LCNF.Simp.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State.mk","doc":""}]}