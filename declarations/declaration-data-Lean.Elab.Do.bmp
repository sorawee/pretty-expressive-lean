{"name":"Lean.Elab.Do","instances":[{"typeNames":["Lean.Elab.Term.Do.Alt"],"name":"Lean.Elab.Term.Do.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.Code"],"name":"Lean.Elab.Term.Do.instInhabitedCode","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.ToTerm.Kind"],"name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","className":"Inhabited"}],"imports":["Init","Lean.Elab.Term","Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Util","Lean.Parser.Do"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1698-L1698","name":"Lean.Elab.Term.expandTermReturn","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1695-L1695","name":"Lean.Elab.Term.expandTermUnless","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1692-L1692","name":"Lean.Elab.Term.expandTermTry","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1689-L1689","name":"Lean.Elab.Term.expandTermFor","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1670-L1678","name":"Lean.Elab.Term.Do.elabDo","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1665-L1666","name":"Lean.Elab.Term.Do.ToCodeBlock.run","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1589-L1662","name":"Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1538-L1587","name":"Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","doc":"Generate `CodeBlock` for `doTry; doElems`\n```\ndef doTry := leading_parser \"try \" >> doSeq >> many (doCatch <|> doCatchMatch) >> optional doFinally\ndef doCatch      := leading_parser \"catch \" >> binderIdent >> optional (\":\" >> termParser) >> darrow >> doSeq\ndef doCatchMatch := leading_parser \"catch \" >> doMatchAlts\ndef doFinally    := leading_parser \"finally \" >> doSeq\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1512-L1527","name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","doc":"Generate `CodeBlock` for `doMatch; doElems` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1426-L1509","name":"Lean.Elab.Term.Do.ToCodeBlock.doForToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode","doc":"Generate `CodeBlock` for `doFor; doElems`\n`doFor` is of the form\n```\ndef doForDecl := leading_parser termParser >> \" in \" >> withForbidden \"do\" termParser\ndef doFor := leading_parser \"for \" >> sepBy1 doForDecl \", \" >> \"do \" >> doSeq\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1412-L1417","name":"Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","doc":"Generate `CodeBlock` for `doUnless; doElems`\n`doUnless` is of the form\n```\n\"unless \" >> termParser >> \"do \" >> doSeq\n```  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1400-L1405","name":"Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","doc":"Generate `CodeBlock` for `doIf; doElems`\n`doIf` is of the form\n```\n\"if \" >> optIdent >> termParser >> \" then \" >> doSeq\n >> many (group (try (group (\" else \" >> \" if \")) >> optIdent >> termParser >> \" then \" >> doSeq))\n >> optional (\" else \" >> doSeq)\n```  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1374-L1391","name":"Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","doc":"Generate `CodeBlock` for `doReassignArrow; doElems`\n`doReassignArrow` is of the form\n```\n(doIdDecl <|> doPatDecl)\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1354-L1366","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1316-L1352","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","doc":"Generate `CodeBlock` for `doLetArrow; doElems`\n`doLetArrow` is of the form\n```\n\"let \" >> optional \"mut \" >> (doIdDecl <|> doPatDecl)\n```\nwhere\n```\ndef doIdDecl   := leading_parser ident >> optType >> leftArrow >> doElemParser\ndef doPatDecl  := leading_parser termParser >> leftArrow >> doElemParser >> optional (\" | \" >> doSeq)\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1297-L1303","name":"Lean.Elab.Term.Do.ToCodeBlock.concatWith","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith","doc":"\"Concatenate\" `c` with `doSeqToCode doElems` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1288-L1293","name":"Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1280-L1286","name":"Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1278-L1278","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1277-L1277","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1276-L1276","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.x","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1275-L1278","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1269-L1273","name":"Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","doc":"Generate `CodeBlock` for `doReturn` which is of the form\n```\n\"return \" >> optional termParser\n```\n`doElems` is only used for sanity checking. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1254-L1262","name":"Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1246-L1252","name":"Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1212-L1214","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1208-L1210","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1201-L1206","name":"Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1199-L1199","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1198-L1198","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1197-L1199","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1194-L1195","name":"Lean.Elab.Term.Do.ToCodeBlock.withFor","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1186-L1192","name":"Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1178-L1184","name":"Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1175-L1176","name":"Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1173-L1173","name":"Lean.Elab.Term.Do.ToCodeBlock.M","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1171-L1171","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1170-L1170","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1169-L1169","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1167-L1167","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.m","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m","doc":"Syntax representing the monad associated with the do notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1165-L1165","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.ref","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1164-L1171","name":"Lean.Elab.Term.Do.ToCodeBlock.Context","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1156-L1160","name":"Lean.Elab.Term.Do.isMutableLet","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1109-L1152","name":"Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","doc":"Given a term `term` produced by `ToTerm.run`, pattern match on its result.\nSee comment at the beginning of the `ToTerm` namespace.\n\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\nThe result is a sequence of `doElem` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1098-L1099","name":"Lean.Elab.Term.Do.ToTerm.mkNestedTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1087-L1096","name":"Lean.Elab.Term.Do.ToTerm.mkNestedKind","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind","doc":"Given\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\ngenerate Kind. See comment at the beginning of the `ToTerm` namespace. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1078-L1079","name":"Lean.Elab.Term.Do.ToTerm.run","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1057-L1076","name":"Lean.Elab.Term.Do.ToTerm.toTerm.go","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1050-L1076","name":"Lean.Elab.Term.Do.ToTerm.toTerm","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1047-L1048","name":"Lean.Elab.Term.Do.ToTerm.mkJmp","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1018-L1045","name":"Lean.Elab.Term.Do.ToTerm.mkJoinPoint","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1011-L1016","name":"Lean.Elab.Term.Do.ToTerm.mkIte","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1003-L1009","name":"Lean.Elab.Term.Do.ToTerm.reassignToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L972-L1001","name":"Lean.Elab.Term.Do.ToTerm.declToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L961-L970","name":"Lean.Elab.Term.Do.ToTerm.seqToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L949-L959","name":"Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L937-L947","name":"Lean.Elab.Term.Do.ToTerm.breakToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L925-L935","name":"Lean.Elab.Term.Do.ToTerm.continueToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L913-L923","name":"Lean.Elab.Term.Do.ToTerm.returnToTerm","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L909-L911","name":"Lean.Elab.Term.Do.ToTerm.mkUVarTuple","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L907-L907","name":"Lean.Elab.Term.Do.ToTerm.M","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L905-L905","name":"Lean.Elab.Term.Do.ToTerm.Context.kind","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L904-L904","name":"Lean.Elab.Term.Do.ToTerm.Context.uvars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L903-L903","name":"Lean.Elab.Term.Do.ToTerm.Context.returnType","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L901-L901","name":"Lean.Elab.Term.Do.ToTerm.Context.m","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m","doc":"Syntax to reference the monad associated with the do notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L899-L905","name":"Lean.Elab.Term.Do.ToTerm.Context","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L895-L897","name":"Lean.Elab.Term.Do.ToTerm.Kind.isRegular","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L893-L893","name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L891-L891","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L890-L890","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L889-L889","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L888-L888","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L887-L887","name":"Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L886-L886","name":"Lean.Elab.Term.Do.ToTerm.Kind.forIn","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L885-L885","name":"Lean.Elab.Term.Do.ToTerm.Kind.regular","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L884-L891","name":"Lean.Elab.Term.Do.ToTerm.Kind","kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L879-L880","name":"Lean.Elab.Term.Do.annotate","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate","doc":"Helper method for annotating `term` with the raw syntax `ref`.\nWe use this method to implement finer-grained term infos for `do`-blocks.\n\nWe use `withRef term` to make sure the synthetic position for the `with_annotate_term` is equal\nto the one for `term`. This is important for producing error messages when there is a type mismatch.\nConsider the following example:\n```\nopaque f : IO Nat\n\ndef g : IO String := do\n  f\n```\nThere is at type mismatch at `f`, but it is detected when elaborating the expanded term\ncontaining the `with_annotate_term .. f`. The current `getRef` when this `annotate` is invoked\nis not necessarily `f`. Actually, it is the whole `do`-block. By using `withRef` we ensure\nthe synthetic position for the `with_annotate_term ..` is equal to `term`.\nRecall that synthetic positions are used when generating error messages.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L737-L741","name":"Lean.Elab.Term.Do.isDoExpr?","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?","doc":"Return `some action` if `doElem` is a `doExpr <action>`"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L707-L707","name":"Lean.Elab.Term.Do.DoIfView.elseBranch","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L706-L706","name":"Lean.Elab.Term.Do.DoIfView.thenBranch","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L705-L705","name":"Lean.Elab.Term.Do.DoIfView.cond","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L704-L704","name":"Lean.Elab.Term.Do.DoIfView.optIdent","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L703-L703","name":"Lean.Elab.Term.Do.DoIfView.ref","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L702-L707","name":"Lean.Elab.Term.Do.DoIfView","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L681-L682","name":"Lean.Elab.Term.Do.mkDoSeq","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L672-L679","name":"Lean.Elab.Term.Do.getDoReassignVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L663-L670","name":"Lean.Elab.Term.Do.getDoLetArrowVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L658-L660","name":"Lean.Elab.Term.Do.getDoPatDeclVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L654-L655","name":"Lean.Elab.Term.Do.getDoIdDeclVar","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L643-L651","name":"Lean.Elab.Term.Do.getDoLetRecVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L627-L641","name":"Lean.Elab.Term.Do.getDoHaveVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L621-L625","name":"Lean.Elab.Term.Do.getHaveIdLhsVar","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getHaveIdLhsVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L617-L619","name":"Lean.Elab.Term.Do.getDoLetVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L606-L615","name":"Lean.Elab.Term.Do.getLetDeclVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L603-L604","name":"Lean.Elab.Term.Do.getLetEqnsDeclVar","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L599-L601","name":"Lean.Elab.Term.Do.getLetPatDeclVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L595-L597","name":"Lean.Elab.Term.Do.getPatternsVarsEx","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L591-L593","name":"Lean.Elab.Term.Do.getPatternVarsEx","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L587-L588","name":"Lean.Elab.Term.Do.getLetIdDeclVar","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L574-L585","name":"Lean.Elab.Term.Do.concat","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat","doc":"Return a code block that executes `terminal` and then `k` with the value produced by `terminal`.\nThis method assumes `terminal` is a terminal "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L564-L570","name":"Lean.Elab.Term.Do.mkMatch","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L560-L562","name":"Lean.Elab.Term.Do.mkUnless","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L557-L558","name":"Lean.Elab.Term.Do.mkPureUnitAction","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L543-L549","name":"Lean.Elab.Term.Do.mkIte","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L540-L541","name":"Lean.Elab.Term.Do.mkContinue","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L537-L538","name":"Lean.Elab.Term.Do.mkBreak","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L534-L535","name":"Lean.Elab.Term.Do.mkReturn","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L531-L532","name":"Lean.Elab.Term.Do.mkTerminalAction","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L528-L529","name":"Lean.Elab.Term.Do.mkSeq","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L520-L526","name":"Lean.Elab.Term.Do.mkReassignCore","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore","doc":"Extending code blocks with reassignments: `x : t := v` and `x : t ← v`.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `(x, y) ← t`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L509-L512","name":"Lean.Elab.Term.Do.mkVarDeclCore","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore","doc":"Extending code blocks with variable declarations: `let x : t := v` and `let x : t ← v`.\nWe remove `x` from the collection of updated varibles.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `let (x, y) := t`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L496-L500","name":"Lean.Elab.Term.Do.homogenize","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize","doc":"Given two code blocks `c₁` and `c₂`, make sure they have the same set of updated variables.\nLet `ws` the union of the updated variables in `c₁‵ and ‵c₂`.\nWe use `extendUpdatedVars c₁ ws` and `extendUpdatedVars c₂ ws`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L481-L486","name":"Lean.Elab.Term.Do.extendUpdatedVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars","doc":"Extend the set of updated variables. It assumes `ws` is a super set of `c.uvars`.\nWe **cannot** simply update the field `c.uvars`, because `c` may have shadowed some variable in `ws`.\nSee discussion at `pullExitPoints`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L449-L473","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux.update","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L448-L474","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L441-L446","name":"Lean.Elab.Term.Do.pullExitPoints","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints","doc":"Auxiliary operation for adding new variables to the collection of updated variables in a CodeBlock.\nWhen a new variable is not already in the collection, but is shadowed by some declaration in `c`,\nwe create auxiliary join points to make sure we preserve the semantics of the code block.\nExample: suppose we have the code block `print x; let x := 10; return x`. And we want to extend it\nwith the reassignment `x := x + 1`. We first use `pullExitPoints` to create\n```\nlet jp (x!1) :=  return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nand then we add the reassignment\n```\nx := x + 1\nlet jp (x!1) := return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nNote that we created a fresh variable `x!1` to avoid accidental name capture.\nAs another example, consider\n```\nprint x;\nlet x := 10\ny := y + 1;\nreturn x;\n```\nWe transform it into\n```\nlet jp (y x!1) := return x!1;\nprint x;\nlet x := 10\ny := y + 1;\njmp jp y x\n```\nand then we add the reassignment as in the previous example.\nWe need to include `y` in the jump, because each exit point is implicitly returning the set of\nupdate variables.\n\nWe implement the method as follows. Let `us` be `c.uvars`, then\n1- for each `return _ y` in `c`, we create a join point\n  `let j (us y!1) := return y!1`\n   and replace the `return _ y` with `jmp us y`\n2- for each `break`, we create a join point\n  `let j (us) := break`\n   and replace the `break` with `jmp us`.\n3- Same as 2 for `continue`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L374-L390","name":"Lean.Elab.Term.Do.pullExitPointsAux","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux","doc":"`pullExitPointsAux rs c` auxiliary method for `pullExitPoints`, `rs` is the set of update variable in the current path.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L363-L371","name":"Lean.Elab.Term.Do.mkJmp","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp","doc":"Create a new joinpoint that takes `rs` and `val` as arguments. `val` must be syntax representing a pure value.\nThe body of the joinpoint is created using `mkJPBody yFresh`, where `yFresh`\nis a fresh variable created by this method. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L351-L358","name":"Lean.Elab.Term.Do.mkSimpleJmp","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp","doc":"Create a new jointpoint for `c`, and jump to it with the variables `rs` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L345-L348","name":"Lean.Elab.Term.Do.eraseOptVar","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L342-L343","name":"Lean.Elab.Term.Do.eraseVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L339-L340","name":"Lean.Elab.Term.Do.insertVars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L334-L337","name":"Lean.Elab.Term.Do.addFreshJP","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L322-L332","name":"Lean.Elab.Term.Do.mkFreshJP","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L319-L320","name":"Lean.Elab.Term.Do.attachJPs","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L316-L317","name":"Lean.Elab.Term.Do.attachJP","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L314-L314","name":"Lean.Elab.Term.Do.JPDecl.body","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L313-L313","name":"Lean.Elab.Term.Do.JPDecl.params","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L312-L312","name":"Lean.Elab.Term.Do.JPDecl.name","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L311-L314","name":"Lean.Elab.Term.Do.JPDecl","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L296-L308","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L295-L309","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp","doc":"Convert `action _ e` instructions in `c` into `let y ← e; jmp _ jp (xs y)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L286-L292","name":"Lean.Elab.Term.Do.mkAuxDeclFor","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L279-L284","name":"Lean.Elab.Term.Do.hasBreakContinueReturn","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L273-L277","name":"Lean.Elab.Term.Do.hasBreakContinue","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L268-L271","name":"Lean.Elab.Term.Do.hasTerminalAction","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L263-L266","name":"Lean.Elab.Term.Do.hasReturn","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L260-L261","name":"Lean.Elab.Term.Do.hasExitPoint","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L249-L257","name":"Lean.Elab.Term.Do.hasExitPointPred.loop","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L248-L258","name":"Lean.Elab.Term.Do.hasExitPointPred","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred","doc":"Return true if the give code contains an exit point that satisfies `p` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L231-L244","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L229-L245","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L221-L221","name":"Lean.Elab.Term.Do.CodeBlock.uvars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L220-L220","name":"Lean.Elab.Term.Do.CodeBlock.code","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L219-L221","name":"Lean.Elab.Term.Do.CodeBlock","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock","doc":"A code block, and the collection of variables updated by it. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L216-L216","name":"Lean.Elab.Term.Do.VarSet","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L203-L214","name":"Lean.Elab.Term.Do.Code.getRef?","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L201-L201","name":"Lean.Elab.Term.Do.instInhabitedCode","kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L200-L200","name":"Lean.Elab.Term.Do.Code.jmp","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L199-L199","name":"Lean.Elab.Term.Do.Code.match","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L197-L198","name":"Lean.Elab.Term.Do.Code.ite","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite","doc":"Recall that an if-then-else may declare a variable using `optIdent` for the branches `thenBranch` and `elseBranch`. We store the variable name at `var?`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L196-L196","name":"Lean.Elab.Term.Do.Code.return","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L195-L195","name":"Lean.Elab.Term.Do.Code.continue","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L194-L194","name":"Lean.Elab.Term.Do.Code.break","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L193-L193","name":"Lean.Elab.Term.Do.Code.action","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L192-L192","name":"Lean.Elab.Term.Do.Code.seq","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L190-L191","name":"Lean.Elab.Term.Do.Code.joinpoint","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint","doc":"The Boolean value in `params` indicates whether we should use `(x : typeof! x)` when generating term Syntax or not "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L189-L189","name":"Lean.Elab.Term.Do.Code.reassign","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L188-L188","name":"Lean.Elab.Term.Do.Code.decl","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L187-L201","name":"Lean.Elab.Term.Do.Code","kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code","doc":"Auxiliary datastructure for representing a `do` code block, and compiling \"reassignments\" (e.g., `x := x + 1`).\nWe convert `Code` into a `Syntax` term representing the:\n- `do`-block, or\n- the visitor argument for the `forIn` combinator.\n\nWe say the following constructors are terminals:\n- `break`:    for interrupting a `for x in s`\n- `continue`: for interrupting the current iteration of a `for x in s`\n- `return e`: for returning `e` as the result for the whole `do` computation block\n- `action a`: for executing action `a` as a terminal\n- `ite`:      if-then-else\n- `match`:    pattern matching\n- `jmp`       a goto to a join-point\n\nWe say the terminals `break`, `continue`, `action`, and `return` are \"exit points\"\n\nNote that, `return e` is not equivalent to `action (pure e)`. Here is an example:\n```\ndef f (x : Nat) : IO Unit := do\nif x == 0 then\n   return ()\nIO.println \"hello\"\n```\nExecuting `#eval f 0` will not print \"hello\". Now, consider\n```\ndef g (x : Nat) : IO Unit := do\nif x == 0 then\n   pure ()\nIO.println \"hello\"\n```\nThe `if` statement is essentially a noop, and \"hello\" is printed when we execute `g 0`.\n\n- `decl` represents all declaration-like `doElem`s (e.g., `let`, `have`, `let rec`).\n  The field `stx` is the actual `doElem`,\n  `vars` is the array of variables declared by it, and `cont` is the next instruction in the `do` code block.\n  `vars` is an array since we have declarations such as `let (a, b) := s`.\n\n- `reassign` is an reassignment-like `doElem` (e.g., `x := x + 1`).\n\n- `joinpoint` is a join point declaration: an auxiliary `let`-declaration used to represent the control-flow.\n\n- `seq a k` executes action `a`, ignores its result, and then executes `k`.\n  We also store the do-elements `dbg_trace` and `assert!` as actions in a `seq`.\n\nA code block `C` is well-formed if\n- For every `jmp ref j as` in `C`, there is a `joinpoint j ps b k` and `jmp ref j as` is in `k`, and\n  `ps.size == as.size` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L137-L137","name":"Lean.Elab.Term.Do.instInhabitedAlt","kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L136-L136","name":"Lean.Elab.Term.Do.Alt.rhs","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L135-L135","name":"Lean.Elab.Term.Do.Alt.patterns","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L134-L134","name":"Lean.Elab.Term.Do.Alt.vars","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L133-L133","name":"Lean.Elab.Term.Do.Alt.ref","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L132-L132","name":"Lean.Elab.Term.Do.Alt.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L132-L137","name":"Lean.Elab.Term.Do.Alt","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt","doc":"A `doMatch` alternative. `vars` is the array of variables declared by `patterns`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L129-L129","name":"Lean.Elab.Term.Do.Var","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L91-L91","name":"Lean.Elab.Term.ExtractMonadResult.expectedType","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L90-L90","name":"Lean.Elab.Term.ExtractMonadResult.returnType","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L89-L89","name":"Lean.Elab.Term.ExtractMonadResult.m","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L88-L91","name":"Lean.Elab.Term.ExtractMonadResult","kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L31-L32","name":"Lean.Elab.Term.elabLiftMethod","kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.JPDecl.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.ToTerm.Context.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.CodeBlock.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.DoIfView.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.ExtractMonadResult.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Do.lean#L1-L1","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","doc":""}]}