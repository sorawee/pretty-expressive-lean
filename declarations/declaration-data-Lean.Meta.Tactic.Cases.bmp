{"name":"Lean.Meta.Tactic.Cases","instances":[],"imports":["Init","Lean.Meta.AppBuilder","Lean.Meta.Tactic.Induction","Lean.Meta.Tactic.Injection","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Acyclic","Lean.Meta.Tactic.UnifyEq"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L311-L316","name":"Lean.MVarId.byCases","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCases","doc":"Split the goal in two subgoals: one containing the hypothesis `h : p` and another containing `h : ¬ p`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L302-L302","name":"Lean.Meta.ByCasesSubgoal.fvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L301-L301","name":"Lean.Meta.ByCasesSubgoal.mvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L300-L302","name":"Lean.Meta.ByCasesSubgoal","kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal","doc":"Auxiliary structure for storing `byCases` tactic result. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L293-L297","name":"Lean.MVarId.substEqs","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.substEqs","doc":"Applies `cases` to any hypothesis of the form `h : r = s`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L286-L288","name":"Lean.MVarId.casesAnd","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesAnd","doc":"Applies `cases` (recursively) to any hypothesis of the form `h : p ∧ q`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L271-L281","name":"Lean.MVarId.casesRec","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesRec","doc":"Keep applying `cases` on any hypothesis that satisfies `p`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L265-L266","name":"Lean.Meta.cases","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.cases","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L261-L262","name":"Lean.MVarId.cases","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.cases","doc":"Apply `casesOn` using the free variable `majorFVarId` as the major premise (aka discriminant).\n`givenNames` contains user-facing names for each alternative.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L232-L253","name":"Lean.Meta.Cases.cases","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.cases","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L202-L210","name":"Lean.Meta.Cases.unifyEqs?","kind":"opaque","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.unifyEqs?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L136-L136","name":"Lean.Meta.Cases.Context.majorTypeIndices","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeIndices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L135-L135","name":"Lean.Meta.Cases.Context.majorTypeArgs","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L134-L134","name":"Lean.Meta.Cases.Context.majorTypeFn","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L133-L133","name":"Lean.Meta.Cases.Context.majorDecl","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L132-L132","name":"Lean.Meta.Cases.Context.nminors","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.nminors","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L131-L131","name":"Lean.Meta.Cases.Context.casesOnVal","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.casesOnVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L130-L130","name":"Lean.Meta.Cases.Context.inductiveVal","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.inductiveVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L129-L136","name":"Lean.Meta.Cases.Context","kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L125-L125","name":"Lean.Meta.CasesSubgoal.ctorName","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.ctorName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L124-L125","name":"Lean.Meta.CasesSubgoal","kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L85-L122","name":"Lean.Meta.generalizeIndices","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices","doc":"Similar to `generalizeTargets` but customized for the `casesOn` motive.\nGiven a metavariable `mvarId` representing the\n```\nCtx, h : I A j, D |- T\n```\nwhere `fvarId` is `h`s id, and the type `I A j` is an inductive datatype where `A` are parameters,\nand `j` the indices. Generate the goal\n```\nCtx, h : I A j, D, j' : J, h' : I A j' |- j == j' -> h == h' -> T\n```\nRemark: `(j == j' -> h == h')` is a \"telescopic\" equality.\nRemark: `j` is sequence of terms, and `j'` a sequence of free variables.\nThe result contains the fields\n- `mvarId`: the new goal\n- `indicesFVarIds`: `j'` ids\n- `fvarId`: `h'` id\n- `numEqs`: number of equations in the target "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L65-L65","name":"Lean.Meta.GeneralizeIndicesSubgoal.numEqs","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.numEqs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L64-L64","name":"Lean.Meta.GeneralizeIndicesSubgoal.fvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L63-L63","name":"Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L62-L62","name":"Lean.Meta.GeneralizeIndicesSubgoal.mvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L61-L65","name":"Lean.Meta.GeneralizeIndicesSubgoal","kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L45-L59","name":"Lean.Meta.generalizeTargetsEq","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeTargetsEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L19-L24","name":"Lean.Meta.getInductiveUniverseAndParams","kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.getInductiveUniverseAndParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.CasesSubgoal.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.GeneralizeIndicesSubgoal.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.Cases.Context.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Cases.lean#L1-L1","name":"Lean.Meta.ByCasesSubgoal.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mk","doc":""}]}