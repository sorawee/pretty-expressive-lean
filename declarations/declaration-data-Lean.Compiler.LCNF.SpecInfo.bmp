{"name":"Lean.Compiler.LCNF.SpecInfo","instances":[{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instReprSpecParamInfo","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","className":"Lean.ToMessageData"},{"typeNames":["Lean.Compiler.LCNF.SpecState"],"name":"Lean.Compiler.LCNF.instInhabitedSpecState","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.SpecEntry"],"name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","className":"Inhabited"}],"imports":["Init","Lean.Compiler.Specialize","Lean.Compiler.LCNF.FixedParams","Lean.Compiler.LCNF.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L209-L210","name":"Lean.Compiler.LCNF.isSpecCandidate","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.isSpecCandidate","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L206-L207","name":"Lean.Compiler.LCNF.getSpecParamInfo?","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L197-L204","name":"Lean.Compiler.LCNF.getSpecParamInfoCore?","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfoCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L145-L195","name":"Lean.Compiler.LCNF.saveSpecParamInfo","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.saveSpecParamInfo","doc":"Save parameter information for `decls`.\n\nRemark: this function, similarly to `mkFixedArgMap`,\nassumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L78-L87","name":"Lean.Compiler.LCNF.specExtension","kind":"opaque","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.specExtension","doc":"Extension for storing `SpecParamInfo` for declarations being compiled.\nRemark: we only store information for declarations that will be specialized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L63-L65","name":"Lean.Compiler.LCNF.SpecState.addEntry","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.addEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L59-L59","name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L58-L58","name":"Lean.Compiler.LCNF.SpecEntry.paramsInfo","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.paramsInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L57-L57","name":"Lean.Compiler.LCNF.SpecEntry.declName","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.declName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L56-L59","name":"Lean.Compiler.LCNF.SpecEntry","kind":"structure","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L54-L54","name":"Lean.Compiler.LCNF.instInhabitedSpecState","kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L53-L53","name":"Lean.Compiler.LCNF.SpecState.specInfo","kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.specInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L52-L54","name":"Lean.Compiler.LCNF.SpecState","kind":"structure","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L44-L50","name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L42-L42","name":"Lean.Compiler.LCNF.instReprSpecParamInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L42-L42","name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L38-L41","name":"Lean.Compiler.LCNF.SpecParamInfo.other","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.other","doc":"Parameter is not going to be specialized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L32-L37","name":"Lean.Compiler.LCNF.SpecParamInfo.user","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.user","doc":"An argument that has been specified in the `@[specialize]` attribute. Lean specializes it even if it is\nnot fixed in recursive declarations. Non-termination can happen, and Lean interrupts it with an error message\nbased on the stack depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L27-L31","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","doc":"Computationally irrelevant parameters that are fixed in recursive declarations,\n*and* there is a `fixedInst`, `fixedHO`, or `user` param that depends on it.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L21-L26","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedHO","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedHO","doc":"A parameter that is a function and is fixed in recursive declarations. If the user tags a declaration\nwith `@[specialize]` without specifying which arguments should be specialized, Lean will specialize\n`.fixedHO` arguments in addition to `.fixedInst`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L16-L20","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedInst","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedInst","doc":"A parameter that is an type class instance (or an arrow that produces a type class instance),\nand is fixed in recursive declarations. By default, Lean always specializes this kind of argument.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L15-L42","name":"Lean.Compiler.LCNF.SpecParamInfo","kind":"inductive","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo","doc":"Each parameter is associated with a `SpecParamInfo`. This information is used by `LCNF/Specialize.lean`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L1-L1","name":"Lean.Compiler.LCNF.SpecState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/SpecInfo.lean#L1-L1","name":"Lean.Compiler.LCNF.SpecEntry.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.mk","doc":""}]}