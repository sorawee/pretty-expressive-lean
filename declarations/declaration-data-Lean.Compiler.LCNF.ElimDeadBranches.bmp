{"name":"Lean.Compiler.LCNF.ElimDeadBranches","instances":[{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","className":"BEq"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L601-L602","name":"Lean.Compiler.LCNF.elimDeadBranches","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L579-L599","name":"Lean.Compiler.LCNF.Decl.elimDeadBranches","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L542-L574","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L538-L574","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead","doc":"Use the information produced by the abstract interpeter to:\n- Eliminate branches that we know cannot be hit\n- Eliminate values that we know have to be constants.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L524-L531","name":"Lean.Compiler.LCNF.UnreachableBranches.inferMain","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain","doc":"Run `inferStep` until it reaches a fix point.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L505-L519","name":"Lean.Compiler.LCNF.UnreachableBranches.inferStep","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep","doc":"Rerun the abstract interpreter on all declarations except of the unsafe\nones. Return whether any `Value` got updated in the process.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L492-L498","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L487-L490","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","doc":"If we see a function being passed as an argument to a higher order\nfunction we cannot know what arguments it will be passed further\ndown the line. Hence we set all of its arguments to `top` since anything\nis possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L477-L479","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L444-L475","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","doc":"The abstract interpreter on a `LetValue`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L408-L498","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode","doc":"The actual abstract interpreter on a block of `Code`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L373-L392","name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","doc":"Return true if the assignment of at least one parameter has been updated.\nFurthermore if we see that `params.size != args.size` we know that this is\na partial application and set the values of the remaining parameters to\n`top` since it is impossible to track what will happen with them from here on.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L361-L365","name":"Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","doc":"Widen the value of the current function by `v`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L355-L356","name":"Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","doc":"Set the value of `var` to `bot`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L347-L350","name":"Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","doc":"Update the assignment of `var` by merging the current value with `newVal`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L339-L342","name":"Lean.Compiler.LCNF.UnreachableBranches.findArgValue","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue","doc":"Find the value of `arg` using the logic of `findVarValue`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L332-L334","name":"Lean.Compiler.LCNF.UnreachableBranches.findVarValue","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue","doc":"Obtain the `Value` associated with `var` from the context of `InterpM`.\nIf none is available return `Value.bot`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L323-L326","name":"Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","doc":"Run `f` on the variable `Assignment` of the current function.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L315-L318","name":"Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L312-L313","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunVal","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal","doc":"Get the `Value` of a certain function in the current block by index.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L306-L307","name":"Lean.Compiler.LCNF.UnreachableBranches.getAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment","doc":"Get the variable `Assignment` of the current function.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L301-L301","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpM","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM","doc":"The monad which powers the abstract interpreter.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L296-L296","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","doc":"`Value`s of functions in the `InterpContext` use during computation of\nthe fixpoint. Afterwards they are stored into the `Environment`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L291-L291","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","doc":"`Assignment`s of functions in the `InterpContext`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L287-L296","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState","kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L285-L285","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","doc":"The index of the function we are currently operating on in `decls.`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L281-L281","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","doc":"The list of `Decl`s we are operating on in `InterpM`. This can be\na single declaration or a mutual block of declarations where their\nanalysis might influence each other as we approach the fixpoint.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L275-L285","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext","kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext","doc":"The context of `InterpM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L270-L270","name":"Lean.Compiler.LCNF.UnreachableBranches.Assignment","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment","doc":"A map from variable identifiers to the `Value` produced by the abstract\ninterpreter for them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L261-L264","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","doc":"Obtain the `Value` for a function name if possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L255-L256","name":"Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","doc":"Add a `Value` for a function name.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L242-L250","name":"Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","doc":"Storing `FunctionSummaries` for all functions in a `.olean`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L234-L234","name":"Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","doc":"A map from function names to the `Value` that the abstract interpreter\nproduced for them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L223-L226","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L206-L221","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L199-L226","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","doc":"Attempt to turn a `Value` that is representing a literal into a set of\nauxiliary declarations + the final `FVarId` of the declaration that\ncontains the actual literal. If it is not a literal return none.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L186-L188","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","doc":"We say that a `Value` is a literal iff it is only a tree of `Value.ctor`\nnodes.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L177-L180","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.proj","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L172-L175","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L168-L170","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L163-L167","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L157-L170","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L147-L155","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","doc":"Obtain the arguments of a certain constructor within the `Value`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L138-L142","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","doc":"Check whether a certain constructor is part of a `Value` by name.\nNote that both `top` and `bot` will always true here. For bot this is\nbecause we have no information about the `Value` so just to be sure\nwe don't claim the absence of a certain constructor.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L129-L130","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.widening","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening","doc":"Widening operator that guarantees termination in our abstract interpreter. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L101-L126","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L98-L126","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","doc":"Make sure constructors of recursive inductive datatypes can only occur once in each path.\nValues at depth > `maxValueDepth` are also approximated at `top`.\nWe use this function to implement a simple widening operation for our abstract interpreter.\nRecall the widening functions is used to ensure termination in abstract interpreters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L76-L88","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.merge","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge","doc":"Merge two values into one. `bot` is the neutral element, `top` the annihilator.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L63-L71","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","doc":"Fuse `v` into `vs`. That is do not only append but if we see that `v`\nis a constructor that is already contained within `vs` try to detect\nthe difference between these values and merge them accordingly into a\nchoice node further down the tree.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L53-L53","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEqValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L43-L51","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.beq","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L36-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L36-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L32-L35","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.choice","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice","doc":"A set of values are possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L28-L31","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","doc":"A certian consructor with a certain sets of parameters is possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L24-L27","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.top","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top","doc":"All values are possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L20-L23","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.bot","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot","doc":"Undefined, could be anything we have no information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L19-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.Value","kind":"inductive","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value","doc":"The abstract domain of the interpreter. Representing sets of values\nof a certain type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L1-L1","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L1-L1","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","doc":""}]}