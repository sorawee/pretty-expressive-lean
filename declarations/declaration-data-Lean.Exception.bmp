{"name":"Lean.Exception","instances":[{"typeNames":["Lean.Exception"],"name":"Lean.instInhabitedException","className":"Inhabited"},{"typeNames":[],"name":"Lean.instAddErrorMessageContext","className":"Lean.AddErrorMessageContext"},{"typeNames":["ReaderT"],"name":"Lean.instMonadRecDepthReaderT","className":"Lean.MonadRecDepth"},{"typeNames":["StateRefT'"],"name":"Lean.instMonadRecDepthStateRefT'","className":"Lean.MonadRecDepth"},{"typeNames":["Lean.MonadCacheT"],"name":"Lean.instMonadRecDepthMonadCacheT","className":"Lean.MonadRecDepth"}],"imports":["Init","Lean.Message","Lean.InternalExceptionId","Lean.Data.Options","Lean.Util.MonadCache"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L155-L162","name":"Lean.termThrowErrorAt___","kind":"def","docLink":"./Lean/Exception.html#Lean.termThrowErrorAt___","doc":"Macro for throwing error exceptions. The argument can be an interpolated string.\nIt is a convenient way of building `MessageData` objects.\nThe first argument must be a `Syntax` that provides position information for\nthe error message.\n`throwErrorAt ref msg` is equivalent to `withRef ref <| throwError msg`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L148-L154","name":"Lean.termThrowError__","kind":"def","docLink":"./Lean/Exception.html#Lean.termThrowError__","doc":"Macro for throwing error exceptions. The argument can be an interpolated string.\nIt is a convenient way of building `MessageData` objects.\nThe result of `getRef` is used as position information.\nRecall that `getRef` returns the current \"reference\" syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L140-L146","name":"Lean.withIncRecDepth","kind":"def","docLink":"./Lean/Exception.html#Lean.withIncRecDepth","doc":"Increment the current recursion depth and then execute `x`.\nThrow an exception if maximum recursion depth has been reached.\nWe use this combinator to prevent stack overflows.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L130-L133","name":"Lean.Exception.isMaxRecDepth","kind":"def","docLink":"./Lean/Exception.html#Lean.Exception.isMaxRecDepth","doc":"Return true if `ex` was generated by `throwMaxRecDepthAt`.\nThis function is a bit hackish. The max rec depth exception should probably be an internal exception,\nbut it is also produced by `MacroM` which implemented in the prelude, and internal exceptions have not\nbeen defined yet.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L121-L122","name":"Lean.throwMaxRecDepthAt","kind":"def","docLink":"./Lean/Exception.html#Lean.throwMaxRecDepthAt","doc":"Throw a \"maximum recursion depth has been reached\" exception using the given reference syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L115-L116","name":"Lean.instMonadRecDepthMonadCacheT","kind":"instance","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthMonadCacheT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L112-L113","name":"Lean.instMonadRecDepthStateRefT'","kind":"instance","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthStateRefT'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L107-L110","name":"Lean.instMonadRecDepthReaderT","kind":"instance","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L105-L105","name":"Lean.MonadRecDepth.getMaxRecDepth","kind":"def","docLink":"./Lean/Exception.html#Lean.MonadRecDepth.getMaxRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L104-L104","name":"Lean.MonadRecDepth.getRecDepth","kind":"def","docLink":"./Lean/Exception.html#Lean.MonadRecDepth.getRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L103-L103","name":"Lean.MonadRecDepth.withRecDepth","kind":"def","docLink":"./Lean/Exception.html#Lean.MonadRecDepth.withRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L102-L102","name":"Lean.MonadRecDepth.mk","kind":"ctor","docLink":"./Lean/Exception.html#Lean.MonadRecDepth.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L102-L105","name":"Lean.MonadRecDepth","kind":"class","docLink":"./Lean/Exception.html#Lean.MonadRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L95-L98","name":"Lean.ofExceptKernelException","kind":"def","docLink":"./Lean/Exception.html#Lean.ofExceptKernelException","doc":"Lift from `Except KernelException` to `m` when `m` can throw kernel exceptions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L91-L92","name":"Lean.throwKernelException","kind":"def","docLink":"./Lean/Exception.html#Lean.throwKernelException","doc":"Throw an error exception for the given kernel exception.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L83-L86","name":"Lean.ofExcept","kind":"def","docLink":"./Lean/Exception.html#Lean.ofExcept","doc":"Convert an `Except` into a `m` monadic action, where `m` is any monad that\nimplements `MonadError`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L76-L77","name":"Lean.throwErrorAt","kind":"def","docLink":"./Lean/Exception.html#Lean.throwErrorAt","doc":"Throw an error exception using the given message data and reference syntax. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L72-L73","name":"Lean.throwUnknownConstant","kind":"def","docLink":"./Lean/Exception.html#Lean.throwUnknownConstant","doc":"Thrown an unknown constant error message. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L66-L69","name":"Lean.throwError","kind":"def","docLink":"./Lean/Exception.html#Lean.throwError","doc":"Throw an error exception using the given message data.\nThe result of `getRef` is used as position information.\nRecall that `getRef` returns the current \"reference\" syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L54-L57","name":"Lean.MonadError","kind":"class","docLink":"./Lean/Exception.html#Lean.MonadError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L54-L57","name":"Lean.MonadError.mk","kind":"ctor","docLink":"./Lean/Exception.html#Lean.MonadError.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L49-L52","name":"Lean.instAddErrorMessageContext","kind":"instance","docLink":"./Lean/Exception.html#Lean.instAddErrorMessageContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L47-L47","name":"Lean.AddErrorMessageContext.add","kind":"def","docLink":"./Lean/Exception.html#Lean.AddErrorMessageContext.add","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L46-L46","name":"Lean.AddErrorMessageContext.mk","kind":"ctor","docLink":"./Lean/Exception.html#Lean.AddErrorMessageContext.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L46-L47","name":"Lean.AddErrorMessageContext","kind":"class","docLink":"./Lean/Exception.html#Lean.AddErrorMessageContext","doc":"Similar to `AddMessageContext`, but for error messages.\nThe default instance just uses `AddMessageContext`.\nIn error messages, we may want to provide additional information (e.g., macro expansion stack),\nand refine the `(ref : Syntax)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L40-L40","name":"Lean.instInhabitedException","kind":"instance","docLink":"./Lean/Exception.html#Lean.instInhabitedException","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L36-L38","name":"Lean.Exception.getRef","kind":"def","docLink":"./Lean/Exception.html#Lean.Exception.getRef","doc":"Return syntax object providing position information for the exception.\nRecall that internal exceptions do not have position information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L28-L30","name":"Lean.Exception.hasSyntheticSorry","kind":"def","docLink":"./Lean/Exception.html#Lean.Exception.hasSyntheticSorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L24-L26","name":"Lean.Exception.toMessageData","kind":"def","docLink":"./Lean/Exception.html#Lean.Exception.toMessageData","doc":"Convert exception into a structured message. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L17-L21","name":"Lean.Exception.internal","kind":"ctor","docLink":"./Lean/Exception.html#Lean.Exception.internal","doc":"Internal exceptions that are not meant to be seen by users.\nExamples: \"pospone elaboration\", \"stuck at universe constraint\", etc\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L15-L16","name":"Lean.Exception.error","kind":"ctor","docLink":"./Lean/Exception.html#Lean.Exception.error","doc":"Error messages that are displayed to users. `ref` is used to provide position information. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Exception.lean#L14-L21","name":"Lean.Exception","kind":"inductive","docLink":"./Lean/Exception.html#Lean.Exception","doc":"Exception type used in most Lean monads "}]}