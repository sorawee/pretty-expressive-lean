{"name":"Lean.Compiler.LCNF.Simp.Main","instances":[],"imports":["Init","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.ElimDead","Lean.Compiler.LCNF.AlphaEqv","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.Simp.FunDeclInfo","Lean.Compiler.LCNF.Simp.InlineCandidate","Lean.Compiler.LCNF.Simp.InlineProj","Lean.Compiler.LCNF.Simp.Used","Lean.Compiler.LCNF.Simp.DefaultAlt","Lean.Compiler.LCNF.Simp.SimpValue","Lean.Compiler.LCNF.Simp.ConstantFold"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L218-L330","name":"Lean.Compiler.LCNF.Simp.simp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simp","doc":"Simplify `code`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L188-L213","name":"Lean.Compiler.LCNF.Simp.simpCasesOnCtor?","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpCasesOnCtor?","doc":"Try to simplify `cases` of `constructor`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L179-L183","name":"Lean.Compiler.LCNF.Simp.simpFunDecl","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.simpFunDecl","doc":"Simplify the given local function declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L121-L174","name":"Lean.Compiler.LCNF.Simp.inlineApp?","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineApp?","doc":"If the value of the given let-declaration is an application that can be inlined,\ninline it and simplify the result.\n\n`k` is the \"continuation\" for the let declaration, if the application is inlined,\nit will also be simplified.\n\nNote: `inlineApp?` did not use to be in this mutually recursive declaration.\nIt used to be invoked by `simp`, and would return `Option Code` that would be\nthen simplified by `simp`. However, this simpler architecture produced an\nexponential blowup in when processing functions such as `Lean.Elab.Deriving.Ord.mkMatch.mkAlts`.\nThe key problem is that when inlining a declaration we often can reduce the number\nof exit points by simplified the inlined code, and then connecting the result to the\ncontinuation `k`. However, this optimization is only possible if we simplify the\ninlined code **before** we attach it to the continuation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L100-L102","name":"Lean.Compiler.LCNF.Simp.elimVar?","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.elimVar?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L93-L98","name":"Lean.Compiler.LCNF.Simp.isReturnOf","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.isReturnOf","doc":"Similar to `Code.isReturnOf`, but taking the current substitution into account.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L75-L88","name":"Lean.Compiler.LCNF.Simp.etaPolyApp?","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.etaPolyApp?","doc":"When the configuration flag `etaPoly = true`, we eta-expand\npartial applications of functions that take local instances as arguments.\nThis kind of function is inlined or specialized, and we create new\nsimplification opportunities by eta-expanding them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L62-L67","name":"Lean.Compiler.LCNF.Simp.inlineJp?","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.inlineJp?","doc":"Try to inline a join point.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/Main.lean#L45-L57","name":"Lean.Compiler.LCNF.Simp.specializePartialApp","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/Main.html#Lean.Compiler.LCNF.Simp.specializePartialApp","doc":"Create a new local function declaration when `info.args.size < info.params.size`.\nWe use this function to inline/specialize a partial application of a local function.\n"}]}