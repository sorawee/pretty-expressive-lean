{"name":"Lean.Meta.DiscrTreeTypes","instances":[{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instInhabitedKey","className":"Inhabited"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instBEqKey","className":"BEq"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instReprKey","className":"Repr"},{"typeNames":["Lean.Meta.DiscrTree.Key"],"name":"Lean.Meta.DiscrTree.instHashableKey","className":"Hashable"}],"imports":["Init","Lean.Expr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L84-L84","name":"Lean.Meta.DiscrTree.root","kind":"def","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.root","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L83-L83","name":"Lean.Meta.DiscrTree.mk","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L83-L84","name":"Lean.Meta.DiscrTree","kind":"structure","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree","doc":"Discrimination trees. It is an index from terms to values of type `α`.\n\nIf `simpleReduce := true`, then only simple reduction are performed while\nindexing/retrieving terms. For example, `iota` reduction is not performed.\n\nWe use `simpleReduce := false` in the type class resolution module,\nand `simpleReduce := true` in `simp`.\n\nMotivations:\n- In `simp`, we want to have `simp` theorem such as\n```\n@[simp] theorem liftOn_mk (a : α) (f : α → γ) (h : ∀ a₁ a₂, r a₁ a₂ → f a₁ = f a₂) :\n    Quot.liftOn (Quot.mk r a) f h = f a := rfl\n```\nIf we enable `iota`, then the lhs is reduced to `f a`.\n\n- During type class resolution, we often want to reduce types using even `iota`.\nExample:\n```\ninductive Ty where\n  | int\n  | bool\n\n@[reducible] def Ty.interp (ty : Ty) : Type :=\n  Ty.casesOn (motive := fun _ => Type) ty Int Bool\n\ndef test {a b c : Ty} (f : a.interp → b.interp → c.interp) (x : a.interp) (y : b.interp) : c.interp :=\n  f x y\n\ndef f (a b : Ty.bool.interp) : Ty.bool.interp :=\n  -- We want to synthesize `BEq Ty.bool.interp` here, and it will fail\n  -- if we do not reduce `Ty.bool.interp` to `Bool`.\n  test (.==.) a b\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L41-L41","name":"Lean.Meta.DiscrTree.Trie.node","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie.node","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L40-L41","name":"Lean.Meta.DiscrTree.Trie","kind":"inductive","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie","doc":"Discrimination tree trie. See `DiscrTree`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L35-L35","name":"Lean.Meta.DiscrTree.instHashableKey","kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instHashableKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L26-L33","name":"Lean.Meta.DiscrTree.Key.hash","kind":"def","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instReprKey","kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instReprKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instBEqKey","kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instBEqKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L24-L24","name":"Lean.Meta.DiscrTree.instInhabitedKey","kind":"instance","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.instInhabitedKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L23-L23","name":"Lean.Meta.DiscrTree.Key.proj","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.proj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L22-L22","name":"Lean.Meta.DiscrTree.Key.arrow","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.arrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L21-L21","name":"Lean.Meta.DiscrTree.Key.other","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.other","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L20-L20","name":"Lean.Meta.DiscrTree.Key.star","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.star","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L19-L19","name":"Lean.Meta.DiscrTree.Key.lit","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.lit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L18-L18","name":"Lean.Meta.DiscrTree.Key.fvar","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.fvar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L17-L17","name":"Lean.Meta.DiscrTree.Key.const","kind":"ctor","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key.const","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/DiscrTreeTypes.lean#L16-L24","name":"Lean.Meta.DiscrTree.Key","kind":"inductive","docLink":"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key","doc":"Discrimination tree key. See `DiscrTree`\n"}]}