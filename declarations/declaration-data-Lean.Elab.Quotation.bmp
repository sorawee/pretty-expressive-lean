{"name":"Lean.Elab.Quotation","instances":[{"typeNames":["Lean.Syntax.Preresolved","Lean.Name.mkStr1"],"name":"Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1","className":"Lean.Quote"},{"typeNames":["Lean.Elab.Term.Quotation.MatchResult"],"name":"Lean.Elab.Term.Quotation.instReprMatchResult","className":"Repr"}],"imports":["Init","Lean.Syntax","Lean.ResolveName","Lean.Elab.Term","Lean.Elab.Quotation.Util","Lean.Elab.Quotation.Precheck","Lean.Elab.Syntax","Lean.Parser.Syntax"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L678-L681","name":"Lean.Elab.Term.Quotation.elabNoErrorIfUnused","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabNoErrorIfUnused","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L675-L676","name":"Lean.Elab.Term.Quotation.elabMatchSyntax","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabMatchSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L657-L673","name":"Lean.Elab.Term.Quotation.match_syntax.expand","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.match_syntax.expand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L593-L593","name":"Lean.Elab.Term.Quotation.IdxSet","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.IdxSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L325-L325","name":"Lean.Elab.Term.Quotation.HeadInfo.doMatch","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.doMatch","doc":"actually run the specified head check, with the discriminant bound to `__discr` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L323-L323","name":"Lean.Elab.Term.Quotation.HeadInfo.onMatch","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.onMatch","doc":"compute compatibility of pattern with given head check "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L321-L321","name":"Lean.Elab.Term.Quotation.HeadInfo.check","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.check","doc":"check induced by the pattern "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L319-L325","name":"Lean.Elab.Term.Quotation.HeadInfo","kind":"structure","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo","doc":"All necessary information on a pattern head. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L310-L314","name":"Lean.Elab.Term.Quotation.instReprMatchResult","kind":"instance","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instReprMatchResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L307-L308","name":"Lean.Elab.Term.Quotation.MatchResult.undecided","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.undecided","doc":"Pattern is not quite sure yet; include unchanged in both branches "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L305-L306","name":"Lean.Elab.Term.Quotation.MatchResult.uncovered","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.uncovered","doc":"Pattern disagrees with head check, include in \"no\" branch only "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L302-L304","name":"Lean.Elab.Term.Quotation.MatchResult.covered","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.covered","doc":"Pattern agrees with head check, remove and transform remaining alternative.\nIf `exhaustive` is `false`, *also* include unchanged alternative in the \"no\" branch. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L301-L308","name":"Lean.Elab.Term.Quotation.MatchResult","kind":"inductive","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult","doc":"Describe whether a pattern is covered by a head check (induced by the pattern itself or a different pattern). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L294-L296","name":"Lean.Elab.Term.Quotation.HeadCheck.other","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.other","doc":"other, complicated match step that will probably only cover identical patterns\nexample: antiquotation splices `($[...]*) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L290-L293","name":"Lean.Elab.Term.Quotation.HeadCheck.slice","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.slice","doc":"Match step that succeeds on `null` nodes of arity at least `numPrefix + numSuffix`, introducing discriminants\nfor the first `numPrefix` children, one `null` node for those in between, and for the `numSuffix` last children.\nexample: `([$x, $xs,*, $y]) is `slice 2 2` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L282-L289","name":"Lean.Elab.Term.Quotation.HeadCheck.shape","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.shape","doc":"match step based on kind and, optionally, arity of discriminant\nIf `arity` is given, that number of new discriminants is introduced. `covered` patterns should then introduce the\nsame number of new patterns.\nWe actually check the arity at run time only in the case of `null` nodes since it should otherwise by implied by\nthe node kind.\nwithout arity: `($x:k)\nwith arity: any quotation without an antiquotation head pattern "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L280-L281","name":"Lean.Elab.Term.Quotation.HeadCheck.unconditional","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.unconditional","doc":"match step that always succeeds: _, x, `($x), ... "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L279-L296","name":"Lean.Elab.Term.Quotation.HeadCheck","kind":"inductive","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck","doc":"In a single match step, we match the first discriminant against the \"head\" of the first pattern of the first\nalternative. This datatype describes what kind of check this involves, which helps other patterns decide if\nthey are covered by the same check and don't have to be checked again (see also `MatchResult`). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L261-L262","name":"Lean.Elab.Term.Quotation.commandElab_stx_quot_","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.commandElab_stx_quot_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L255-L259","name":"Lean.Elab.Term.Quotation.stxQuot.expand","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.stxQuot.expand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L230-L238","name":"Lean.Elab.Term.Quotation.mkSyntaxQuotation","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkSyntaxQuotation","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L218-L228","name":"Lean.Elab.Term.Quotation.getQuotKind","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.getQuotKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L208-L216","name":"Lean.Elab.Term.Quotation.addNamedQuotInfo","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.addNamedQuotInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L119-L122","name":"Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1","kind":"instance","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L110-L117","name":"Lean.Elab.Term.Quotation.tryAddSyntaxNodeKindInfo","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.tryAddSyntaxNodeKindInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L95-L106","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L92-L93","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.append","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L87-L90","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.push","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.push","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L83-L85","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.build","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.build","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L81-L81","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.empty","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L77-L77","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder","doc":"Transform sequence of pushes and appends into acceptable code "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L66-L73","name":"Lean.Elab.Term.Quotation.resolveSectionVariable.loop","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L63-L74","name":"Lean.Elab.Term.Quotation.resolveSectionVariable","kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L56-L61","name":"Lean.Elab.Term.Quotation.mkTuple","kind":"opaque","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkTuple","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Quotation.lean#L1-L1","name":"Lean.Elab.Term.Quotation.HeadInfo.mk","kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.mk","doc":""}]}