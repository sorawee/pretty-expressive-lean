{"name":"Lean.Meta.Tactic.Congr","instances":[],"imports":["Init","Lean.Meta.CongrTheorems","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Clear","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.Assumption"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L110-L117","name":"Lean.MVarId.congrN.go","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrN.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L103-L108","name":"Lean.MVarId.congrN.post","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrN.post","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L99-L117","name":"Lean.MVarId.congrN","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrN","doc":"Given a goal of the form `⊢ f as = f bs`, `⊢ (p → q) = (p' → q')`, or `⊢ HEq (f as) (f bs)`, try to apply congruence.\nIt takes proof irrelevance into account, and the fact that `Decidable p` is a subsingleton.\n\n* Applies `congr` recursively up to depth `depth`.\n* If `closePre := true`, it will attempt to close new goals\n  using `Eq.refl`, `HEq.refl`, and `assumption` with reducible transparency.\n* If `closePost := true`, it will try again on goals on which `congr` failed to make progress\n  with default transparency.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L79-L87","name":"Lean.MVarId.congrCore","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrCore","doc":"Given a goal of the form `⊢ f as = f bs`, `⊢ (p → q) = (p' → q')`, or `⊢ HEq (f as) (f bs)`, try to apply congruence.\nIt takes proof irrelevance into account, and the fact that `Decidable p` is a subsingleton.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L70-L73","name":"Lean.MVarId.congrImplies?","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrImplies?","doc":"Try to apply `implies_congr`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L55-L65","name":"Lean.MVarId.hcongr?","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.hcongr?","doc":"Try to apply a `hcongr` congruence theorem, and then tries to close resulting goals\nusing `Eq.refl`, `HEq.refl`, and assumption.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L41-L49","name":"Lean.MVarId.congr?","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congr?","doc":"Try to apply a `simp` congruence theorem.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Congr.lean#L21-L26","name":"Lean.MVarId.congrPre","kind":"def","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrPre","doc":"Preprocessor before applying congruence theorem.\nTries to close new goals using `Eq.refl`, `HEq.refl`, and `assumption`.\nIt also tries to apply `heq_of_eq`.\n"}]}