{"name":"Lean.Compiler.LCNF.Closure","instances":[],"imports":["Init","Lean.Util.ForEachExprWhere","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L148-L150","name":"Lean.Compiler.LCNF.Closure.run","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L143-L144","name":"Lean.Compiler.LCNF.Closure.collectType","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectType","doc":"Collect dependencies of the given expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L118-L140","name":"Lean.Compiler.LCNF.Closure.collectFVar","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFVar","doc":"Process the given free variable.\nIf it has not already been visited and is in scope, we collect its dependencies.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L109-L112","name":"Lean.Compiler.LCNF.Closure.collectFunDecl","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFunDecl","doc":"Collect dependencies of a local function declaration. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L93-L106","name":"Lean.Compiler.LCNF.Closure.collectCode","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectCode","doc":"Collect dependencies in the given code. We need this function to be able\nto collect dependencies in a local function declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L82-L87","name":"Lean.Compiler.LCNF.Closure.collectLetValue","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectLetValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L76-L80","name":"Lean.Compiler.LCNF.Closure.collectArg","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L73-L74","name":"Lean.Compiler.LCNF.Closure.collectParams","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectParams","doc":"Collect dependencies in parameters. We need this because parameters may\ncontain other type parameters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L65-L66","name":"Lean.Compiler.LCNF.Closure.markVisited","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.markVisited","doc":"Mark a free variable as already visited.\nWe perform a topological sort over the dependencies.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L59-L59","name":"Lean.Compiler.LCNF.Closure.ClosureM","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM","doc":"Monad for implementing the dependency collector.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L54-L54","name":"Lean.Compiler.LCNF.Closure.State.decls","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.decls","doc":"Let-declarations and local function declarations that are going to be \"copied\" to the code\nbeing processed. For example, when this module is used in the code specializer, the let-declarations\noften contain the instance values. In the current specialization heuristic all let-declarations are ground values\n(i.e., they do not contain free-variables).\nHowever, local function declarations may contain free variables.\n\nAll customers of this module try to avoid work duplication. If a let-declaration is a ground value,\nit most likely will be computed during compilation time, and work duplication is not an issue.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L43-L43","name":"Lean.Compiler.LCNF.Closure.State.params","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.params","doc":"Free variables that must become new parameters of the code being specialized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L39-L39","name":"Lean.Compiler.LCNF.Closure.State.visited","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.visited","doc":"Set of already visited free variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L35-L54","name":"Lean.Compiler.LCNF.Closure.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State","doc":"State for the `ClosureM` monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L30-L30","name":"Lean.Compiler.LCNF.Closure.Context.abstract","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.abstract","doc":"If `abstract x` returns `true`, we convert `x` into a closure parameter. Otherwise,\nwe collect the dependecies in the `let`/`fun`-declaration too, and include the declaration in the closure.\nRemark: the lambda lifting pass abstracts all `let`/`fun`-declarations.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L24-L24","name":"Lean.Compiler.LCNF.Closure.Context.inScope","kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.inScope","doc":"`inScope x` returns `true` if `x` is a variable that is not in `C`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L20-L30","name":"Lean.Compiler.LCNF.Closure.Context","kind":"structure","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L1-L1","name":"Lean.Compiler.LCNF.Closure.Context.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Closure.lean#L1-L1","name":"Lean.Compiler.LCNF.Closure.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.mk","doc":""}]}