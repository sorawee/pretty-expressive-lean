{"name":"Lean.Elab.PreDefinition.Structural.SmartUnfolding","instances":[],"imports":["Init","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L64-L70","name":"Lean.Elab.Structural.addSmartUnfoldingDef","kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L29-L62","name":"Lean.Elab.Structural.addSmartUnfoldingDefAux.visit","kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDefAux.visit","doc":"Auxiliary method for annotating `match`-alternatives with `markSmartUnfoldingMatch` and `markSmartUnfoldingMatchAlt`.\n\nIt uses the following approach:\n- Whenever it finds a `match` application `e` s.t. `recArgHasLooseBVarsAt preDef.declName recArgPos e`,\n  it marks the `match` with `markSmartUnfoldingMatch`, and each alternative that does not contain a nested marked `match`\n  is marked with `markSmartUnfoldingMatchAlt`.\n\nRecall that the condition `recArgHasLooseBVarsAt preDef.declName recArgPos e` is the one used at `mkBRecOn`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L12-L62","name":"Lean.Elab.Structural.addSmartUnfoldingDefAux","kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDefAux","doc":""}]}