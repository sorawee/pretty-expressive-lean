{"name":"Lean.Meta.Match.Basic","instances":[{"typeNames":["Lean.Meta.Match.Pattern"],"name":"Lean.Meta.Match.instInhabitedPattern","className":"Inhabited"},{"typeNames":["Lean.Meta.Match.Alt"],"name":"Lean.Meta.Match.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.Meta.Match.Problem"],"name":"Lean.Meta.Match.instInhabitedProblem","className":"Inhabited"}],"imports":["Init","Lean.Meta.Check","Lean.Meta.CollectFVars","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.CaseArraySizes"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L332-L360","name":"Lean.Meta.Match.toPattern","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.toPattern","doc":"Convert a expression occurring as the argument of a `match` motive application back into a `Pattern`\nFor example, we can use this method to convert `x::y::xs` at\n```\n...\n(motive : List Nat → Sort u_1) (xs : List Nat) (h_1 : (x y : Nat) → (xs : List Nat) → motive (x :: y :: xs))\n...\n```\ninto a pattern object\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L320-L320","name":"Lean.Meta.Match.MatcherResult.addMatcher","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.addMatcher","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L319-L319","name":"Lean.Meta.Match.MatcherResult.unusedAltIdxs","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.unusedAltIdxs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L318-L318","name":"Lean.Meta.Match.MatcherResult.counterExamples","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.counterExamples","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L317-L317","name":"Lean.Meta.Match.MatcherResult.matcher","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.matcher","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L316-L320","name":"Lean.Meta.Match.MatcherResult","kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L313-L314","name":"Lean.Meta.Match.counterExamplesToMessageData","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExamplesToMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L310-L311","name":"Lean.Meta.Match.counterExampleToMessageData","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.counterExampleToMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L308-L308","name":"Lean.Meta.Match.CounterExample","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.CounterExample","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L302-L306","name":"Lean.Meta.Match.Problem.toMessageData","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.toMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L299-L300","name":"Lean.Meta.Match.withGoalOf","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.withGoalOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L297-L297","name":"Lean.Meta.Match.instInhabitedProblem","kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedProblem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L296-L296","name":"Lean.Meta.Match.Problem.examples","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.examples","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L295-L295","name":"Lean.Meta.Match.Problem.alts","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.alts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L294-L294","name":"Lean.Meta.Match.Problem.vars","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.vars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L293-L293","name":"Lean.Meta.Match.Problem.mvarId","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L292-L297","name":"Lean.Meta.Match.Problem","kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L289-L290","name":"Lean.Meta.Match.examplesToMessageData","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.examplesToMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L279-L285","name":"Lean.Meta.Match.Example.toMessageData","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.toMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L273-L277","name":"Lean.Meta.Match.Example.varsToUnderscore","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.varsToUnderscore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L264-L271","name":"Lean.Meta.Match.Example.applyFVarSubst","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.applyFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L258-L262","name":"Lean.Meta.Match.Example.replaceFVarId","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L254-L254","name":"Lean.Meta.Match.Example.arrayLit","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.arrayLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L253-L253","name":"Lean.Meta.Match.Example.val","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.val","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L252-L252","name":"Lean.Meta.Match.Example.ctor","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.ctor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L251-L251","name":"Lean.Meta.Match.Example.underscore","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.underscore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L250-L250","name":"Lean.Meta.Match.Example.var","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example.var","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L249-L254","name":"Lean.Meta.Match.Example","kind":"inductive","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L236-L245","name":"Lean.Meta.Match.Alt.checkAndReplaceFVarId","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.checkAndReplaceFVarId","doc":"Similar to `checkAndReplaceFVarId`, but ensures type of `v` is definitionally equal to type of `fvarId`.\n  This extra check is necessary when performing dependent elimination and inaccessible terms have been used.\n  For example, consider the following code fragment:\n\n```\ninductive Vec (α : Type u) : Nat → Type u where\n  | nil : Vec α 0\n  | cons {n} (head : α) (tail : Vec α n) : Vec α (n+1)\n\ninductive VecPred {α : Type u} (P : α → Prop) : {n : Nat} → Vec α n → Prop where\n  | nil   : VecPred P Vec.nil\n  | cons  {n : Nat} {head : α} {tail : Vec α n} : P head → VecPred P tail → VecPred P (Vec.cons head tail)\n\ntheorem ex {α : Type u} (P : α → Prop) : {n : Nat} → (v : Vec α (n+1)) → VecPred P v → Exists P\n  | _, Vec.cons head _, VecPred.cons h (w : VecPred P Vec.nil) => ⟨head, h⟩\n```\nRecall that `_` in a pattern can be elaborated into pattern variable or an inaccessible term.\nThe elaborator uses an inaccessible term when typing constraints restrict its value.\nThus, in the example above, the `_` at `Vec.cons head _` becomes the inaccessible pattern `.(Vec.nil)`\nbecause the type ascription `(w : VecPred P Vec.nil)` propagates typing constraints that restrict its value to be `Vec.nil`.\nAfter elaboration the alternative becomes:\n```\n  | .(0), @Vec.cons .(α) .(0) head .(Vec.nil), @VecPred.cons .(α) .(P) .(0) .(head) .(Vec.nil) h w => ⟨head, h⟩\n```\nwhere\n```\n(head : α), (h: P head), (w : VecPred P Vec.nil)\n```\nThen, when we process this alternative in this module, the following check will detect that\n`w` has type `VecPred P Vec.nil`, when it is supposed to have type `VecPred P tail`.\nNote that if we had written\n```\ntheorem ex {α : Type u} (P : α → Prop) : {n : Nat} → (v : Vec α (n+1)) → VecPred P v → Exists P\n  | _, Vec.cons head Vec.nil, VecPred.cons h (w : VecPred P Vec.nil) => ⟨head, h⟩\n```\nwe would get the easier to digest error message\n```\nmissing cases:\n_, (Vec.cons _ _ (Vec.cons _ _ _)), _\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L191-L192","name":"Lean.Meta.Match.Alt.isLocalDecl","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.isLocalDecl","doc":"Return `true` if `fvarId` is one of the alternative pattern variables "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L181-L188","name":"Lean.Meta.Match.Alt.replaceFVarId","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L174-L179","name":"Lean.Meta.Match.Alt.applyFVarSubst","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.applyFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L166-L172","name":"Lean.Meta.Match.Alt.toMessageData","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.toMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L162-L162","name":"Lean.Meta.Match.instInhabitedAlt","kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedAlt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L161-L161","name":"Lean.Meta.Match.Alt.cnstrs","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.cnstrs","doc":"Pending constraints `lhs ≋ rhs` that need to be solved before the alternative\nis considered acceptable. We generate them when processing inaccessible patterns.\nNote that `lhs` and `rhs` often have different types.\nAfter we perform additional case analysis, their types become definitionally equal.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L154-L154","name":"Lean.Meta.Match.Alt.patterns","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.patterns","doc":"Alternative patterns.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L150-L150","name":"Lean.Meta.Match.Alt.fvarDecls","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.fvarDecls","doc":"Alternative pattern variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L146-L146","name":"Lean.Meta.Match.Alt.rhs","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.rhs","doc":"Right-hand-side of the alternative.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L142-L142","name":"Lean.Meta.Match.Alt.idx","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.idx","doc":"Orginal alternative index. Alternatives can be split, this index is the original\nposition of the alternative that generated this one.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L137-L137","name":"Lean.Meta.Match.Alt.ref","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.ref","doc":"`Syntax` object for providing position information "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L135-L162","name":"Lean.Meta.Match.Alt","kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt","doc":"`Match` alternative "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L128-L132","name":"Lean.Meta.Match.instantiateAltLHSMVars","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiateAltLHSMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L124-L126","name":"Lean.Meta.Match.AltLHS.collectFVars","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.collectFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L122-L122","name":"Lean.Meta.Match.AltLHS.patterns","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.patterns","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L121-L121","name":"Lean.Meta.Match.AltLHS.fvarDecls","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.fvarDecls","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L120-L120","name":"Lean.Meta.Match.AltLHS.ref","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.ref","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L119-L122","name":"Lean.Meta.Match.AltLHS","kind":"structure","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L111-L117","name":"Lean.Meta.Match.instantiatePatternMVars","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instantiatePatternMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L98-L107","name":"Lean.Meta.Match.Pattern.collectFVars","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.collectFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L89-L95","name":"Lean.Meta.Match.Pattern.hasExprMVar","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.hasExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L85-L87","name":"Lean.Meta.Match.Pattern.replaceFVarId","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L73-L83","name":"Lean.Meta.Match.Pattern.applyFVarSubst","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.applyFVarSubst","doc":"Apply the free variable substitution `s` to the given pattern "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L50-L70","name":"Lean.Meta.Match.Pattern.toExpr.visit","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L47-L70","name":"Lean.Meta.Match.Pattern.toExpr","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L38-L45","name":"Lean.Meta.Match.Pattern.toMessageData","kind":"opaque","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.toMessageData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L34-L34","name":"Lean.Meta.Match.instInhabitedPattern","kind":"instance","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.instInhabitedPattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L33-L33","name":"Lean.Meta.Match.Pattern.as","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.as","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L32-L32","name":"Lean.Meta.Match.Pattern.arrayLit","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.arrayLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L31-L31","name":"Lean.Meta.Match.Pattern.val","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.val","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L30-L30","name":"Lean.Meta.Match.Pattern.ctor","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.ctor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L29-L29","name":"Lean.Meta.Match.Pattern.var","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.var","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L28-L28","name":"Lean.Meta.Match.Pattern.inaccessible","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern.inaccessible","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L27-L34","name":"Lean.Meta.Match.Pattern","kind":"inductive","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L20-L25","name":"Lean.Meta.Match.isNamedPattern?","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L16-L18","name":"Lean.Meta.Match.isNamedPattern","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.isNamedPattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L13-L14","name":"Lean.Meta.Match.mkNamedPattern","kind":"def","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.mkNamedPattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.MatcherResult.mk","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.Alt.mk","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.Problem.mk","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Match/Basic.lean#L1-L1","name":"Lean.Meta.Match.AltLHS.mk","kind":"ctor","docLink":"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS.mk","doc":""}]}