{"name":"Init.Data.Channel","instances":[{"typeNames":["IO.Channel.State"],"name":"IO.Channel.instInhabitedState","className":"Inhabited"},{"typeNames":["IO.Channel"],"name":"IO.instNonemptyChannel","className":"Nonempty"},{"typeNames":["IO.Channel.Sync"],"name":"IO.instForInSync","className":"ForIn"}],"imports":["Init.Data.Queue","Init.System.Promise","Init.System.Mutex"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L134-L135","name":"IO.instForInSync","kind":"instance","docLink":"./Init/Data/Channel.html#IO.instForInSync","doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L121-L122","name":"IO.Channel.Sync.recv?","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.Sync.recv?","doc":"Synchronously receives a message from the channel.\n\nEvery message is only received once.\nReturns `none` if the channel is closed and the queue is empty.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L113-L113","name":"IO.Channel.sync","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.sync","doc":"Accesses synchronous (blocking) version of channel operations.\n\nFor example, `ch.sync.recv?` blocks until the next message,\nand `for msg in ch.sync do ...` iterates synchronously over the channel.\nThese functions should only be used in dedicated threads.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L104-L104","name":"IO.Channel.Sync","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.Sync","doc":"Type tag for synchronous (blocking) operations on a `Channel`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L99-L101","name":"IO.Channel.recvAllCurrent","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.recvAllCurrent","doc":"Receives all currently queued messages from the channel.\n\nThose messages are dequeued and will not be returned by `recv?`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L88-L92","name":"IO.Channel.forAsync","kind":"opaque","docLink":"./Init/Data/Channel.html#IO.Channel.forAsync","doc":"`ch.forAsync f` calls `f` for every messages received on `ch`.\n\nNote that if this function is called twice, each `forAsync` only gets half the messages.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L70-L81","name":"IO.Channel.recv?","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.recv?","doc":"Receives a message, without blocking.\nThe returned task waits for the message.\nEvery message is only received once.\n\nReturns `none` if the channel is closed and the queue is empty.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L57-L61","name":"IO.Channel.close","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.close","doc":"Closes an `Channel`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L44-L52","name":"IO.Channel.send","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.send","doc":"Sends a message on an `Channel`.\n\nThis function does not block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L36-L37","name":"IO.Channel.new","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.new","doc":"Creates a new `Channel`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L32-L33","name":"IO.instNonemptyChannel","kind":"instance","docLink":"./Init/Data/Channel.html#IO.instNonemptyChannel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L30-L30","name":"IO.Channel","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel","doc":"FIFO channel with unbounded buffer, where `recv?` returns a `Task`.\n\nA channel can be closed.  Once it is closed, all `send`s are ignored, and\n`recv?` returns `none` once the queue is empty.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L22-L22","name":"IO.Channel.instInhabitedState","kind":"instance","docLink":"./Init/Data/Channel.html#IO.Channel.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L21-L21","name":"IO.Channel.State.closed","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.closed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L20-L20","name":"IO.Channel.State.consumers","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.consumers","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L19-L19","name":"IO.Channel.State.values","kind":"def","docLink":"./Init/Data/Channel.html#IO.Channel.State.values","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L18-L18","name":"IO.Channel.State.mk","kind":"ctor","docLink":"./Init/Data/Channel.html#IO.Channel.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Channel.lean#L18-L22","name":"IO.Channel.State","kind":"structure","docLink":"./Init/Data/Channel.html#IO.Channel.State","doc":"Internal state of an `Channel`.\n\nWe maintain the invariant that at all times either `consumers` or `values` is empty.\n"}]}