{"name":"Lean.Class","instances":[{"typeNames":["Lean.ClassState"],"name":"Lean.instInhabitedClassState","className":"Inhabited"}],"imports":["Init","Lean.Attributes"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L151-L159","name":"Lean.addClass","kind":"def","docLink":"./Lean/Class.html#Lean.addClass","doc":"Add a new type class with the given name to the environment.\n`declName` must not be the name of an existing type class,\nand it must be the name of constant in `env`.\n`declName` must be a inductive datatype or axiom.\nRecall that all structures are inductive datatypes.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L121-L142","name":"Lean.mkOutParamArgsImplicit.go","kind":"opaque","docLink":"./Lean/Class.html#Lean.mkOutParamArgsImplicit.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L118-L142","name":"Lean.mkOutParamArgsImplicit","kind":"def","docLink":"./Lean/Class.html#Lean.mkOutParamArgsImplicit","doc":"Mark `outParam`s in `type` as implicit. Note that it also marks instance implicit arguments that depend on `outParam`s as implicit.\n\nRemark: this function consumes the `outParam` annotations.\n\nThis function uses the same logic used as `checkOutParam`.\nSee issue #1901\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L72-L75","name":"Lean.hasOutParams","kind":"def","docLink":"./Lean/Class.html#Lean.hasOutParams","doc":"Return `true` if the given `declName` is a type class with output parameters. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L67-L68","name":"Lean.getOutParamPositions?","kind":"def","docLink":"./Lean/Class.html#Lean.getOutParamPositions?","doc":"If `declName` is a class, return the position of its `outParams`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L63-L64","name":"Lean.isClass","kind":"def","docLink":"./Lean/Class.html#Lean.isClass","doc":"Return `true` if `n` is the name of type class in the given environment. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L51-L59","name":"Lean.classExtension","kind":"opaque","docLink":"./Lean/Class.html#Lean.classExtension","doc":"Type class environment extension\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L46-L47","name":"Lean.ClassState.switch","kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.switch","doc":"Switch the state into persistent mode. We switch to this mode after\nwe read all imported .olean files.\nRecall that we use a `SMap` for implementing the state of the type class environment extension.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L38-L39","name":"Lean.ClassState.addEntry","kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.addEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L34-L34","name":"Lean.instInhabitedClassState","kind":"instance","docLink":"./Lean/Class.html#Lean.instInhabitedClassState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L33-L33","name":"Lean.ClassState.outParamMap","kind":"def","docLink":"./Lean/Class.html#Lean.ClassState.outParamMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L32-L34","name":"Lean.ClassState","kind":"structure","docLink":"./Lean/Class.html#Lean.ClassState","doc":"State of the type class environment extension. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L26-L27","name":"Lean.ClassEntry.lt","kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L22-L22","name":"Lean.ClassEntry.outParams","kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.outParams","doc":"Position of the class `outParams`.\nFor example, for class\n```\nclass GetElem (cont : Type u) (idx : Type v) (elem : outParam (Type w)) (dom : outParam (cont → idx → Prop)) where\n```\n`outParams := #[2, 3]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L13-L13","name":"Lean.ClassEntry.name","kind":"def","docLink":"./Lean/Class.html#Lean.ClassEntry.name","doc":"Class name. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L11-L22","name":"Lean.ClassEntry","kind":"structure","docLink":"./Lean/Class.html#Lean.ClassEntry","doc":"An entry for the persistent environment extension for declared type classes "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L1-L1","name":"Lean.ClassEntry.mk","kind":"ctor","docLink":"./Lean/Class.html#Lean.ClassEntry.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Class.lean#L1-L1","name":"Lean.ClassState.mk","kind":"ctor","docLink":"./Lean/Class.html#Lean.ClassState.mk","doc":""}]}