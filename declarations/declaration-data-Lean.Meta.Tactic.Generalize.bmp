{"name":"Lean.Meta.Tactic.Generalize","instances":[{"typeNames":["Lean.Meta.GeneralizeArg"],"name":"Lean.Meta.instInhabitedGeneralizeArg","className":"Inhabited"}],"imports":["Init","Lean.Meta.KAbstract","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.FVarSubst","Lean.Meta.Tactic.Revert"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L86-L103","name":"Lean.MVarId.generalizeHyp","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalizeHyp","doc":"Extension of `generalize` to support generalizing within specified hypotheses.\nThe `hyps` array contains the list of hypotheses within which to look for occurrences\nof the generalizing expressions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L78-L79","name":"Lean.Meta.generalize","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.generalize","doc":"Telescopic `generalize` tactic. It can simultaneously generalize many terms.\nIt uses `kabstract` to occurrences of the terms that need to be generalized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L74-L75","name":"Lean.MVarId.generalize","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.MVarId.generalize","doc":"Telescopic `generalize` tactic. It can simultaneously generalize many terms.\nIt uses `kabstract` to occurrences of the terms that need to be generalized.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L19-L19","name":"Lean.Meta.instInhabitedGeneralizeArg","kind":"instance","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.instInhabitedGeneralizeArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L18-L18","name":"Lean.Meta.GeneralizeArg.hName?","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.hName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L17-L17","name":"Lean.Meta.GeneralizeArg.xName?","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.xName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L16-L16","name":"Lean.Meta.GeneralizeArg.expr","kind":"def","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.expr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L15-L19","name":"Lean.Meta.GeneralizeArg","kind":"structure","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg","doc":"The `generalize` tactic takes arguments of the form `h : e = x` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Generalize.lean#L1-L1","name":"Lean.Meta.GeneralizeArg.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg.mk","doc":""}]}