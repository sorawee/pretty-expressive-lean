{"name":"Lean.Elab.Match","instances":[{"typeNames":["Lean.Elab.Term.Discr"],"name":"Lean.Elab.Term.instInhabitedDiscr","className":"Inhabited"}],"imports":["Init","Lean.Util.ForEachExprWhere","Lean.Meta.Match.Match","Lean.Meta.GeneralizeVars","Lean.Meta.ForEachExpr","Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Precheck","Lean.Elab.SyntheticMVars"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1240-L1250","name":"Lean.Elab.Term.elabNoMatch","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabNoMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1223-L1234","name":"Lean.Elab.Term.elabMatch.elabMatchDefault","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabMatch.elabMatchDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1217-L1234","name":"Lean.Elab.Term.elabMatch","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L989-L999","name":"Lean.Elab.Term.reportMatcherResultErrors","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.reportMatcherResultErrors","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L984-L987","name":"Lean.Elab.Term.match.ignoreUnusedAlts","kind":"opaque","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.match.ignoreUnusedAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L981-L982","name":"Lean.Elab.Term.mkMatcher","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.mkMatcher","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L823-L823","name":"Lean.Elab.Term.GeneralizeResult.refined","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.refined","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L822-L822","name":"Lean.Elab.Term.GeneralizeResult.altViews","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.altViews","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L821-L821","name":"Lean.Elab.Term.GeneralizeResult.matchType","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.matchType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L820-L820","name":"Lean.Elab.Term.GeneralizeResult.toClear","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.toClear","doc":"`FVarId`s of the variables that have been generalized. We store them to clear after in each branch. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L818-L818","name":"Lean.Elab.Term.GeneralizeResult.discrs","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.discrs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L817-L823","name":"Lean.Elab.Term.GeneralizeResult","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L720-L721","name":"Lean.Elab.Term.withDepElimPatterns","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.withDepElimPatterns","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L706-L715","name":"Lean.Elab.Term.ToDepElimPattern.main.unpack.go","kind":"opaque","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main.unpack.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L705-L716","name":"Lean.Elab.Term.ToDepElimPattern.main.unpack","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main.unpack","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L681-L703","name":"Lean.Elab.Term.ToDepElimPattern.main.pack","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main.pack","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L662-L716","name":"Lean.Elab.Term.ToDepElimPattern.main","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main","doc":"Main method for `withDepElimPatterns`.\n- `PatternVarDecls`: are the explicit pattern variables provided by the user.\n- `ps`: are the patterns provided by the user.\n- `matchType`: the expected typ for this branch. It depends on the explicit pattern variables and the implicit ones that are still represented as metavariables,\n   and are found by this function.\n- `k` is the continuation that is executed in an updated local context with the all pattern variables (explicit and implicit). Note that, `patternVarDecls` are all\n   replaced since they may depend on implicit pattern variables (i.e., metavariables) that are converted into new free variables by this method.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L635-L651","name":"Lean.Elab.Term.ToDepElimPattern.savePatternInfo.go","kind":"opaque","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.savePatternInfo.go","doc":"The `Bool` context is true iff we are inside of an \"inaccessible\" pattern. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L631-L651","name":"Lean.Elab.Term.ToDepElimPattern.savePatternInfo","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.savePatternInfo","doc":"Save pattern information in the info tree, and remove `patternWithRef?` annotations.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L591-L591","name":"Lean.Elab.Term.ToDepElimPattern.TopSortM","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSortM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L589-L589","name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.result","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.result","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L588-L588","name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedMVars","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L587-L587","name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedFVars","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L586-L589","name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L522-L540","name":"Lean.Elab.Term.ToDepElimPattern.normalize.processInaccessible","kind":"opaque","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize.processInaccessible","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L512-L520","name":"Lean.Elab.Term.ToDepElimPattern.normalize.processVar","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize.processVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L507-L510","name":"Lean.Elab.Term.ToDepElimPattern.normalize.addVar","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize.addVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L455-L540","name":"Lean.Elab.Term.ToDepElimPattern.normalize","kind":"opaque","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize","doc":"Normalize the pattern and collect all patterns variables (explicit and implicit).\nThis method is the one that decides where the inaccessible annotations must be inserted.\nThe pattern variables are both free variables (for explicit pattern variables) and metavariables (for implicit ones).\nRecall that `mkLambdaFVars` now allows us to abstract both free variables and metavariables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L381-L385","name":"Lean.Elab.Term.ToDepElimPattern.isExplicitPatternVar","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.isExplicitPatternVar","doc":"Return true iff `e` is an explicit pattern variable provided by the user. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L378-L378","name":"Lean.Elab.Term.ToDepElimPattern.M","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L376-L376","name":"Lean.Elab.Term.ToDepElimPattern.Context.explicitPatternVars","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.explicitPatternVars","doc":"Pattern variables that were explicitly provided by the user.\nRecall that implicit parameters and `_` are elaborated as metavariables, and then converted into pattern variables\nby the `normalize` procedure.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L370-L370","name":"Lean.Elab.Term.ToDepElimPattern.Context.userName","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.userName","doc":"When visiting an assigned metavariable, if it has an user-name. We save it here.\nWe want to preserve these user-names when generating new pattern variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L366-L376","name":"Lean.Elab.Term.ToDepElimPattern.Context","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L364-L364","name":"Lean.Elab.Term.ToDepElimPattern.State.patternVars","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.patternVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L363-L364","name":"Lean.Elab.Term.ToDepElimPattern.State","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L212-L212","name":"Lean.Elab.Term.PatternElabException.pathToIndex","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.pathToIndex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L211-L211","name":"Lean.Elab.Term.PatternElabException.patternIdx","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.patternIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L210-L210","name":"Lean.Elab.Term.PatternElabException.ex","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.ex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L209-L212","name":"Lean.Elab.Term.PatternElabException","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException","doc":"Auxiliary structure for storing an type mismatch exception when processing the\npattern #`idx` of some alternative. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L172-L172","name":"Lean.Elab.Term.PatternVarDecl.fvarId","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L171-L172","name":"Lean.Elab.Term.PatternVarDecl","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl","doc":"We convert the collected `PatternVar`s intro `PatternVarDecl` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L160-L168","name":"Lean.Elab.Term.precheckMatch","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.precheckMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L155-L157","name":"Lean.Elab.Term.elabInaccessible","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabInaccessible","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L133-L136","name":"Lean.Elab.Term.expandMacrosInPatterns","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.expandMacrosInPatterns","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L69-L69","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.alts","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.alts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L68-L68","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.isDep","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.isDep","doc":"`true` when performing dependent elimination. We use this to decide whether we optimize the \"match unit\" case.\nSee `isMatchUnit?`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L65-L65","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.matchType","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.matchType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L64-L64","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.discrs","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.discrs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L63-L69","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L61-L61","name":"Lean.Elab.Term.instInhabitedDiscr","kind":"instance","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.instInhabitedDiscr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L60-L60","name":"Lean.Elab.Term.Discr.h?","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.h?","doc":"`some h` if discriminant is annotated with the `h : ` notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L58-L58","name":"Lean.Elab.Term.Discr.expr","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.expr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L57-L61","name":"Lean.Elab.Term.Discr","kind":"structure","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L45-L50","name":"Lean.Elab.Term.isAtomicDiscr","kind":"def","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.isAtomicDiscr","doc":"Remark: if the discriminat is `Systax.missing`, we abort the elaboration of the `match`-expression.\nThis can happen due to error recovery. Example\n```\nexample : (p ∨ p) → p := fun h => match\n```\nIf we don't abort, the elaborator loops because we will keep trying to expand\n```\nmatch\n```\ninto\n```\nlet d := <Syntax.missing>; match\n```\nRecall that `Syntax.setArg stx i arg` is a no-op when `i` is out-of-bounds. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.ToDepElimPattern.Context.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.ToDepElimPattern.State.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.PatternVarDecl.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.PatternElabException.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.GeneralizeResult.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Elab/Match.lean#L1-L1","name":"Lean.Elab.Term.Discr.mk","kind":"ctor","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.mk","doc":""}]}