{"name":"Lean.Compiler.LCNF.ToDecl","instances":[],"imports":["Init","Lean.Meta.Transform","Lean.Meta.Match.MatcherInfo","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.ToLCNF"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToDecl.lean#L95-L123","name":"Lean.Compiler.LCNF.toDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.toDecl","doc":"Convert the given declaration from the Lean environment into `Decl`.\nThe steps for this are roughly:\n- partially erasing type information of the declaration\n- eta-expanding the declaration value.\n- if the declaration has an unsafe-rec version, use it.\n- expand declarations tagged with the `[macro_inline]` attribute\n- turn the resulting term into LCNF declaration\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToDecl.lean#L82-L84","name":"Lean.Compiler.LCNF.getDeclInfo?","kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.getDeclInfo?","doc":"Return the declaration `ConstantInfo` for the code generator.\n\nRemark: the unsafe recursive version is tried first.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToDecl.lean#L51-L61","name":"Lean.Compiler.LCNF.inlineMatchers.inlineMatcher","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers.inlineMatcher","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToDecl.lean#L37-L62","name":"Lean.Compiler.LCNF.inlineMatchers","kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers","doc":"Inline auxiliary `matcher` applications.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToDecl.lean#L15-L20","name":"Lean.Compiler.LCNF.macroInline","kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.macroInline","doc":"Inline constants tagged with the `[macro_inline]` attribute occurring in `e`.\n"}]}