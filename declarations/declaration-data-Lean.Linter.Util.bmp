{"name":"Lean.Linter.Util","instances":[],"imports":["Init","Lean.Data.Options","Lean.Server.InfoUtils","Lean.Linter.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Linter/Util.lean#L26-L41","name":"Lean.Linter.collectMacroExpansions?.go","kind":"def","docLink":"./Lean/Linter/Util.html#Lean.Linter.collectMacroExpansions?.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Linter/Util.lean#L20-L41","name":"Lean.Linter.collectMacroExpansions?","kind":"def","docLink":"./Lean/Linter/Util.html#Lean.Linter.collectMacroExpansions?","doc":"Go upwards through the given `tree` starting from the smallest node that\ncontains the given `range` and collect all `MacroExpansionInfo`s on the way up.\nThe result is `some []` if no `MacroExpansionInfo` was found on the way and\n`none` if no `InfoTree` node was found that covers the given `range`.\n\nReturn the result reversed, s.t. the macro expansion that would be applied to\nthe original syntax first is the first element of the returned list. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Linter/Util.lean#L9-L11","name":"Lean.Linter.logLint","kind":"def","docLink":"./Lean/Linter/Util.html#Lean.Linter.logLint","doc":""}]}