{"name":"Lean.Compiler.LCNF.Simp.FunDeclInfo","instances":[{"typeNames":["Lean.Compiler.LCNF.Simp.FunDeclInfo"],"name":"Lean.Compiler.LCNF.Simp.instReprFunDeclInfo","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.Simp.FunDeclInfo"],"name":"Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfo","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Simp.FunDeclInfoMap"],"name":"Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfoMap","className":"Inhabited"}],"imports":["Init","Lean.Compiler.LCNF.Simp.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L112-L127","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L103-L110","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.addLetValueOccs","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.addLetValueOccs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L96-L101","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.addArgOcc","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update.addArgOcc","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L92-L127","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.update","doc":"Traverse `code` and update function occurrence map.\nThis map is used to decide whether we inline local functions or not.\nIf `mustInline := true`, then all local function declarations occurring in\n`code` are tagged as `.mustInline`.\nRecall that we use `.mustInline` for local function declarations occurring in type class instances.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L80-L83","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.restore","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.restore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L76-L78","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.addMustInline","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.addMustInline","doc":"Add new occurrence for the local function with binder name `key`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L66-L71","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.addHo","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.addHo","doc":"Add new occurrence for the local function occurring as an argument for another function.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L55-L61","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.add","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.add","doc":"Add new occurrence for the local function with binder name `key`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L45-L50","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.format","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L43-L43","name":"Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfoMap","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfoMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L42-L42","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.map","kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.map","doc":"Mapping from local function name to inlining information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L38-L43","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap","kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap","doc":"Local function declaration statistics.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L33-L33","name":"Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.instInhabitedFunDeclInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L33-L33","name":"Lean.Compiler.LCNF.Simp.instReprFunDeclInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.instReprFunDeclInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L29-L32","name":"Lean.Compiler.LCNF.Simp.FunDeclInfo.mustInline","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfo.mustInline","doc":"Function must be inlined.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L24-L28","name":"Lean.Compiler.LCNF.Simp.FunDeclInfo.many","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfo.many","doc":"Local function is applied many times or occur as an argument of another function,\nand will only be inlined if it is small.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L20-L23","name":"Lean.Compiler.LCNF.Simp.FunDeclInfo.once","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfo.once","doc":"Local function is applied once, and must be inlined.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L19-L33","name":"Lean.Compiler.LCNF.Simp.FunDeclInfo","kind":"inductive","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfo","doc":"Local function usage information used to decide whether it should be inlined or not.\nThe information is an approximation, but it is on the \"safe\" side. That is, if we tagged\na function with `.once`, then it is applied only once. A local function may be marked as\n`.many`, but after simplifications the number of applications may reduce to 1. This is not\na big problem in practice because we run the simplifier multiple times, and this information\nis recomputed from scratch at the beginning of each simplification step.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/Simp/FunDeclInfo.lean#L1-L1","name":"Lean.Compiler.LCNF.Simp.FunDeclInfoMap.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/FunDeclInfo.html#Lean.Compiler.LCNF.Simp.FunDeclInfoMap.mk","doc":""}]}