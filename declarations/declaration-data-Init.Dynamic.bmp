{"name":"Init.Dynamic","instances":[{"typeNames":["TypeName"],"name":"instNonemptyTypeName","className":"Nonempty"},{"typeNames":["Dynamic"],"name":"instNonemptyDynamic","className":"Nonempty"}],"imports":["Init.Core"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L96-L96","name":"Dynamic.mk","kind":"opaque","docLink":"./Init/Dynamic.html#Dynamic.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L90-L90","name":"Dynamic.get?","kind":"opaque","docLink":"./Init/Dynamic.html#Dynamic.get?","doc":"Retrieves the value stored in the `Dynamic`.\nReturns `some a` if the value has the right type, and `none` otherwise.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L76-L76","name":"Dynamic.typeName","kind":"opaque","docLink":"./Init/Dynamic.html#Dynamic.typeName","doc":"The name of the type of the value stored in the `Dynamic`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L67-L67","name":"instNonemptyDynamic","kind":"instance","docLink":"./Init/Dynamic.html#instNonemptyDynamic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L65-L65","name":"Dynamic","kind":"def","docLink":"./Init/Dynamic.html#Dynamic","doc":"Type-tagged union that can store any type with a `TypeName` instance.\n\nThis is roughly equivalent to `(α : Type) × TypeName α × α` but without the\nuniverse bump.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L54-L54","name":"TypeName.typeName","kind":"opaque","docLink":"./Init/Dynamic.html#TypeName.typeName","doc":"Returns a declaration name of the type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L44-L45","name":"TypeName.mk","kind":"def","docLink":"./Init/Dynamic.html#TypeName.mk","doc":"Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `α`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L36-L36","name":"instNonemptyTypeName","kind":"instance","docLink":"./Init/Dynamic.html#instNonemptyTypeName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Dynamic.lean#L33-L34","name":"TypeName","kind":"class","docLink":"./Init/Dynamic.html#TypeName","doc":"Dynamic type name information.\nTypes with an instance of `TypeName` can be stored in an `Dynamic`.\nThe type class contains the declaration name of the type,\nwhich must not have any universe parameters\nand be of type `Sort ..` (i.e., monomorphic).\n\nThe preferred way to declare instances of this type is using the derive\nhandler, which will internally use the unsafe `TypeName.mk` function.\n\nMorally, this is the same as:\n```lean\nclass TypeName (α : Type) where unsafe mk ::\n  typeName : Name\n```\n"}]}