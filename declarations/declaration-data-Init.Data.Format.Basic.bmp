{"name":"Init.Data.Format.Basic","instances":[{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instInhabitedFlattenBehavior","className":"Inhabited"},{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instBEqFlattenBehavior","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instInhabitedFormat","className":"Inhabited"},{"typeNames":["Std.Format"],"name":"Std.Format.instAppendFormat","className":"Append"},{"typeNames":["String","Std.Format"],"name":"Std.Format.instCoeStringFormat","className":"Coe"},{"typeNames":["_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult"],"name":"Std.Format.instInhabitedSpaceResult","className":"Inhabited"},{"typeNames":["StateM","_private.Init.Data.Format.Basic.0.Std.Format.State"],"name":"Std.Format.instMonadPrettyFormatStateMState","className":"Std.Format.MonadPrettyFormat"},{"typeNames":["Std.Format"],"name":"Std.instToFormatFormat","className":"Std.ToFormat"},{"typeNames":["String"],"name":"Std.instToFormatString","className":"Std.ToFormat"}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L337-L339","name":"Std.Format.joinSuffix","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","doc":"Format each item in `items` and append `suffix`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L332-L334","name":"Std.Format.prefixJoin","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","doc":"Format each item in `items` and prepend prefix `pre`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L326-L329","name":"Std.Format.joinSep","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","doc":"Intersperse the given list (each item printed with `format`) with the given `sep` format. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L322-L323","name":"Std.instToFormatString","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L319-L320","name":"Std.instToFormatFormat","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L314-L314","name":"Std.ToFormat.format","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L313-L313","name":"Std.ToFormat.mk","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L313-L314","name":"Std.ToFormat","kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","doc":"Class for converting a given type Î± to a `Format` object for pretty-printing.\nSee also `Repr`, which also outputs a `Format` object. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L305-L307","name":"Std.Format.pretty","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","doc":"Pretty-print a `Format` object as a string with expected width `w`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L295-L301","name":"Std.Format.instMonadPrettyFormatStateMState","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L287-L288","name":"Std.Format.indentD","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","doc":"Insert a newline and then `f`, all nested by the default indent amount. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L283-L284","name":"Std.Format.nestD","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","doc":"Nest with the default indentation amount."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L280-L280","name":"Std.Format.defWidth","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","doc":"Default width of the targeted output pane. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L278-L278","name":"Std.Format.defUnicode","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L277-L277","name":"Std.Format.defIndent","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","doc":"Default indentation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L273-L274","name":"Std.Format.bracketFill","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","doc":"Same as `bracket` except uses the `fill` flattening behaviour. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L269-L270","name":"Std.Format.sbracket","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L265-L266","name":"Std.Format.paren","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L261-L262","name":"Std.Format.bracket","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","doc":"Create a format `l ++ f ++ r` with a flatten group.\nFlattenBehaviour is `allOrNone`; for `fill` use `bracketFill`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L256-L257","name":"Std.Format.prettyM","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","doc":"Render the given `f : Format` with a line width of `w`.\n`indent` is the starting amount to indent each line by. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L164-L164","name":"Std.Format.MonadPrettyFormat.endTags","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags","doc":"Exit the scope of `n`-many opened tags. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L162-L162","name":"Std.Format.MonadPrettyFormat.startTag","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag","doc":"Start a scope tagged with `n`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L160-L160","name":"Std.Format.MonadPrettyFormat.currColumn","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L159-L159","name":"Std.Format.MonadPrettyFormat.pushNewline","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L158-L158","name":"Std.Format.MonadPrettyFormat.pushOutput","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L157-L157","name":"Std.Format.MonadPrettyFormat.mk","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L157-L164","name":"Std.Format.MonadPrettyFormat","kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","doc":"A monad in which we can pretty-print `Format` objects. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L111-L111","name":"Std.Format.instInhabitedSpaceResult","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L103-L105","name":"Std.Format.isNil","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L100-L101","name":"Std.Format.join","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L98-L98","name":"Std.Format.instCoeStringFormat","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeStringFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L97-L97","name":"Std.Format.instAppendFormat","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppendFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L94-L95","name":"Std.Format.fill","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","doc":"Alias for a group with `FlattenBehavior` set to `fill`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L83-L91","name":"Std.Format.isEmpty","kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","doc":"Check whether the given format contains no characters. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L78-L78","name":"Std.instInhabitedFormat","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L76-L77","name":"Std.Format.tag","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.tag","doc":"Used for associating auxiliary information (e.g. `Expr`s) with `Format` objects. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L74-L75","name":"Std.Format.group","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.group","doc":"Creates a new flattening group for the given inner format.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L72-L73","name":"Std.Format.append","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.append","doc":"Concatenation of two Formats. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L59-L71","name":"Std.Format.nest","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nest","doc":"`nest n f` tells the formatter that `f` is nested inside something with length `n`\nso that it is pretty-printed with the correct indentation on a line break.\nFor example, we can define a formatter for list `l : List Format` as:\n\n```\nlet f := join <| l.intersperse <| \", \" ++ Format.line\ngroup (nest 1 <| \"[\" ++ f ++ \"]\")\n```\n\nThis will be written all on one line, but if the text is too large,\nthe formatter will put in linebreaks after the commas and indent later lines by 1.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L57-L58","name":"Std.Format.text","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.text","doc":"A node containing a plain string. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L44-L56","name":"Std.Format.align","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.align","doc":"`align` tells the formatter to pad with spaces to the current indent,\nor else add a newline if we are already at or past the indent. For example:\n```\nnest 2 <| \".\" ++ align ++ \"a\" ++ line ++ \"b\"\n```\nresults in:\n```\n. a\n  b\n```\nIf `force` is true, then it will pad to the indent even if it is in a flattened group.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L41-L43","name":"Std.Format.line","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.line","doc":"A position where a newline may be inserted\nif the current group does not fit within the allotted column width. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L39-L40","name":"Std.Format.nil","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nil","doc":"The empty format. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L38-L78","name":"Std.Format","kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format","doc":"A string with pretty-printing information for rendering in a column-width-aware way.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instBEqFlattenBehavior","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instInhabitedFlattenBehavior","kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L30-L30","name":"Std.Format.FlattenBehavior.fill","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L29-L29","name":"Std.Format.FlattenBehavior.allOrNone","kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Data/Format/Basic.lean#L28-L31","name":"Std.Format.FlattenBehavior","kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","doc":"Determines how groups should have linebreaks inserted when the\ntext would overfill its remaining space.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n"}]}