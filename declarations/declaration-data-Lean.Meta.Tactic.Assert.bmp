{"name":"Lean.Meta.Tactic.Assert","instances":[],"imports":["Init","Lean.Meta.Tactic.FVarSubst","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.Revert"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L113-L114","name":"Lean.Meta.assertHypotheses","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertHypotheses","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L98-L110","name":"Lean.MVarId.assertHypotheses","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertHypotheses","doc":"Convert the given goal `Ctx |- target` into `Ctx, (hs[0].userName : hs[0].type) ... |-target`.\nIt assumes `hs[i].val` has type `hs[i].type`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L93-L93","name":"Lean.Meta.Hypothesis.value","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L92-L92","name":"Lean.Meta.Hypothesis.type","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L91-L91","name":"Lean.Meta.Hypothesis.userName","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis.userName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L90-L93","name":"Lean.Meta.Hypothesis","kind":"structure","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L87-L88","name":"Lean.Meta.assertAfter","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertAfter","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L75-L84","name":"Lean.MVarId.assertAfter","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertAfter","doc":"Convert the given goal `Ctx |- target` into a goal containing `(userName : type)` after the local declaration with if `fvarId`.\nIt assumes `val` has type `type`, and that `type` is well-formed after `fvarId`.\nNote that `val` does not need to be well-formed after `fvarId`. That is, it may contain variables that are defined after `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L69-L69","name":"Lean.Meta.AssertAfterResult.subst","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult.subst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L68-L68","name":"Lean.Meta.AssertAfterResult.mvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult.mvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L67-L67","name":"Lean.Meta.AssertAfterResult.fvarId","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L66-L69","name":"Lean.Meta.AssertAfterResult","kind":"structure","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L63-L64","name":"Lean.Meta.assertExt","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L49-L60","name":"Lean.MVarId.assertExt","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertExt","doc":"Convert the given goal `Ctx |- target` into `Ctx |- (hName : type) -> hName = val -> target`.\nIt assumes `val` has type `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L43-L44","name":"Lean.Meta.define","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.define","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L32-L40","name":"Lean.MVarId.define","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.define","doc":"Convert the given goal `Ctx |- target` into `Ctx |- let name : type := val; target`.\nIt assumes `val` has type `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L26-L27","name":"Lean.Meta.assert","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L15-L23","name":"Lean.MVarId.assert","kind":"def","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assert","doc":"Convert the given goal `Ctx |- target` into `Ctx |- type -> target`.\nIt assumes `val` has type `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L1-L1","name":"Lean.Meta.AssertAfterResult.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Assert.lean#L1-L1","name":"Lean.Meta.Hypothesis.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis.mk","doc":""}]}