{"name":"Init.Coe","instances":[{"typeNames":[],"name":"instCoeTC","className":"CoeTC"},{"typeNames":[],"name":"instCoeTC_1","className":"CoeTC"},{"typeNames":[],"name":"instCoeTC_2","className":"CoeTC"},{"typeNames":[],"name":"instCoeOTC","className":"CoeOTC"},{"typeNames":[],"name":"instCoeOTC_1","className":"CoeOTC"},{"typeNames":[],"name":"instCoeOTC_2","className":"CoeOTC"},{"typeNames":[],"name":"instCoeHTC","className":"CoeHTC"},{"typeNames":[],"name":"instCoeHTC_1","className":"CoeHTC"},{"typeNames":[],"name":"instCoeHTC_2","className":"CoeHTC"},{"typeNames":[],"name":"instCoeHTCT","className":"CoeHTCT"},{"typeNames":[],"name":"instCoeHTCT_1","className":"CoeHTCT"},{"typeNames":[],"name":"instCoeHTCT_2","className":"CoeHTCT"},{"typeNames":[],"name":"instCoeT","className":"CoeT"},{"typeNames":[],"name":"instCoeT_1","className":"CoeT"},{"typeNames":[],"name":"instCoeT_2","className":"CoeT"},{"typeNames":[],"name":"instCoeOut","className":"CoeOut"},{"typeNames":[],"name":"instCoeOut_1","className":"CoeOut"},{"typeNames":["Bool","_builtin_prop"],"name":"boolToProp","className":"Coe"},{"typeNames":["Bool","_builtin_prop"],"name":"boolToSort","className":"CoeSort"},{"typeNames":["_builtin_prop","Bool"],"name":"decPropToBool","className":"CoeDep"},{"typeNames":["Option"],"name":"optionCoe","className":"Coe"},{"typeNames":["Subtype"],"name":"subtypeCoe","className":"CoeOut"}],"imports":["Init.Prelude"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L325-L328","name":"Lean.Internal.coeM","kind":"def","docLink":"./Init/Coe.html#Lean.Internal.coeM","doc":"Helper definition used by the elaborator. It is not meant to be used directly by users.\n\nThis is used for coercing the result type under a monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L315-L318","name":"Lean.Internal.liftCoeM","kind":"def","docLink":"./Init/Coe.html#Lean.Internal.liftCoeM","doc":"Helper definition used by the elaborator. It is not meant to be used directly by users.\n\nThis is used for coercions between monads, in the case where we want to apply\na monad lift and a coercion on the result type at the same time.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L304-L305","name":"subtypeCoe","kind":"instance","docLink":"./Init/Coe.html#subtypeCoe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L301-L302","name":"optionCoe","kind":"instance","docLink":"./Init/Coe.html#optionCoe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L298-L299","name":"decPropToBool","kind":"instance","docLink":"./Init/Coe.html#decPropToBool","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L295-L296","name":"boolToSort","kind":"instance","docLink":"./Init/Coe.html#boolToSort","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L292-L293","name":"boolToProp","kind":"instance","docLink":"./Init/Coe.html#boolToProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L281-L288","name":"coeNotation","kind":"def","docLink":"./Init/Coe.html#coeNotation","doc":"`↑x` represents a coercion, which converts `x` of type `α` to type `β`, using\ntypeclasses to resolve a suitable conversion function. You can often leave the\n`↑` off entirely, since coercion is triggered implicitly whenever there is a\ntype error, but in ambiguous cases it can be useful to use `↑` to disambiguate\nbetween e.g. `↑x + ↑y` and `↑(x + y)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L279-L279","name":"instCoeOut_1","kind":"instance","docLink":"./Init/Coe.html#instCoeOut_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L276-L276","name":"CoeSort.coe","kind":"def","docLink":"./Init/Coe.html#CoeSort.coe","doc":"Coerces a value of type `α` to `β`, which must be a universe. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L274-L274","name":"CoeSort.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeSort.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L274-L276","name":"CoeSort","kind":"class","docLink":"./Init/Coe.html#CoeSort","doc":"`CoeSort α β` is a coercion to a sort. `β` must be a universe, and if\n`a : α` appears in a place where a type is expected, like `(x : a)` or `a → a`,\nthen it will be turned into `(x : CoeSort.coe a)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L267-L267","name":"instCoeOut","kind":"instance","docLink":"./Init/Coe.html#instCoeOut","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L264-L264","name":"CoeFun.coe","kind":"def","docLink":"./Init/Coe.html#CoeFun.coe","doc":"Coerces a value `f : α` to type `γ f`, which should be either be a\nfunction type or another `CoeFun` type, in order to resolve a mistyped\napplication `f x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L260-L260","name":"CoeFun.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeFun.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L260-L264","name":"CoeFun","kind":"class","docLink":"./Init/Coe.html#CoeFun","doc":"`CoeFun α (γ : α → Sort v)` is a coercion to a function. `γ a` should be a\n(coercion-to-)function type, and this is triggered whenever an element\n`f : α` appears in an application like `f x` which would not make sense since\n`f` does not have a function type. This is automatically turned into `CoeFun.coe f x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L252-L252","name":"instCoeT_2","kind":"instance","docLink":"./Init/Coe.html#instCoeT_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L251-L251","name":"instCoeT_1","kind":"instance","docLink":"./Init/Coe.html#instCoeT_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L250-L250","name":"instCoeT","kind":"instance","docLink":"./Init/Coe.html#instCoeT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L247-L247","name":"CoeT.coe","kind":"def","docLink":"./Init/Coe.html#CoeT.coe","doc":"The resulting value of type `β`. The input `x : α` is a parameter to\nthe type class, so the value of type `β` may possibly depend on additional\ntypeclasses on `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L243-L243","name":"CoeT.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeT.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L243-L247","name":"CoeT","kind":"class","docLink":"./Init/Coe.html#CoeT","doc":"`CoeT` is the core typeclass which is invoked by Lean to resolve a type error.\nIt can also be triggered explicitly with the notation `↑x` or by double type\nascription `((x : α) : β)`.\n\nA `CoeT` chain has the grammar `CoeHead? CoeOut* Coe* CoeTail? | CoeDep`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L233-L233","name":"CoeDep.coe","kind":"def","docLink":"./Init/Coe.html#CoeDep.coe","doc":"The resulting value of type `β`. The input `x : α` is a parameter to\nthe type class, so the value of type `β` may possibly depend on additional\ntypeclasses on `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L229-L229","name":"CoeDep.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeDep.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L229-L233","name":"CoeDep","kind":"class","docLink":"./Init/Coe.html#CoeDep","doc":"`CoeDep α (x : α) β` is a typeclass for dependent coercions, that is, the type `β`\ncan depend on `x` (or rather, the value of `x` is available to typeclass search\nso an instance that relates `β` to `x` is allowed).\n\nDependent coercions do not participate in the transitive chaining process of\nregular coercions: they must exactly match the type mismatch on both sides.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L219-L219","name":"instCoeHTCT_2","kind":"instance","docLink":"./Init/Coe.html#instCoeHTCT_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L218-L218","name":"instCoeHTCT_1","kind":"instance","docLink":"./Init/Coe.html#instCoeHTCT_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L217-L217","name":"instCoeHTCT","kind":"instance","docLink":"./Init/Coe.html#instCoeHTCT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L214-L214","name":"CoeHTCT.coe","kind":"def","docLink":"./Init/Coe.html#CoeHTCT.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L211-L211","name":"CoeHTCT.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeHTCT.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L211-L214","name":"CoeHTCT","kind":"class","docLink":"./Init/Coe.html#CoeHTCT","doc":"Auxiliary class implementing `CoeHead* Coe* CoeTail?`.\nUsers should generally not implement this directly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L204-L204","name":"CoeTail.coe","kind":"def","docLink":"./Init/Coe.html#CoeTail.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L201-L201","name":"CoeTail.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeTail.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L201-L204","name":"CoeTail","kind":"class","docLink":"./Init/Coe.html#CoeTail","doc":"`CoeTail α β` is for coercions that can only appear at the end of a\nsequence of coercions. That is, `α` can be further coerced via `Coe σ α` and\n`CoeHead τ σ` instances but `β` will only be the expected type of the expression.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L194-L194","name":"instCoeHTC_2","kind":"instance","docLink":"./Init/Coe.html#instCoeHTC_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L193-L193","name":"instCoeHTC_1","kind":"instance","docLink":"./Init/Coe.html#instCoeHTC_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L192-L192","name":"instCoeHTC","kind":"instance","docLink":"./Init/Coe.html#instCoeHTC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L189-L189","name":"CoeHTC.coe","kind":"def","docLink":"./Init/Coe.html#CoeHTC.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L186-L186","name":"CoeHTC.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeHTC.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L186-L189","name":"CoeHTC","kind":"class","docLink":"./Init/Coe.html#CoeHTC","doc":"Auxiliary class implementing `CoeHead CoeOut* Coe*`.\nUsers should generally not implement this directly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L179-L179","name":"CoeHead.coe","kind":"def","docLink":"./Init/Coe.html#CoeHead.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L176-L176","name":"CoeHead.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeHead.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L176-L179","name":"CoeHead","kind":"class","docLink":"./Init/Coe.html#CoeHead","doc":"`CoeHead α β` is for coercions that are applied from left-to-right at most once\nat beginning of the coercion chain.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L166-L166","name":"instCoeOTC_2","kind":"instance","docLink":"./Init/Coe.html#instCoeOTC_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L165-L165","name":"instCoeOTC_1","kind":"instance","docLink":"./Init/Coe.html#instCoeOTC_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L164-L164","name":"instCoeOTC","kind":"instance","docLink":"./Init/Coe.html#instCoeOTC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L161-L161","name":"CoeOTC.coe","kind":"def","docLink":"./Init/Coe.html#CoeOTC.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L158-L158","name":"CoeOTC.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeOTC.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L158-L161","name":"CoeOTC","kind":"class","docLink":"./Init/Coe.html#CoeOTC","doc":"Auxiliary class implementing `CoeOut* Coe*`.\nUsers should generally not implement this directly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L151-L151","name":"CoeOut.coe","kind":"def","docLink":"./Init/Coe.html#CoeOut.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L148-L148","name":"CoeOut.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeOut.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L148-L151","name":"CoeOut","kind":"class","docLink":"./Init/Coe.html#CoeOut","doc":"`CoeOut α β` is for coercions that are applied from left-to-right.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L143-L143","name":"instCoeTC_2","kind":"instance","docLink":"./Init/Coe.html#instCoeTC_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L142-L142","name":"instCoeTC_1","kind":"instance","docLink":"./Init/Coe.html#instCoeTC_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L141-L141","name":"instCoeTC","kind":"instance","docLink":"./Init/Coe.html#instCoeTC","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L138-L138","name":"CoeTC.coe","kind":"def","docLink":"./Init/Coe.html#CoeTC.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L135-L135","name":"CoeTC.mk","kind":"ctor","docLink":"./Init/Coe.html#CoeTC.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L135-L138","name":"CoeTC","kind":"class","docLink":"./Init/Coe.html#CoeTC","doc":"Auxiliary class implementing `Coe*`.\nUsers should generally not implement this directly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L128-L128","name":"Coe.coe","kind":"def","docLink":"./Init/Coe.html#Coe.coe","doc":"Coerces a value of type `α` to type `β`. Accessible by the notation `↑x`,\nor by double type ascription `((x : α) : β)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L125-L125","name":"Coe.mk","kind":"ctor","docLink":"./Init/Coe.html#Coe.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Coe.lean#L125-L128","name":"Coe","kind":"class","docLink":"./Init/Coe.html#Coe","doc":"`Coe α β` is the typeclass for coercions from `α` to `β`. It can be transitively\nchained with other `Coe` instances, and coercion is automatically used when\n`x` has type `α` but it is used in a context where `β` is expected.\nYou can use the `↑x` operator to explicitly trigger coercion.\n"}]}