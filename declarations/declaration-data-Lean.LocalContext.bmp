{"name":"Lean.LocalContext","instances":[{"typeNames":["Lean.LocalDeclKind"],"name":"Lean.instInhabitedLocalDeclKind","className":"Inhabited"},{"typeNames":["Lean.LocalDeclKind"],"name":"Lean.instReprLocalDeclKind","className":"Repr"},{"typeNames":["Eq","Lean.LocalDeclKind"],"name":"Lean.instDecidableEqLocalDeclKind","className":"Decidable"},{"typeNames":["Lean.LocalDeclKind"],"name":"Lean.instHashableLocalDeclKind","className":"Hashable"},{"typeNames":["Lean.LocalDecl"],"name":"Lean.instInhabitedLocalDecl","className":"Inhabited"},{"typeNames":["Lean.LocalContext"],"name":"Lean.instInhabitedLocalContext","className":"Inhabited"},{"typeNames":["Lean.LocalContext","Lean.LocalDecl"],"name":"Lean.LocalContext.instForInLocalContextLocalDecl","className":"ForIn"},{"typeNames":[],"name":"Lean.instMonadLCtx","className":"Lean.MonadLCtx"}],"imports":["Init","Lean.Data.PersistentArray","Lean.Expr","Lean.Hygiene"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L470-L473","name":"Lean.LocalContext.replaceFVarId","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L464-L468","name":"Lean.LocalDecl.replaceFVarId","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L461-L462","name":"Lean.instMonadLCtx","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instMonadLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L457-L457","name":"Lean.MonadLCtx.getLCtx","kind":"def","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx.getLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L456-L456","name":"Lean.MonadLCtx.mk","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L456-L457","name":"Lean.MonadLCtx","kind":"class","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx","doc":"Class used to denote that `m` has a local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L437-L451","name":"Lean.LocalContext.sanitizeNames","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.sanitizeNames","doc":"If option `pp.sanitizeNames` is set to `true`, add tombstone to shadowed local declaration names and ones contains macroscopes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L433-L434","name":"Lean.LocalContext.all","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.all","doc":"Return `true` if all declarations in `lctx` satisfy `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L429-L430","name":"Lean.LocalContext.any","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.any","doc":"Return `true` if `lctx` contains a local declaration satisfying `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L423-L426","name":"Lean.LocalContext.allM","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.allM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L418-L421","name":"Lean.LocalContext.anyM","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.anyM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L415-L416","name":"Lean.LocalContext.mkForall","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkForall","doc":"Creates the expression `(x₁:α₁) → .. → (xₙ:αₙ) → b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`, `αᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L410-L411","name":"Lean.LocalContext.mkLambda","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLambda","doc":"Creates the expression `fun x₁ .. xₙ => b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L388-L406","name":"Lean.LocalContext.mkBinding","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkBinding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L385-L386","name":"Lean.LocalContext.isSubPrefixOf","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOf","doc":"Given `lctx₁ - exceptFVars` of the form `(x_1 : A_1) ... (x_n : A_n)`, then return true\niff there is a local context `B_1* (x_1 : A_1) ... B_n* (x_n : A_n)` which is a prefix\nof `lctx₂` where `B_i`'s are (possibly empty) sequences of local declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L368-L380","name":"Lean.LocalContext.isSubPrefixOfAux","kind":"opaque","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOfAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L365-L366","name":"Lean.LocalContext.findDeclRev?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRev?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L362-L363","name":"Lean.LocalContext.findDecl?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L359-L360","name":"Lean.LocalContext.size","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L356-L357","name":"Lean.LocalContext.foldr","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L353-L354","name":"Lean.LocalContext.foldl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L348-L351","name":"Lean.LocalContext.instForInLocalContextLocalDecl","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.LocalContext.instForInLocalContextLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L343-L346","name":"Lean.LocalContext.findDeclRevM?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRevM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L338-L341","name":"Lean.LocalContext.findDeclM?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L333-L336","name":"Lean.LocalContext.forM","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L328-L331","name":"Lean.LocalContext.foldrM","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldrM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L323-L326","name":"Lean.LocalContext.foldlM","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldlM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L320-L321","name":"Lean.LocalContext.getAt?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L317-L318","name":"Lean.LocalContext.numIndices","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.numIndices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L313-L314","name":"Lean.LocalContext.setBinderInfo","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L303-L311","name":"Lean.LocalContext.modifyLocalDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecl","doc":"Low-level function for updating the local context.\nAssumptions about `f`, the resulting nested expressions must be definitionally equal to their original values,\nthe `index` nor `fvarId` are modified.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L289-L297","name":"Lean.LocalContext.renameUserName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.renameUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L283-L287","name":"Lean.LocalContext.setUserName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L280-L281","name":"Lean.LocalContext.lastDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.lastDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L275-L278","name":"Lean.LocalContext.getUnusedName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getUnusedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L267-L268","name":"Lean.LocalContext.usesUserName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.usesUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L261-L265","name":"Lean.LocalContext.findFromUserName?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFromUserName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L253-L259","name":"Lean.LocalContext.pop","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.pop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L246-L251","name":"Lean.LocalContext.erase","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L236-L237","name":"Lean.LocalContext.getFVars","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVars","doc":"Return all of the free variables in the given context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L230-L233","name":"Lean.LocalContext.getFVarIds","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L227-L228","name":"Lean.LocalContext.containsFVar","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.containsFVar","doc":"Returns true when the lctx contains the free variable `e`.\nPanics if `e` is not an fvar. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L222-L223","name":"Lean.LocalContext.contains","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L219-L220","name":"Lean.LocalContext.getFVar!","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVar!","doc":"Gets the declaration for expression `e` in the local context.\nIf `e` is not a free variable or not present then panics. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L212-L215","name":"Lean.LocalContext.get!","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.get!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L209-L210","name":"Lean.LocalContext.findFVar?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFVar?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L206-L207","name":"Lean.LocalContext.find?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L198-L203","name":"Lean.LocalContext.addDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.addDecl","doc":"Low level API for adding a local declaration.\nDo not use directly. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L185-L190","name":"Lean.LocalContext.mkLetDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLetDecl","doc":"Low level API for let declarations. Do not use directly."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L173-L178","name":"Lean.LocalContext.mkLocalDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLocalDecl","doc":"Low level API for creating local declarations.\nIt is used to implement actions in the monads `Elab` and `Tactic`.\nIt should not be used directly since the argument `(fvarId : FVarId)` is\nassumed to be unique. You can create a unique fvarId with `mkFreshFVarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L166-L167","name":"Lean.LocalContext.isEmpty","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L163-L163","name":"Lean.LocalContext.empty","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L161-L161","name":"Lean.LocalContext.mkEmpty","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L156-L156","name":"Lean.instInhabitedLocalContext","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L155-L155","name":"Lean.LocalContext.decls","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.decls","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L154-L154","name":"Lean.LocalContext.fvarIdToDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalContext.fvarIdToDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L153-L156","name":"Lean.LocalContext","kind":"structure","docLink":"./Lean/LocalContext.html#Lean.LocalContext","doc":"A LocalContext is an ordered set of local variable declarations.\nIt is used to store the free variables (also known as local constants) that\nare in scope.\n\nWhen inspecting a goal or expected type in the infoview, the local\ncontext is all of the variables above the `⊢` symbol.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L140-L142","name":"Lean.LocalDecl.hasExprMVar","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L137-L138","name":"Lean.LocalDecl.toExpr","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.toExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L133-L135","name":"Lean.LocalDecl.setBinderInfo","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L129-L131","name":"Lean.LocalDecl.setUserName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L125-L127","name":"Lean.LocalDecl.setValue","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L121-L123","name":"Lean.LocalDecl.hasValue","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L117-L119","name":"Lean.LocalDecl.value","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L113-L115","name":"Lean.LocalDecl.value?","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L110-L111","name":"Lean.LocalDecl.isImplementationDetail","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isImplementationDetail","doc":"Is the local declaration an implementation-detail hypothesis\n(including auxiliary declarations)?\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L103-L104","name":"Lean.LocalDecl.isAuxDecl","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isAuxDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L100-L101","name":"Lean.LocalDecl.kind","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.kind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L96-L98","name":"Lean.LocalDecl.binderInfo","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L92-L94","name":"Lean.LocalDecl.setType","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L88-L90","name":"Lean.LocalDecl.type","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L84-L86","name":"Lean.LocalDecl.userName","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.userName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L80-L82","name":"Lean.LocalDecl.fvarId","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L76-L78","name":"Lean.LocalDecl.setIndex","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setIndex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L72-L74","name":"Lean.LocalDecl.index","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.index","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L68-L70","name":"Lean.LocalDecl.isLet","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L63-L65","name":"Lean.LocalDecl.binderInfoEx","kind":"def","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfoEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L60-L61","name":"Lean.mkLetDeclEx","kind":"def","docLink":"./Lean/LocalContext.html#Lean.mkLetDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L57-L58","name":"Lean.mkLocalDeclEx","kind":"def","docLink":"./Lean/LocalContext.html#Lean.mkLocalDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L54-L54","name":"Lean.instInhabitedLocalDecl","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L53-L53","name":"Lean.LocalDecl.ldecl","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.ldecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L52-L52","name":"Lean.LocalDecl.cdecl","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.cdecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L51-L54","name":"Lean.LocalDecl","kind":"inductive","docLink":"./Lean/LocalContext.html#Lean.LocalDecl","doc":"A declaration for a LocalContext. This is used to register which free variables are in scope.\nEach declaration comes with\n- `index` the position of the decl in the local context\n- `fvarId` the unique id of the free variables\n- `userName` the pretty-printable name of the variable\n- `type` the type.\nA `cdecl` is a local variable, a `ldecl` is a let-bound free variable with a `value : Expr`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L41-L41","name":"Lean.instHashableLocalDeclKind","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instHashableLocalDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L41-L41","name":"Lean.instDecidableEqLocalDeclKind","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instDecidableEqLocalDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L41-L41","name":"Lean.instReprLocalDeclKind","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instReprLocalDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L41-L41","name":"Lean.instInhabitedLocalDeclKind","kind":"instance","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L32-L40","name":"Lean.LocalDeclKind.auxDecl","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.auxDecl","doc":"Auxiliary local declaration for recursive calls.\nThe behavior is similar to `implDetail`.\n\nFor example: `def foo (n : Nat) : Nat := _` adds the local declaration\n`foo : Nat → Nat` to allow recursive calls.\nThis declaration has the `auxDecl` kind.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L23-L31","name":"Lean.LocalDeclKind.implDetail","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.implDetail","doc":"Invisible to type class search or tactics, and hidden in the goal display.\n\nThis kind is used for temporary variables in macros.\nFor example: `return (← foo) + bar` expands to\n`foo >>= fun __tmp => pure (__tmp + bar)`,\nwhere `__tmp` has the `implDetail` kind.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L17-L22","name":"Lean.LocalDeclKind.default","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.default","doc":"Participates fully in type class search, tactics, and is shown even if inaccessible.\n\nFor example: the `x` in `fun x => _` has the default kind.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L16-L41","name":"Lean.LocalDeclKind","kind":"inductive","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind","doc":"Whether a local declaration should be found by type class search, tactics, etc.\nand shown in the goal display.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/LocalContext.lean#L1-L1","name":"Lean.LocalContext.mk","kind":"ctor","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mk","doc":""}]}