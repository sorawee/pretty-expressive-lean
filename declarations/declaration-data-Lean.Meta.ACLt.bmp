{"name":"Lean.Meta.ACLt","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.Meta.FunInfo","Lean.Meta.DiscrTree"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L179-L179","name":"Lean.Meta.Expr.acLt","kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.Expr.acLt","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instace arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L157-L172","name":"Lean.Meta.ACLt.main.lpo","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lpo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L154-L155","name":"Lean.Meta.ACLt.main.someChildGe","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.someChildGe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L134-L152","name":"Lean.Meta.ACLt.main.allChildrenLt","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.allChildrenLt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L116-L132","name":"Lean.Meta.ACLt.main.lexSameCtor","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lexSameCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L86-L114","name":"Lean.Meta.ACLt.main.ltApp","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L78-L84","name":"Lean.Meta.ACLt.main.ltPair","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltPair","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L67-L76","name":"Lean.Meta.ACLt.main.lt","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L55-L65","name":"Lean.Meta.ACLt.main.reduce","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.reduce","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L52-L172","name":"Lean.Meta.ACLt.main","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instace arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L32-L32","name":"Lean.Meta.ACLt.ReduceMode.none","kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L31-L31","name":"Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L30-L30","name":"Lean.Meta.ACLt.ReduceMode.reduce","kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L29-L32","name":"Lean.Meta.ACLt.ReduceMode","kind":"inductive","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ACLt.lean#L12-L24","name":"Lean.Expr.ctorWeight","kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight","doc":""}]}