{"name":"Lean.Compiler.LCNF.FixedParams","instances":[{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"],"name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","className":"Hashable"}],"imports":["Init","Lean.Compiler.LCNF.Basic","Lean.Compiler.LCNF.Types"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L165-L173","name":"Lean.Compiler.LCNF.mkFixedParamsMap","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.mkFixedParamsMap","doc":"Given the (potentially mutually) recursive declarations `decls`,\nreturn a map from declaration name `decl.name` to a bit-mask `m` where `m[i]` is true\niff the `decl.params[i]` is a fixed argument. That is, it does not change in recursive\napplications.\nThe function assumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L148-L152","name":"Lean.Compiler.LCNF.FixedParams.mkInitialValues","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkInitialValues","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L113-L144","name":"Lean.Compiler.LCNF.FixedParams.evalApp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L106-L111","name":"Lean.Compiler.LCNF.FixedParams.evalCode","kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L101-L104","name":"Lean.Compiler.LCNF.FixedParams.evalLetValue","kind":"opaque","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalLetValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L93-L97","name":"Lean.Compiler.LCNF.FixedParams.mkAssignment","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkAssignment","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L90-L91","name":"Lean.Compiler.LCNF.FixedParams.inMutualBlock","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.inMutualBlock","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L83-L88","name":"Lean.Compiler.LCNF.FixedParams.evalArg","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L79-L81","name":"Lean.Compiler.LCNF.FixedParams.evalFVar","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L75-L77","name":"Lean.Compiler.LCNF.FixedParams.abort","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.abort","doc":"Stop the analysis and mark all parameters as non-fixed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L72-L72","name":"Lean.Compiler.LCNF.FixedParams.FixParamM","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM","doc":"Monad for the fixed parameter static analyzer. We use the unit-exception to interrupt the analysis. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L69-L69","name":"Lean.Compiler.LCNF.FixedParams.State.fixed","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.fixed","doc":"Bitmask containing the result, i.e., which parameters of `main` are fixed.\nWe initialize it with `true` everywhere.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L64-L64","name":"Lean.Compiler.LCNF.FixedParams.State.visited","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.visited","doc":"Set of calls that have been already analyzed.\nRecall that we assume that only functions in `decls` may have recursive calls to the function being analyzed (i.e., `main`).\nWhenever there is function application `f a₁ ... aₙ`, where `f` is in `decls`, `f` is not `main`, and\nwe visit with the abstract values assigned to `aᵢ`, but first we record the visit here.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L57-L69","name":"Lean.Compiler.LCNF.FixedParams.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L55-L55","name":"Lean.Compiler.LCNF.FixedParams.Context.assignment","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.assignment","doc":"The assignment maps free variable ids in the current code being analyzed to abstract values.\nWe only track the abstract value assigned to parameters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L50-L50","name":"Lean.Compiler.LCNF.FixedParams.Context.main","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.main","doc":"Function being analyzed. We check every recursive call to this function.\nRemark: `main` is in `decls`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45","name":"Lean.Compiler.LCNF.FixedParams.Context.decls","kind":"def","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.decls","doc":"Declaration in the same mutual block. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L43-L55","name":"Lean.Compiler.LCNF.FixedParams.Context","kind":"structure","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L41-L41","name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","kind":"instance","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L40-L40","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.val","kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.val","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L39-L39","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.erased","kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.erased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L38-L38","name":"Lean.Compiler.LCNF.FixedParams.AbsValue.top","kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.top","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L37-L41","name":"Lean.Compiler.LCNF.FixedParams.AbsValue","kind":"inductive","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue","doc":"Abstract value for the \"fixed parameter\" analysis. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L1-L1","name":"Lean.Compiler.LCNF.FixedParams.Context.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/FixedParams.lean#L1-L1","name":"Lean.Compiler.LCNF.FixedParams.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.mk","doc":""}]}