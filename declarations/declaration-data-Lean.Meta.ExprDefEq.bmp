{"name":"Lean.Meta.ExprDefEq","instances":[{"typeNames":["Lean.Expr","Lean.Expr","Lean.Meta.CheckAssignment.CheckAssignmentM"],"name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","className":"Lean.MonadCache"}],"imports":["Init","Lean.Meta.Offset","Lean.Meta.UnificationHint","Lean.Util.OccursCheck"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L1767-L1809","name":"Lean.Meta.isExprDefEqAuxImpl","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isExprDefEqAuxImpl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L1619-L1624","name":"Lean.Meta.whenUndefDo","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.whenUndefDo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L891-L908","name":"Lean.Meta.checkAssignment","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkAssignment","doc":"Auxiliary function for handling constraints of the form `?m a₁ ... aₙ =?= v`.\nIt will check whether we can perform the assignment\n```\n?m := fun fvars => v\n```\nThe result is `none` if the assignment can't be performed.\nThe result is `some newV` where `newV` is a possibly updated `v`. This method may need\nto unfold let-declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L846-L877","name":"Lean.Meta.CheckAssignmentQuick.check.visit","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L843-L878","name":"Lean.Meta.CheckAssignmentQuick.check","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L789-L824","name":"Lean.Meta.CheckAssignment.check","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.check","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L759-L787","name":"Lean.Meta.CheckAssignment.checkApp","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L756-L757","name":"Lean.Meta.CheckAssignment.checkAssignmentAux","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L745-L753","name":"Lean.Meta.CheckAssignment.assignToConstFun","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.assignToConstFun","doc":"Auxiliary function used to \"fix\" subterms of the form `?m x_1 ... x_n` where `x_i`s are free variables,\nand one of them is out-of-scope.\nSee `Expr.app` case at `check`.\nIf `ctxApprox` is true, then we solve this case by creating a fresh metavariable ?n with the correct scope,\nan assigning `?m := fun _ ... _ => ?n` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L680-L737","name":"Lean.Meta.CheckAssignment.checkMVar","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L665-L678","name":"Lean.Meta.CheckAssignment.checkFVar","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L654-L661","name":"Lean.Meta.CheckAssignment.run","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L646-L648","name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","kind":"instance","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L637-L638","name":"Lean.Meta.CheckAssignment.throwOutOfScopeFVar","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwOutOfScopeFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L634-L635","name":"Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L632-L632","name":"Lean.Meta.CheckAssignment.CheckAssignmentM","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L630-L630","name":"Lean.Meta.CheckAssignment.Context.rhs","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.rhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L629-L629","name":"Lean.Meta.CheckAssignment.Context.hasCtxLocals","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.hasCtxLocals","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L628-L628","name":"Lean.Meta.CheckAssignment.Context.fvars","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.fvars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L627-L627","name":"Lean.Meta.CheckAssignment.Context.mvarDecl","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L626-L626","name":"Lean.Meta.CheckAssignment.Context.mvarId","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L625-L630","name":"Lean.Meta.CheckAssignment.Context","kind":"structure","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L623-L623","name":"Lean.Meta.CheckAssignment.State.cache","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.cache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L622-L623","name":"Lean.Meta.CheckAssignment.State","kind":"structure","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L620-L620","name":"Lean.Meta.CheckAssignment.outOfScopeExceptionId","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.outOfScopeExceptionId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L619-L619","name":"Lean.Meta.CheckAssignment.checkAssignmentExceptionId","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentExceptionId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L614-L615","name":"Lean.Meta.mkAuxMVar","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.mkAuxMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L278-L291","name":"Lean.Meta.isDefEqBindingDomain.loop","kind":"opaque","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L277-L292","name":"Lean.Meta.isDefEqBindingDomain","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain","doc":"Check whether the types of the free variables at `fvars` are\ndefinitionally equal to the types at `ds₂`.\n\nPre: `fvars.size == ds₂.size`\n\nThis method also updates the set of local instances, and invokes\nthe continuation `k` with the updated set.\n\nWe can't use `withNewLocalInstances` because the `isDeq fvarType d₂`\nmay use local instances. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L154-L180","name":"Lean.Meta.DefEqArgsFirstPassResult.ok","kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.ok","doc":"Succeeded. The array `postponedImplicit` contains the position\nof the implicit arguments for which def-eq has been postponed.\n`postponedHO` contains the higher order output parameters, and parameters\nthat depend on them. They should be processed after the implict ones.\n`postponedHO` is used to handle applications involving functions that\ncontain higher order output parameters. Example:\n```lean\ngetElem :\n  {cont : Type u_1} → {idx : Type u_2} → {elem : Type u_3} →\n  {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] →\n  (xs : cont) → (i : idx) → (h : dom xs i) → elem\n```\nThe argumengs `dom` and `h` must be processed after all implicit arguments\notherwise higher-order unification problems are generated. See issue #1299,\nwhen trying to solve\n```\ngetElem ?a ?i ?h =?= getElem a i (Fin.val_lt_of_le i ...)\n```\nwe have to solve the constraint\n```\n?dom a i.val =?= LT.lt i.val (Array.size a)\n```\nby solving after the instance has been synthesized, we reduce this constraint to\na simple check.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L148-L153","name":"Lean.Meta.DefEqArgsFirstPassResult.failed","kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.failed","doc":"Failed to establish that explicit arguments are def-eq.\nRemark: higher output parameters, and parameters that depend on them\nare postponed.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L147-L180","name":"Lean.Meta.DefEqArgsFirstPassResult","kind":"inductive","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult","doc":"Result type for `isDefEqArgsFirstPass`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L127-L136","name":"Lean.Meta.isEtaUnassignedMVar","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isEtaUnassignedMVar","doc":"Return `true` if `e` is of the form `fun (x_1 ... x_n) => ?m x_1 ... x_n)`, and `?m` is unassigned.\nRemark: `n` may be 0. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L115-L122","name":"Lean.Meta.isDefEqStringLit","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqStringLit","doc":"Support for constraints of the form `(\"...\" =?= String.mk cs)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L101-L112","name":"Lean.Meta.isDefEqNat","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNat","doc":"Support for reducing Nat basic operations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L90-L98","name":"Lean.Meta.isDefEqNative","kind":"def","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNative","doc":"Support for `Lean.reduceBool` and `Lean.reduceNat` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L1-L1","name":"Lean.Meta.CheckAssignment.Context.mk","kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/ExprDefEq.lean#L1-L1","name":"Lean.Meta.CheckAssignment.State.mk","kind":"ctor","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.mk","doc":""}]}