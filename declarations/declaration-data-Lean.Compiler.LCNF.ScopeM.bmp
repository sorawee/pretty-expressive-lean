{"name":"Lean.Compiler.LCNF.ScopeM","instances":[],"imports":["Init","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L48-L49","name":"Lean.Compiler.LCNF.ScopeM.addToScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.addToScope","doc":"Add a new `FVarId` to the current scope.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L41-L43","name":"Lean.Compiler.LCNF.ScopeM.isInScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.isInScope","doc":"Check whether `fvarId` is in the current scope, that is, was declared within\nthe current `fun` declaration that is being processed.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L32-L35","name":"Lean.Compiler.LCNF.ScopeM.withNewScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.withNewScope","doc":"Clear the current scope for the monadic action `x`, afterwards continuing\nwith the old one.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L24-L26","name":"Lean.Compiler.LCNF.ScopeM.withBackTrackingScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.withBackTrackingScope","doc":"Execute `x` but recover the previous scope after doing so.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L19-L19","name":"Lean.Compiler.LCNF.ScopeM.clearScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.clearScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L18-L18","name":"Lean.Compiler.LCNF.ScopeM.setScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.setScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L17-L17","name":"Lean.Compiler.LCNF.ScopeM.getScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM.getScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ScopeM.lean#L13-L13","name":"Lean.Compiler.LCNF.ScopeM","kind":"def","docLink":"./Lean/Compiler/LCNF/ScopeM.html#Lean.Compiler.LCNF.ScopeM","doc":"A general abstraction for the idea of a scope in the compiler.\n"}]}