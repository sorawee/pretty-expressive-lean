{"name":"Lean.Compiler.LCNF.JoinPoints","instances":[{"typeNames":["Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo"],"name":"Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","className":"Inhabited"}],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PullFunDecls","Lean.Compiler.LCNF.FVarUtil","Lean.Compiler.LCNF.ScopeM","Lean.Compiler.LCNF.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L629-L630","name":"Lean.Compiler.LCNF.commonJoinPointArgs","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.commonJoinPointArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L626-L627","name":"Lean.Compiler.LCNF.Decl.commonJoinPointArgs","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.Decl.commonJoinPointArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L620-L621","name":"Lean.Compiler.LCNF.extendJoinPointContext","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.extendJoinPointContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L617-L618","name":"Lean.Compiler.LCNF.Decl.extendJoinPointContext","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.Decl.extendJoinPointContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L611-L612","name":"Lean.Compiler.LCNF.findJoinPoints","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.findJoinPoints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L606-L609","name":"Lean.Compiler.LCNF.Decl.findJoinPoints","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.Decl.findJoinPoints","doc":"Find all `fun` declarations in `decl` that qualify as join points then replace\ntheir definitions and call sites with `jp`/`jmp`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L561-L598","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goReduce","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goReduce","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L521-L559","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goAnalyze","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goAnalyze","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L516-L519","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goAnalyzeFunDecl","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.reduce.goAnalyzeFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L511-L598","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.reduce","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.reduce","doc":"Take a look at each join point and each of their call sites. If all\ncall sites of a join point have one or more arguments in common, for example:\n```\njp _jp.1 a b c => ...\n...\ncases foo\n| n1 => jmp _jp.1 d e f\n| n2 => jmp _jp.1 g e h\n```\nWe can get rid of the common argument in favour of inlining it directly\ninto the join point (in this case the `e`). This reduces the amount of\narguments we have to pass around drastically for example in `ReaderT` based\nmonad stacks.\n\nNote 1: This transformation can in certain niche cases obtain better results.\nFor example:\n```\njp foo a b => ..\nlet x := ...\ncases discr\n| n1 => jmp foo x y\n| n2 => jmp foo x z\n```\nHere we will not collapse the `x` since it is defined after the join point `foo`\nand thus not accessible for substitution yet. We could however reorder the code in\nsuch a way that this is possible, this is currently not done since we observe\nthan in praxis most of the applications of this transformation can occur naturally\nwithout reordering.\n\nNote 2: This transformation is kind of the opposite of `JoinPointContextExtender`.\nHowever we still benefit from the extender because in the `simp` run after it\nwe might be able to pull join point declarations further up in the hierarchy\nof nested functions/join points which in turn might enable additional optimizations.\nAfter we have performed all of these optimizations we can take away the\n(remaining) common arguments and end up with nicely floated and optimized\ncode that has as little arguments as possible in the join points.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L468-L469","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.isInJpScope","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.isInJpScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L466-L466","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.ReduceActionM","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.ReduceActionM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L465-L465","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.ReduceAnalysisM","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.ReduceAnalysisM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L463-L463","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState.jpJmpArgs","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState.jpJmpArgs","doc":"A map, that for each join point id contains a map from all (so far)\nduplicated argument ids to the respective duplicate value\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L458-L463","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState","doc":"State for `ReduceAnalysisM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L453-L453","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx.jpScopes","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx.jpScopes","doc":"The variables that are in scope at the time of the definition of\nthe join point.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L448-L453","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx","doc":"Context for `ReduceAnalysisM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L398-L439","name":"Lean.Compiler.LCNF.JoinPointContextExtender.extend.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.extend.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L395-L397","name":"Lean.Compiler.LCNF.JoinPointContextExtender.extend.goFVar","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.extend.goFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L390-L439","name":"Lean.Compiler.LCNF.JoinPointContextExtender.extend","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.extend","doc":"Use all of the above functions to find free variables declared outside\nof join points that said join points can be reasonaly extended by. Reasonable\nmeaning that in case the current join point is nested within a function\ndeclaration we will not extend it by free variables declared before the\nfunction declaration because we cannot lift join points outside of function\ndeclarations.\n\nAll of this is done to eliminate dependencies of join points onto their\nposition within the code so we can pull them out as far as possible, hopefully\nenabling new inlining possibilities in the next simplifier run.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L373-L376","name":"Lean.Compiler.LCNF.JoinPointContextExtender.withNewAltScope","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.withNewAltScope","doc":"We call this whenever we visit a new arm of a cases statement.\nIt will back up the current scope (since we are doing a case split\nand want to continue with other arms afterwards) and add all of the\nparameters of the match arm to the list of candidates.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L360-L365","name":"Lean.Compiler.LCNF.JoinPointContextExtender.withNewJpScope","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.withNewJpScope","doc":"We call this whenever we enter a new join point. It will set the current\njoin point and extend the list of candidates by all of the parameters of\nthe join point. This is so in the case of nested join points that refer\nto parameters of the current one we extend the context of the nested\njoin points by said parameters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L348-L351","name":"Lean.Compiler.LCNF.JoinPointContextExtender.withNewFunScope","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.withNewFunScope","doc":"We call this whenever we enter a new local function. It clears both the\ncurrent join point and the list of candidates since we cant lift join\npoints outside of functions as explained in `mergeJpContextIfNecessary`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L337-L341","name":"Lean.Compiler.LCNF.JoinPointContextExtender.mergeJpContextIfNecessary","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.mergeJpContextIfNecessary","doc":"Merge the extended context of two join points if necessary. That is\nif we have a structure such as:\n```\njp j.1 ... =>\n  jp j.2 .. =>\n    ...\n  ...\n```\nAnd we are just done visiting `j.2` we want to extend the context of\n`j.1` by all free variables that the context of `j.2` was extended by\nas well because we need to drag these variables through at the call sites\nof `j.2` in `j.1`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L313-L321","name":"Lean.Compiler.LCNF.JoinPointContextExtender.extendByIfNecessary","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.extendByIfNecessary","doc":"Extend the context of the current join point (if we are within one)\nby `fvar` if necessary.\nThis is necessary if:\n- `fvar` is not in scope (that is, was declared outside of the current jp)\n- we have not already extended the context by `fvar`\n- the list of candidates contains `fvar`. This is because if we have something\n  like:\n  ```\n  let x := ..\n  fun f a =>\n    jp j b =>\n      let y := x\n      y\n  ```\n  There is no point in extending the context of `j` by `x` because we\n  cannot lift a join point outside of a local function declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L283-L293","name":"Lean.Compiler.LCNF.JoinPointContextExtender.withNewCandidates","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.withNewCandidates","doc":"Same as `withNewCandidate` but with multiple `FVarId`s.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L272-L278","name":"Lean.Compiler.LCNF.JoinPointContextExtender.withNewCandidate","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.withNewCandidate","doc":"Add a new candidate to the current scope + to the list of candidates\nif we are currently within a join point. Then execute `x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L261-L266","name":"Lean.Compiler.LCNF.JoinPointContextExtender.replaceFVar","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.replaceFVar","doc":"Replace a free variable if necessary, that is:\n- It is in the list of candidates\n- We are currently within a join point (if we are within a function there\n  cannot be a need to replace them since we dont extend their context)\n- Said join point actually has a replacement parameter registered.\notherwise just return `fvar`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L251-L251","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendM","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendM","doc":"The monad for the `extendJoinPointContext` pass.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L246-L246","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState.fvarMap","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState.fvarMap","doc":"A map from join point `FVarId`s to a respective map from free variables\nto `Param`s. The free variables in this map are the once that the context\nof said join point will be extended by by passing in the respective parameter.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L240-L246","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState","doc":"The state managed by `ExtendM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L235-L235","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.candidates","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.candidates","doc":"The list of valid candidates for extending the context. This will be\nall `let` and `fun` declarations as well as all `jp` parameters up\nuntil the last `fun` declaration in the tree.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L229-L229","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.currentJp?","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.currentJp?","doc":"The `FVarId` of the current join point if we are currently inside one.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L225-L235","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext","doc":"The context managed by `ExtendM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L183-L214","name":"Lean.Compiler.LCNF.JoinPointFinder.replace.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.replace.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L177-L214","name":"Lean.Compiler.LCNF.JoinPointFinder.replace","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.replace","doc":"Replace all join point candidate `fun` declarations with `jp` ones\nand all calls to them with `jmp`s.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L138-L171","name":"Lean.Compiler.LCNF.JoinPointFinder.find.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.find.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L134-L171","name":"Lean.Compiler.LCNF.JoinPointFinder.find","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.find","doc":"Find all `fun` declarations that qualify as a join point, that is:\n- are always fully applied\n- are always called in tail position\n\nWhere a `fun` `f` is in tail position iff it is called as follows:\n```\nlet res := f arg\nres\n```\nThe majority (if not all) tail calls will be brought into this form\nby the simplifier pass.\n\nFurthermore a `fun` disqualifies as a join point if turning it into a join\npoint would turn a call to it into an out of scope join point.\nThis can happen if we have something like:\n```\ndef test (b : Bool) (x y : Nat) : Nat :=\n  fun myjp x => Nat.add x (Nat.add x x)\n  fun f y =>\n    let x := Nat.add y y\n    myjp x\n  fun f y =>\n    let x := Nat.mul y y\n    myjp x\n  cases b (f x) (g y)\n```\n`f` and `g` can be detected as a join point right away, however\n`myjp` can only ever be detected as a join point after we have established\nthis. This is because otherwise the calls to `myjp` in `f` and `g` would\nproduce out of scope join point jumps.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L51-L51","name":"Lean.Compiler.LCNF.JoinPointFinder.ReplaceM","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.ReplaceM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L50-L50","name":"Lean.Compiler.LCNF.JoinPointFinder.FindM","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L48-L48","name":"Lean.Compiler.LCNF.JoinPointFinder.ReplaceCtx","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.ReplaceCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L46-L46","name":"Lean.Compiler.LCNF.JoinPointFinder.FindState.scope","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindState.scope","doc":"The `FVarId`s of all `fun` declarations that were declared within the\ncurrent `fun`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L41-L41","name":"Lean.Compiler.LCNF.JoinPointFinder.FindState.candidates","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindState.candidates","doc":"All current join point candidates accessible by their `FVarId`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L37-L46","name":"Lean.Compiler.LCNF.JoinPointFinder.FindState","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindState","doc":"The state for the join point candidate finder.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L32-L32","name":"Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.instInhabitedCandidateInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L31-L31","name":"Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.associated","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.associated","doc":"The set of candidates that rely on this candidate to be a join point.\nFor a more detailed explanation see the documentation of `find`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L26-L26","name":"Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.arity","kind":"def","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.arity","doc":"The arity of the candidate\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L22-L32","name":"Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo","kind":"structure","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo","doc":"Info about a join point candidate (a `fun` declaration) during the find phase.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointContextExtender.ExtendContext.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointFinder.FindState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.FindState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointFinder.CandidateInfo.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/JoinPoints.lean#L1-L1","name":"Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/JoinPoints.html#Lean.Compiler.LCNF.JoinPointCommonArgs.AnalysisCtx.mk","doc":""}]}