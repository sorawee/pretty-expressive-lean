{"name":"Lean.Declaration","instances":[{"typeNames":["Lean.ReducibilityHints"],"name":"Lean.instInhabitedReducibilityHints","className":"Inhabited"},{"typeNames":["Lean.ConstantVal"],"name":"Lean.instInhabitedConstantVal","className":"Inhabited"},{"typeNames":["Lean.AxiomVal"],"name":"Lean.instInhabitedAxiomVal","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instInhabitedDefinitionSafety","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instBEqDefinitionSafety","className":"BEq"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instReprDefinitionSafety","className":"Repr"},{"typeNames":["Lean.DefinitionVal"],"name":"Lean.instInhabitedDefinitionVal","className":"Inhabited"},{"typeNames":["Lean.TheoremVal"],"name":"Lean.instInhabitedTheoremVal","className":"Inhabited"},{"typeNames":["Lean.OpaqueVal"],"name":"Lean.instInhabitedOpaqueVal","className":"Inhabited"},{"typeNames":["Lean.Constructor"],"name":"Lean.instInhabitedConstructor","className":"Inhabited"},{"typeNames":["Lean.InductiveType"],"name":"Lean.instInhabitedInductiveType","className":"Inhabited"},{"typeNames":["Lean.Declaration"],"name":"Lean.instInhabitedDeclaration","className":"Inhabited"},{"typeNames":["Lean.InductiveVal"],"name":"Lean.instInhabitedInductiveVal","className":"Inhabited"},{"typeNames":["Lean.ConstructorVal"],"name":"Lean.instInhabitedConstructorVal","className":"Inhabited"},{"typeNames":["Lean.RecursorRule"],"name":"Lean.instInhabitedRecursorRule","className":"Inhabited"},{"typeNames":["Lean.RecursorVal"],"name":"Lean.instInhabitedRecursorVal","className":"Inhabited"},{"typeNames":["Lean.QuotKind"],"name":"Lean.instInhabitedQuotKind","className":"Inhabited"},{"typeNames":["Lean.QuotVal"],"name":"Lean.instInhabitedQuotVal","className":"Inhabited"},{"typeNames":["Lean.ConstantInfo"],"name":"Lean.instInhabitedConstantInfo","className":"Inhabited"}],"imports":["Init","Lean.Expr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L456-L457","name":"Lean.mkRecName","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkRecName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L447-L452","name":"Lean.ConstantInfo.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.all","doc":"List of all (including this one) declarations in the same mutual block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L440-L442","name":"Lean.ConstantInfo.isInductive","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isInductive","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L436-L438","name":"Lean.ConstantInfo.isCtor","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L432-L434","name":"Lean.ConstantInfo.hints","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L427-L430","name":"Lean.ConstantInfo.value!","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L422-L425","name":"Lean.ConstantInfo.hasValue","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hasValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L417-L420","name":"Lean.ConstantInfo.value?","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L414-L415","name":"Lean.ConstantInfo.type","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L411-L412","name":"Lean.ConstantInfo.numLevelParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.numLevelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L408-L409","name":"Lean.ConstantInfo.levelParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.levelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L405-L406","name":"Lean.ConstantInfo.name","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L401-L403","name":"Lean.ConstantInfo.isPartial","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isPartial","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L391-L399","name":"Lean.ConstantInfo.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L381-L389","name":"Lean.ConstantInfo.toConstantVal","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.toConstantVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L377-L377","name":"Lean.instInhabitedConstantInfo","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L376-L376","name":"Lean.ConstantInfo.recInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.recInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L375-L375","name":"Lean.ConstantInfo.ctorInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.ctorInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L374-L374","name":"Lean.ConstantInfo.inductInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.inductInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L373-L373","name":"Lean.ConstantInfo.quotInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.quotInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L372-L372","name":"Lean.ConstantInfo.opaqueInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.opaqueInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L371-L371","name":"Lean.ConstantInfo.thmInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.thmInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L370-L370","name":"Lean.ConstantInfo.defnInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.defnInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L369-L369","name":"Lean.ConstantInfo.axiomInfo","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.axiomInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L368-L377","name":"Lean.ConstantInfo","kind":"inductive","docLink":"./Lean/Declaration.html#Lean.ConstantInfo","doc":"Information associated with constant declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L365-L365","name":"Lean.QuotVal.kindEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.QuotVal.kindEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L361-L363","name":"Lean.mkQuotValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkQuotValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L358-L358","name":"Lean.instInhabitedQuotVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L357-L357","name":"Lean.QuotVal.kind","kind":"def","docLink":"./Lean/Declaration.html#Lean.QuotVal.kind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L356-L358","name":"Lean.QuotVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.QuotVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L354-L354","name":"Lean.instInhabitedQuotKind","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L353-L353","name":"Lean.QuotKind.ind","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.ind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L352-L352","name":"Lean.QuotKind.lift","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.lift","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L351-L351","name":"Lean.QuotKind.ctor","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.ctor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L350-L350","name":"Lean.QuotKind.type","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotKind.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L349-L354","name":"Lean.QuotKind","kind":"inductive","docLink":"./Lean/Declaration.html#Lean.QuotKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L346-L347","name":"Lean.RecursorVal.getInduct","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getInduct","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L343-L344","name":"Lean.RecursorVal.getFirstMinorIdx","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstMinorIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L340-L341","name":"Lean.RecursorVal.getFirstIndexIdx","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstIndexIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L337-L338","name":"Lean.RecursorVal.getMajorIdx","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getMajorIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L335-L335","name":"Lean.RecursorVal.isUnsafeEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L334-L334","name":"Lean.RecursorVal.kEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.kEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L328-L332","name":"Lean.mkRecursorValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkRecursorValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L325-L325","name":"Lean.instInhabitedRecursorVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L324-L324","name":"Lean.RecursorVal.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L323-L323","name":"Lean.RecursorVal.k","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.k","doc":"It supports K-like reduction.\nA recursor is said to support K-like reduction if one can assume it behaves\nlike `Eq` under axiom `K` --- that is, it has one constructor, the constructor has 0 arguments,\nand it is an inductive predicate (ie, it lives in Prop).\n\nExamples of inductives with K-like reduction is `Eq`, `Acc`, and `And.intro`.\nNon-examples are `exists` (where the constructor has arguments) and\n  `Or.intro` (which has multiple constructors).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L313-L313","name":"Lean.RecursorVal.rules","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.rules","doc":"A reduction for each Constructor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L311-L311","name":"Lean.RecursorVal.numMinors","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numMinors","doc":"Number of minor premises "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L309-L309","name":"Lean.RecursorVal.numMotives","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numMotives","doc":"Number of motives "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L307-L307","name":"Lean.RecursorVal.numIndices","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numIndices","doc":"Number of indices "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L305-L305","name":"Lean.RecursorVal.numParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.numParams","doc":"Number of parameters "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L303-L303","name":"Lean.RecursorVal.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorVal.all","doc":"List of all inductive datatypes in the mutual declaration that generated this recursor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L301-L325","name":"Lean.RecursorVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.RecursorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L299-L299","name":"Lean.instInhabitedRecursorRule","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorRule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L298-L298","name":"Lean.RecursorRule.rhs","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.rhs","doc":"Right hand side of the reduction rule "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L296-L296","name":"Lean.RecursorRule.nfields","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.nfields","doc":"Number of fields (i.e., without counting inductive datatype parameters) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L294-L294","name":"Lean.RecursorRule.ctor","kind":"def","docLink":"./Lean/Declaration.html#Lean.RecursorRule.ctor","doc":"Reduction rule for this Constructor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L292-L299","name":"Lean.RecursorRule","kind":"structure","docLink":"./Lean/Declaration.html#Lean.RecursorRule","doc":"Information for reducing a recursor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L289-L289","name":"Lean.ConstructorVal.isUnsafeEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L278-L287","name":"Lean.mkConstructorValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkConstructorValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L275-L275","name":"Lean.instInhabitedConstructorVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L274-L274","name":"Lean.ConstructorVal.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L273-L273","name":"Lean.ConstructorVal.numFields","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.numFields","doc":"Number of fields (i.e., arity - nparams) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L271-L271","name":"Lean.ConstructorVal.numParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.numParams","doc":"Number of parameters in inductive datatype. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L269-L269","name":"Lean.ConstructorVal.cidx","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.cidx","doc":"Constructor index (i.e., Position in the inductive declaration) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L267-L267","name":"Lean.ConstructorVal.induct","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.induct","doc":"Inductive type this constructor is a member of "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L265-L275","name":"Lean.ConstructorVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.ConstructorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L263-L263","name":"Lean.InductiveVal.numCtors","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numCtors","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L261-L261","name":"Lean.InductiveVal.isNestedEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isNestedEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L260-L260","name":"Lean.InductiveVal.isReflexiveEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isReflexiveEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L259-L259","name":"Lean.InductiveVal.isUnsafeEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L258-L258","name":"Lean.InductiveVal.isRecEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isRecEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L243-L256","name":"Lean.mkInductiveValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkInductiveValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L240-L240","name":"Lean.instInhabitedInductiveVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L239-L239","name":"Lean.InductiveVal.isNested","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isNested","doc":"An inductive definition `T` is nested when there is a constructor with an argument `x : F T`,\nwhere `F : Type → Type` is some suitably behaved (ie strictly positive) function (Eg `Array T`, `List T`, `T × T`, ...). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L236-L236","name":"Lean.InductiveVal.isReflexive","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isReflexive","doc":"An inductive type is called reflexive if it has at least one constructor that takes as an argument a function returning the\nsame type we are defining.\nConsider the type:\n```\ninductive WideTree where\n| branch: (Nat -> WideTree) -> WideTree\n| leaf: WideTree\n```\nthis is reflexive due to the presence of the `branch : (Nat -> WideTree) -> WideTree` constructor.\n\nSee also: 'Inductive Definitions in the system Coq Rules and Properties' by Christine Paulin-Mohring\nSection 2.2, Definition 3\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L222-L222","name":"Lean.InductiveVal.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isUnsafe","doc":"Whether the definition is flagged as unsafe. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L220-L220","name":"Lean.InductiveVal.isRec","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isRec","doc":"`true` when recursive (that is, the inductive type appears as an argument in a constructor). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L218-L218","name":"Lean.InductiveVal.ctors","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.ctors","doc":"List of the names of the constructors for this inductive datatype. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L216-L216","name":"Lean.InductiveVal.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.all","doc":"List of all (including this one) inductive datatypes in the mutual declaration containing this one "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L214-L214","name":"Lean.InductiveVal.numIndices","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numIndices","doc":"Number of indices. An index is an argument that varies over constructors.\n\nAn example of this is the `n : Nat` argument in the vector constructor `cons : α → Vector α n → Vector α (n+1)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L209-L209","name":"Lean.InductiveVal.numParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numParams","doc":"Number of parameters. A parameter is an argument to the defined type that is fixed over constructors.\nAn example of this is the `α : Type` argument in the vector constructors\n`nil : Vector α 0` and `cons : α → Vector α n → Vector α (n+1)`.\n\nThe intuition is that the inductive type must exhibit _parametric polymorphism_ over the inductive\nparameter, as opposed to _ad-hoc polymorphism_.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L201-L240","name":"Lean.InductiveVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.InductiveVal","doc":"The kernel compiles (mutual) inductive declarations (see `inductiveDecls`) into a set of\n- `Declaration.inductDecl` (for each inductive datatype in the mutual Declaration),\n- `Declaration.ctorDecl` (for each Constructor in the mutual Declaration),\n- `Declaration.recDecl` (automatically generated recursors).\n\nThis data is used to implement iota-reduction efficiently and compile nested inductive\ndeclarations.\n\nA series of checks are performed by the kernel to check whether a `inductiveDecls`\nis valid or not. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L188-L189","name":"Lean.Declaration.forExprM","kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.forExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L173-L186","name":"Lean.Declaration.foldExprM","kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.foldExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L169-L171","name":"Lean.Declaration.isUnsafeInductiveDeclEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.Declaration.isUnsafeInductiveDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L165-L166","name":"Lean.mkInductiveDeclEs","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkInductiveDeclEs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L162-L162","name":"Lean.instInhabitedDeclaration","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDeclaration","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L161-L161","name":"Lean.Declaration.inductDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.inductDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L160-L160","name":"Lean.Declaration.mutualDefnDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.mutualDefnDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L159-L159","name":"Lean.Declaration.quotDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.quotDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L158-L158","name":"Lean.Declaration.opaqueDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.opaqueDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L157-L157","name":"Lean.Declaration.thmDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.thmDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L156-L156","name":"Lean.Declaration.defnDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.defnDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L155-L155","name":"Lean.Declaration.axiomDecl","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Declaration.axiomDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L154-L162","name":"Lean.Declaration","kind":"inductive","docLink":"./Lean/Declaration.html#Lean.Declaration","doc":"Declaration object that can be sent to the kernel. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L151-L151","name":"Lean.instInhabitedInductiveType","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L150-L150","name":"Lean.InductiveType.ctors","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.ctors","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L149-L149","name":"Lean.InductiveType.type","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L148-L148","name":"Lean.InductiveType.name","kind":"def","docLink":"./Lean/Declaration.html#Lean.InductiveType.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L147-L151","name":"Lean.InductiveType","kind":"structure","docLink":"./Lean/Declaration.html#Lean.InductiveType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L145-L145","name":"Lean.instInhabitedConstructor","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L144-L144","name":"Lean.Constructor.type","kind":"def","docLink":"./Lean/Declaration.html#Lean.Constructor.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L143-L143","name":"Lean.Constructor.name","kind":"def","docLink":"./Lean/Declaration.html#Lean.Constructor.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L142-L145","name":"Lean.Constructor","kind":"structure","docLink":"./Lean/Declaration.html#Lean.Constructor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L139-L140","name":"Lean.OpaqueVal.isUnsafeEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L135-L137","name":"Lean.mkOpaqueValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkOpaqueValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L132-L132","name":"Lean.instInhabitedOpaqueVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedOpaqueVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L131-L131","name":"Lean.OpaqueVal.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nSee comment at `DefinitionVal.all`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L127-L127","name":"Lean.OpaqueVal.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L126-L126","name":"Lean.OpaqueVal.value","kind":"def","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L125-L132","name":"Lean.OpaqueVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.OpaqueVal","doc":"Value for an opaque constant declaration `opaque x : t := e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L122-L122","name":"Lean.instInhabitedTheoremVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedTheoremVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L121-L121","name":"Lean.TheoremVal.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.TheoremVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nSee comment at `DefinitionVal.all`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L117-L117","name":"Lean.TheoremVal.value","kind":"def","docLink":"./Lean/Declaration.html#Lean.TheoremVal.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L116-L122","name":"Lean.TheoremVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.TheoremVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L113-L114","name":"Lean.DefinitionVal.getSafetyEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.getSafetyEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L109-L111","name":"Lean.mkDefinitionValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkDefinitionValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L106-L106","name":"Lean.instInhabitedDefinitionVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L105-L105","name":"Lean.DefinitionVal.all","kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.all","doc":"List of all (including this one) declarations in the same mutual block.\nNote that this information is not used by the kernel, and is only used\nto save the information provided by the user when using mutual blocks.\nRecall that the Lean kernel does not support recursive definitions and they\nare compiled using recursors and `WellFounded.fix`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L97-L97","name":"Lean.DefinitionVal.safety","kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.safety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L96-L96","name":"Lean.DefinitionVal.hints","kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.hints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L95-L95","name":"Lean.DefinitionVal.value","kind":"def","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L94-L106","name":"Lean.DefinitionVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.DefinitionVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L92-L92","name":"Lean.instReprDefinitionSafety","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instReprDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L92-L92","name":"Lean.instBEqDefinitionSafety","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instBEqDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L92-L92","name":"Lean.instInhabitedDefinitionSafety","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.partial","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.partial","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.safe","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.safe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L91-L91","name":"Lean.DefinitionSafety.unsafe","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety.unsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L90-L92","name":"Lean.DefinitionSafety","kind":"inductive","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L87-L88","name":"Lean.AxiomVal.isUnsafeEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.AxiomVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L80-L85","name":"Lean.mkAxiomValEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkAxiomValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L77-L77","name":"Lean.instInhabitedAxiomVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedAxiomVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L76-L76","name":"Lean.AxiomVal.isUnsafe","kind":"def","docLink":"./Lean/Declaration.html#Lean.AxiomVal.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L75-L77","name":"Lean.AxiomVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.AxiomVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L73-L73","name":"Lean.instInhabitedConstantVal","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L72-L72","name":"Lean.ConstantVal.type","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L71-L71","name":"Lean.ConstantVal.levelParams","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.levelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L70-L70","name":"Lean.ConstantVal.name","kind":"def","docLink":"./Lean/Declaration.html#Lean.ConstantVal.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L69-L73","name":"Lean.ConstantVal","kind":"structure","docLink":"./Lean/Declaration.html#Lean.ConstantVal","doc":"Base structure for `AxiomVal`, `DefinitionVal`, `TheoremVal`, `InductiveVal`, `ConstructorVal`, `RecursorVal` and `QuotVal`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L62-L64","name":"Lean.ReducibilityHints.isRegular","kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isRegular","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L58-L60","name":"Lean.ReducibilityHints.isAbbrev","kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isAbbrev","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L51-L56","name":"Lean.ReducibilityHints.lt","kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L44-L47","name":"Lean.ReducibilityHints.getHeightEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.getHeightEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L40-L41","name":"Lean.mkReducibilityHintsRegularEx","kind":"def","docLink":"./Lean/Declaration.html#Lean.mkReducibilityHintsRegularEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L37-L37","name":"Lean.instInhabitedReducibilityHints","kind":"instance","docLink":"./Lean/Declaration.html#Lean.instInhabitedReducibilityHints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L36-L36","name":"Lean.ReducibilityHints.regular","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.regular","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L35-L35","name":"Lean.ReducibilityHints.abbrev","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.abbrev","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L34-L34","name":"Lean.ReducibilityHints.opaque","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.opaque","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L33-L37","name":"Lean.ReducibilityHints","kind":"inductive","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints","doc":"Reducibility hints are used in the convertibility checker.\nWhen trying to solve a constraint such a\n\n           (f ...) =?= (g ...)\n\nwhere f and g are definitions, the checker has to decide which one will be unfolded.\n  If      f (g) is opaque,     then g (f) is unfolded if it is also not marked as opaque,\n  Else if f (g) is abbrev,     then f (g) is unfolded if g (f) is also not marked as abbrev,\n  Else if f and g are regular, then we unfold the one with the biggest definitional height.\n  Otherwise both are unfolded.\n\nThe arguments of the `regular` Constructor are: the definitional height and the flag `selfOpt`.\n\nThe definitional height is by default computed by the kernel. It only takes into account\nother regular definitions used in a definition. When creating declarations using meta-programming,\nwe can specify the definitional depth manually.\n\nRemark: the hint only affects performance. None of the hints prevent the kernel from unfolding a\ndeclaration during Type checking.\n\nRemark: the ReducibilityHints are not related to the attributes: reducible/irrelevance/semireducible.\nThese attributes are used by the Elaborator. The ReducibilityHints are used by the kernel (and Elaborator).\nMoreover, the ReducibilityHints cannot be changed after a declaration is added to the kernel. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.OpaqueVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.ConstructorVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.DefinitionVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.InductiveType.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.InductiveType.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.ConstantVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.ConstantVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.Constructor.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.Constructor.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.TheoremVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.TheoremVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.AxiomVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.AxiomVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.QuotVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.QuotVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.InductiveVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.InductiveVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.RecursorVal.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.RecursorVal.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Declaration.lean#L1-L1","name":"Lean.RecursorRule.mk","kind":"ctor","docLink":"./Lean/Declaration.html#Lean.RecursorRule.mk","doc":""}]}