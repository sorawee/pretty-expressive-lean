{"name":"Lean.Compiler.LCNF.LambdaLifting","instances":[],"imports":["Init","Lean.Meta.Instances","Lean.Compiler.InlineAttrs","Lean.Compiler.LCNF.Closure","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.MonadScope","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Level","Lean.Compiler.LCNF.AuxDeclCache"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L174-L190","name":"Lean.Compiler.LCNF.eagerLambdaLifting","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.eagerLambdaLifting","doc":"During eager lambda lifting, we lift\n- All local function declarations from instances (motivation: make sure it is cheap to inline them later)\n- Local function declarations that take local instances as parameters (motivation: ensure they are specialized)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L163-L167","name":"Lean.Compiler.LCNF.lambdaLifting","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.lambdaLifting","doc":"Eliminate all local function declarations.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L156-L158","name":"Lean.Compiler.LCNF.Decl.lambdaLifting","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.Decl.lambdaLifting","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L150-L152","name":"Lean.Compiler.LCNF.LambdaLifting.main","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L121-L147","name":"Lean.Compiler.LCNF.LambdaLifting.visitCode","kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L117-L119","name":"Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L108-L114","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl.go","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L88-L114","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","doc":"Create a new auxiliary declaration. The array `closure` contains all free variables\noccurring in `decl`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L77-L81","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L68-L75","name":"Lean.Compiler.LCNF.LambdaLifting.shouldLift","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.shouldLift","doc":"Return `true` if the given declaration should be lambda lifted.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L62-L63","name":"Lean.Compiler.LCNF.LambdaLifting.hasInstParam","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.hasInstParam","doc":"Return `true` if the given declaration takes a local instance as a parameter.\nWe lambda lift this kind of local function declaration before specialization.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L56-L56","name":"Lean.Compiler.LCNF.LambdaLifting.LiftM","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM","doc":"Monad for applying lambda lifting. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L53-L53","name":"Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","doc":"Next index for generating auxiliary declaration name.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L49-L49","name":"Lean.Compiler.LCNF.LambdaLifting.State.decls","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.decls","doc":"New auxiliary declarations\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L45-L53","name":"Lean.Compiler.LCNF.LambdaLifting.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State","doc":"State for the `LiftM` monad. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L41-L41","name":"Lean.Compiler.LCNF.LambdaLifting.Context.minSize","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.minSize","doc":"Only local functions with `size > minSize` are lambda lifted.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L36-L36","name":"Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","doc":"If true, the lambda-lifted functions inherit the inline attribute from `mainDecl`.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L31-L31","name":"Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","doc":"Declaration where lambda lifting is being applied.\nWe use it to provide the \"base name\" for auxiliary declarations and the flag `safe`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L26-L26","name":"Lean.Compiler.LCNF.LambdaLifting.Context.suffix","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.suffix","doc":"Suffix for the new auxiliary declarations being created. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L24-L24","name":"Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","doc":"If `liftInstParamOnly` is `true`, then only local functions that take\nlocal instances as parameters are lambda lifted.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L19-L41","name":"Lean.Compiler.LCNF.LambdaLifting.Context","kind":"structure","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context","doc":"Context for the `LiftM` monad. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L1-L1","name":"Lean.Compiler.LCNF.LambdaLifting.Context.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/LambdaLifting.lean#L1-L1","name":"Lean.Compiler.LCNF.LambdaLifting.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.mk","doc":""}]}