{"name":"Lean.Meta.Tactic.Simp.SimpTheorems","instances":[{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instInhabitedOrigin","className":"Inhabited"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instReprOrigin","className":"Repr"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instBEqOrigin","className":"BEq"},{"typeNames":["Lean.Meta.Origin"],"name":"Lean.Meta.instHashableOrigin","className":"Hashable"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instInhabitedSimpTheorem","className":"Inhabited"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instToFormatSimpTheorem","className":"Std.ToFormat"},{"typeNames":["Lean.Meta.SimpTheorem"],"name":"Lean.Meta.instBEqSimpTheorem","className":"BEq"},{"typeNames":["Lean.Meta.SimpTheorems"],"name":"Lean.Meta.instInhabitedSimpTheorems","className":"Inhabited"},{"typeNames":["Lean.Meta.SimpEntry"],"name":"Lean.Meta.instInhabitedSimpEntry","className":"Inhabited"}],"imports":["Init","Lean.ScopedEnvExtension","Lean.Util.Recognizers","Lean.Meta.DiscrTree","Lean.Meta.AppBuilder","Lean.Meta.Eqns","Lean.Meta.Tactic.AuxLemma","Lean.DocString"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L469-L475","name":"Lean.Parser.Command.registerSimpAttr","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Parser.Command.registerSimpAttr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L466-L467","name":"Lean.Meta.SimpTheoremsArray.isDeclToUnfold","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isDeclToUnfold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L463-L464","name":"Lean.Meta.SimpTheoremsArray.isErased","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.isErased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L460-L461","name":"Lean.Meta.SimpTheoremsArray.eraseTheorem","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.eraseTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L453-L458","name":"Lean.Meta.SimpTheoremsArray.addTheorem","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray.addTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L451-L451","name":"Lean.Meta.SimpTheoremsArray","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L440-L449","name":"Lean.Meta.SimpTheorems.addDeclToUnfold","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L433-L438","name":"Lean.Meta.SimpTheorems.add","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.add","doc":"Auxiliary method for adding a local simp theorem to a `SimpTheorems` datastructure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L428-L430","name":"Lean.Meta.mkSimpTheorems","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpTheorems","doc":"Auxiliary method for creating simp theorems from a proof term `val`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L410-L419","name":"Lean.Meta.SimpTheorem.getValue","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.getValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L405-L408","name":"Lean.Meta.SimpTheorems.addConst","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addConst","doc":"Auxiliary method for adding a global declaration to a `SimpTheorems` datastructure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L401-L402","name":"Lean.Meta.getSimpTheorems","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpTheorems","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L398-L399","name":"Lean.Meta.getSimpExtension?","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.getSimpExtension?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L396-L396","name":"Lean.Meta.simpExtension","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L389-L394","name":"Lean.Meta.registerSimpAttr","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.registerSimpAttr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L387-L387","name":"Lean.Meta.simpExtensionMapRef","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.simpExtensionMapRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L385-L385","name":"Lean.Meta.SimpExtensionMap","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtensionMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L374-L383","name":"Lean.Meta.mkSimpExt","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L342-L372","name":"Lean.Meta.mkSimpAttr","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.mkSimpAttr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L337-L340","name":"Lean.Meta.addSimpTheorem","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L334-L335","name":"Lean.Meta.SimpExtension.getTheorems","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension.getTheorems","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L332-L332","name":"Lean.Meta.SimpExtension","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L330-L330","name":"Lean.Meta.instInhabitedSimpEntry","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L329-L329","name":"Lean.Meta.SimpEntry.toUnfoldThms","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfoldThms","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L328-L328","name":"Lean.Meta.SimpEntry.toUnfold","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.toUnfold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L327-L327","name":"Lean.Meta.SimpEntry.thm","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry.thm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L326-L330","name":"Lean.Meta.SimpEntry","kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L198-L205","name":"Lean.Meta.SimpTheorems.erase","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L187-L196","name":"Lean.Meta.SimpTheorems.eraseCore","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.eraseCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L184-L185","name":"Lean.Meta.SimpTheorems.registerDeclToUnfoldThms","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.registerDeclToUnfoldThms","doc":"Register the equational theorems for the given definition. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L180-L181","name":"Lean.Meta.SimpTheorems.isLemma","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isLemma","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L177-L178","name":"Lean.Meta.SimpTheorems.isDeclToUnfold","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.isDeclToUnfold","doc":"Return `true` if `declName` is tagged to be unfolded using `unfoldDefinition?` (i.e., without using equational theorems). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L173-L174","name":"Lean.Meta.SimpTheorems.addDeclToUnfoldCore","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.addDeclToUnfoldCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L170-L171","name":"Lean.Meta.addSimpTheoremEntry.updateLemmaNames","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry.updateLemmaNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L164-L171","name":"Lean.Meta.addSimpTheoremEntry","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.addSimpTheoremEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L162-L162","name":"Lean.Meta.instInhabitedSimpTheorems","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorems","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L161-L161","name":"Lean.Meta.SimpTheorems.toUnfoldThms","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfoldThms","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L160-L160","name":"Lean.Meta.SimpTheorems.erased","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.erased","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L159-L159","name":"Lean.Meta.SimpTheorems.toUnfold","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.toUnfold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L158-L158","name":"Lean.Meta.SimpTheorems.lemmaNames","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.lemmaNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L157-L157","name":"Lean.Meta.SimpTheorems.post","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.post","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L156-L156","name":"Lean.Meta.SimpTheorems.pre","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.pre","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L155-L162","name":"Lean.Meta.SimpTheorems","kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L153-L153","name":"Lean.Meta.SimpTheoremTree","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L150-L151","name":"Lean.Meta.instBEqSimpTheorem","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqSimpTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L144-L148","name":"Lean.Meta.ppSimpTheorem","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppSimpTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L138-L142","name":"Lean.Meta.ppOrigin","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.ppOrigin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L131-L136","name":"Lean.Meta.instToFormatSimpTheorem","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instToFormatSimpTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L125-L129","name":"Lean.Meta.isRflProof","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProof","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L120-L122","name":"Lean.Meta.isRflTheorem","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L98-L118","name":"Lean.Meta.isRflProofCore","kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.isRflProofCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L95-L95","name":"Lean.Meta.instInhabitedSimpTheorem","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedSimpTheorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L94-L94","name":"Lean.Meta.SimpTheorem.rfl","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.rfl","doc":"`rfl` is true if `proof` is by `Eq.refl` or `rfl`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L92-L92","name":"Lean.Meta.SimpTheorem.origin","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.origin","doc":"`origin` is mainly relevant for producing trace messages.\nIt is also viewed an `id` used to \"erase\" `simp` theorems from `SimpTheorems`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L87-L87","name":"Lean.Meta.SimpTheorem.perm","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.perm","doc":"`perm` is true if lhs and rhs are identical modulo permutation of variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L85-L85","name":"Lean.Meta.SimpTheorem.post","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.post","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L84-L84","name":"Lean.Meta.SimpTheorem.priority","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.priority","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L83-L83","name":"Lean.Meta.SimpTheorem.proof","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.proof","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L82-L82","name":"Lean.Meta.SimpTheorem.levelParams","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.levelParams","doc":"It stores universe parameter names for universe polymorphic proofs.\nRecall that it is non-empty only when we elaborate an expression provided by the user.\nWhen `proof` is just a constant, we can use the universe parameter names stored in the declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L76-L76","name":"Lean.Meta.SimpTheorem.keys","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.keys","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L75-L95","name":"Lean.Meta.SimpTheorem","kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem","doc":"The fields `levelParams` and `proof` are used to encode the proof of the simp theorem.\nIf the `proof` is a global declaration `c`, we store `Expr.const c []` at `proof` without the universe levels, and `levelParams` is set to `#[]`\nWhen using the lemma, we create fresh universe metavariables.\nMotivation: most simp theorems are global declarations, and this approach is faster and saves memory.\n\nThe field `levelParams` is not empty only when we elaborate an expression provided by the user, and it contains universe metavariables.\nThen, we use `abstractMVars` to abstract the universe metavariables and create new fresh universe parameters that are stored at the field `levelParams`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L64-L64","name":"Lean.Meta.SimpTheoremKey","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L51-L51","name":"Lean.Meta.instHashableOrigin","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instHashableOrigin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L50-L50","name":"Lean.Meta.instBEqOrigin","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instBEqOrigin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L44-L48","name":"Lean.Meta.Origin.key","kind":"def","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.key","doc":"A unique identifier corresponding to the origin. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L41-L41","name":"Lean.Meta.instReprOrigin","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instReprOrigin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L41-L41","name":"Lean.Meta.instInhabitedOrigin","kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.instInhabitedOrigin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L35-L40","name":"Lean.Meta.Origin.other","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.other","doc":"Some other origin. `name` should not collide with the other types\nfor erasure to work correctly, and simp trace will ignore this lemma.\nThe other origins should be preferred if possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L29-L34","name":"Lean.Meta.Origin.stx","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.stx","doc":"A proof term provided directly to a call to `simp [ref, ...]` where `ref`\nis the provided simp argument (of kind `Parser.Tactic.simpLemma`).\nThe `id` is a unique identifier for the call.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L22-L28","name":"Lean.Meta.Origin.fvar","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.fvar","doc":"A local hypothesis.\nWhen `contextual := true` is enabled, this fvar may exist in an extension\nof the current local context; it will not be used for rewriting by simp once\nit is out of scope but it may end up in the `usedSimps` trace.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L20-L21","name":"Lean.Meta.Origin.decl","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin.decl","doc":"A global declaration in the environment. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L19-L41","name":"Lean.Meta.Origin","kind":"inductive","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin","doc":"An `Origin` is an identifier for simp theorems which indicates roughly\nwhat action the user took which lead to this theorem existing in the simp set.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L1-L1","name":"Lean.Meta.SimpTheorems.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Tactic/Simp/SimpTheorems.lean#L1-L1","name":"Lean.Meta.SimpTheorem.mk","kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem.mk","doc":""}]}