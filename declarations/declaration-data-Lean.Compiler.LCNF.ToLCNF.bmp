{"name":"Lean.Compiler.LCNF.ToLCNF","instances":[{"typeNames":["Lean.Compiler.LCNF.ToLCNF.Element"],"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","className":"Inhabited"}],"imports":["Init","Lean.ProjFns","Lean.Compiler.BorrowedAnnotation","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Util"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L739-L752","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L734-L737","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L728-L732","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitMData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L692-L726","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L660-L690","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L645-L658","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitProjFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L635-L643","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.expandNoConfusionMajor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L610-L633","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitNoConfusion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L600-L608","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAndIffRecCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L594-L598","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitFalseRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L586-L592","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitEqRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L571-L584","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitQuotLift","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L567-L569","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L537-L565","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCases","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L508-L535","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAlt","doc":"Visit a `matcher`/`casesOn` alternative.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L493-L503","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.mkOverApplication","doc":"If `args.size == arity`, then just return `app`.\nOtherwise return\n```\nlet k := app\nk args[arity:]\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L478-L483","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.etaIfUnderApplied","doc":"Eta expand if under applied, otherwise apply k "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L472-L475","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppDefaultConst","doc":"Giving `f` a constant `.const declName us`, convert `args` into `args'`, and return `.const declName us args'` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L454-L469","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitAppArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L451-L452","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L435-L449","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L419-L433","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF.visitCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L416-L752","name":"Lean.Compiler.LCNF.ToLCNF.toLCNF","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF","doc":"Put the given expression in `LCNF`.\n\n- Nested proofs are replaced with `lcProof`-applications.\n- Eta-expand applications of declarations that satisfy `shouldEtaExpand`.\n- Put computationally relevant expressions in A-normal form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L404-L407","name":"Lean.Compiler.LCNF.ToLCNF.litToValue","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L388-L402","name":"Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","doc":"Eta reduce implicits. We use this function to eliminate introduced by the implicit lambda feature,\nwhere it generates terms such as `fun {Î±} => ReaderT.pure`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L377-L382","name":"Lean.Compiler.LCNF.ToLCNF.etaExpandN","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN","doc":"Eta-expand with `n` lambdas.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L366-L372","name":"Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L356-L364","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L353-L364","name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L345-L351","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda.go","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L342-L351","name":"Lean.Compiler.LCNF.ToLCNF.visitLambda","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L330-L340","name":"Lean.Compiler.LCNF.ToLCNF.mkLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L322-L328","name":"Lean.Compiler.LCNF.ToLCNF.mkParam","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam","doc":"Create a new local declaration using a Lean regular type. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L314-L319","name":"Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L305-L312","name":"Lean.Compiler.LCNF.ToLCNF.toLCNFType","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L299-L303","name":"Lean.Compiler.LCNF.ToLCNF.applyToAny","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L280-L292","name":"Lean.Compiler.LCNF.ToLCNF.withNewScope","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L247-L248","name":"Lean.Compiler.LCNF.ToLCNF.run","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L240-L245","name":"Lean.Compiler.LCNF.ToLCNF.toCode","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode","doc":"Create `Code` that executes the current `seq` and then returns `result` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L236-L237","name":"Lean.Compiler.LCNF.ToLCNF.letValueToArg","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L228-L234","name":"Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L223-L226","name":"Lean.Compiler.LCNF.ToLCNF.mkUnreachable","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L220-L221","name":"Lean.Compiler.LCNF.ToLCNF.pushElement","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement","doc":"Add LCNF element to the current sequence "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L216-L217","name":"Lean.Compiler.LCNF.ToLCNF.liftMetaM","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L214-L214","name":"Lean.Compiler.LCNF.ToLCNF.M","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L212-L212","name":"Lean.Compiler.LCNF.ToLCNF.State.toAny","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny","doc":"Fields that are type formers must be replaced with `â¾`\nin the resulting code. Otherwise, we have data occurring in\ntypes.\nWhen converting a `casesOn` into LCNF, we add constructor fields\nthat are types and type formers into this set. See `visitCases`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L204-L204","name":"Lean.Compiler.LCNF.ToLCNF.State.seq","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq","doc":"LCNF sequence, we chain it to create a LCNF `Code` object. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L202-L202","name":"Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","doc":"isTypeFormerType cache "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L200-L200","name":"Lean.Compiler.LCNF.ToLCNF.State.typeCache","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache","doc":"`toLCNFType` cache "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L198-L198","name":"Lean.Compiler.LCNF.ToLCNF.State.cache","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache","doc":"Cache from Lean regular expression to LCNF argument. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L196-L196","name":"Lean.Compiler.LCNF.ToLCNF.State.lctx","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx","doc":"Local context containing the original Lean types (not LCNF ones). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L194-L212","name":"Lean.Compiler.LCNF.ToLCNF.State","kind":"structure","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L154-L192","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode.go","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L151-L192","name":"Lean.Compiler.LCNF.ToLCNF.seqToCode","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L78-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.go","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L70-L76","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.findFun?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L67-L68","name":"Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases.visitAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L60-L149","name":"Lean.Compiler.LCNF.ToLCNF.bindCases","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases","doc":"This method returns code that at each exit point of `cases`, it jumps to `jpDecl`.\nIt is similar to `Code.bind`, but we add special support for `inlineMatcher`.\nThe `inlineMatcher` function inlines the auxiliary `_match_<idx>` declarations.\nTo make sure there is no code duplication, `inlineMatcher` creates auxiliary declarations `_alt.<idx>`.\nWe can say the `_alt.<idx>` declarations are pre join points. For each auxiliary declaration used at\nan exit point of `cases`, this method creates an new auxiliary join point that invokes `_alt.<idx>`,\nand then jumps to `jpDecl`. The goal is to make sure the auxiliary join point is the only occurrence\nof `_alt.<idx>`, then `simp` will inline it.\nThat is, our goal is to try to promote the pre join points `_alt.<idx>` into a proper join point.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L47-L47","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM","doc":"Auxiliary monad for implementing `bindCases` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L44-L44","name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","doc":"State for `BindCasesM` monad\nMapping from `_alt.<idx>` variables to new join points\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L38-L38","name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","kind":"instance","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L37-L37","name":"Lean.Compiler.LCNF.ToLCNF.Element.unreach","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L36-L36","name":"Lean.Compiler.LCNF.ToLCNF.Element.cases","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L35-L35","name":"Lean.Compiler.LCNF.ToLCNF.Element.let","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L34-L34","name":"Lean.Compiler.LCNF.ToLCNF.Element.fun","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L33-L33","name":"Lean.Compiler.LCNF.ToLCNF.Element.jp","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L32-L38","name":"Lean.Compiler.LCNF.ToLCNF.Element","kind":"inductive","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element","doc":"Auxiliary inductive datatype for constructing LCNF `Code` objects.\nThe `toLCNF` function maintains a sequence of elements that is eventually\nconverted into `Code`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L24-L25","name":"Lean.Compiler.LCNF.ToLCNF.mkLcProof","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof","doc":"Create the temporary `lcProof` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L20-L21","name":"Lean.Compiler.LCNF.ToLCNF.isLCProof","kind":"def","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof","doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/ToLCNF.lean#L1-L1","name":"Lean.Compiler.LCNF.ToLCNF.State.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk","doc":""}]}