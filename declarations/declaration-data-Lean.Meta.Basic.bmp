{"name":"Lean.Meta.Basic","instances":[{"typeNames":["Lean.Meta.ParamInfo"],"name":"Lean.Meta.instInhabitedParamInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.instInhabitedInfoCacheKey","className":"Inhabited"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.instBEqInfoCacheKey","className":"BEq"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","className":"Hashable"},{"typeNames":["Lean.Meta.Cache"],"name":"Lean.Meta.instInhabitedCache","className":"Inhabited"},{"typeNames":["Lean.Meta.PostponedEntry"],"name":"Lean.Meta.instInhabitedPostponedEntry","className":"Inhabited"},{"typeNames":["Lean.Meta.State"],"name":"Lean.Meta.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.SavedState"],"name":"Lean.Meta.instNonemptySavedState","className":"Nonempty"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadMetaM","className":"Monad"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instInhabitedMetaM","className":"Inhabited"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadLCtxMetaM","className":"Lean.MonadLCtx"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadMCtxMetaM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadEnvMetaM","className":"Lean.MonadEnv"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instAddMessageContextMetaM","className":"Lean.AddMessageContext"},{"typeNames":["Lean.Meta.SavedState","Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadBacktrackSavedStateMetaM","className":"Lean.MonadBacktrack"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMetaEvalMetaM","className":"Lean.MetaEval"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instOrElseMetaM","className":"OrElse"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instAlternativeMetaM","className":"Alternative"}],"imports":["Init","Lean.Data.LOption","Lean.Environment","Lean.Class","Lean.ReducibilityAttrs","Lean.Util.ReplaceExpr","Lean.Util.MonadBacktrack","Lean.Compiler.InlineAttrs","Lean.Meta.TransparencyMode"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1684-L1685","name":"Lean.Meta.etaExpand","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.etaExpand","doc":"Eta expand the given expression.\nExample:\n```\netaExpand (mkConst ``Nat.add)\n```\nproduces `fun x y => Nat.add x y`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1673-L1674","name":"Lean.Meta.isDefEqNoConstantApprox","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqNoConstantApprox","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1670-L1671","name":"Lean.Meta.isDefEqGuarded","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqGuarded","doc":"Similar to `isDefEq`, but returns `false` if an exception has been thrown. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1666-L1667","name":"Lean.Meta.isExprDefEqGuarded","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEqGuarded","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1663-L1664","name":"Lean.Meta.isDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEq","doc":"Determines whether two expressions are definitionally equal to each other.\n\nTo control how metavariables are assigned and unified, metavariables and their context have a \"depth\".\nGiven a metavariable `?m` and a `MetavarContext` `mctx`, `?m` is not assigned if `?m.depth != mctx.depth`.\nThe combinator `withNewMCtxDepth x` will bump the depth while executing `x`.\nSo, `withNewMCtxDepth (isDefEq a b)` is `isDefEq` without any mvar assignment happening\nwhereas `isDefEq a b` will assign any metavariables of the current depth in `a` and `b` to unify them.\n\nFor matching (where only mvars in `b` should be assigned), we create the term inside the `withNewMCtxDepth`.\nFor an example, see [Lean.Meta.Simp.tryTheoremWithExtraArgs?](https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L100-L106)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1647-L1649","name":"Lean.Meta.isExprDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEq","doc":"See `isDefEq`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1643-L1644","name":"Lean.Meta.isLevelDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isLevelDefEq","doc":"Determines whether two universe level expressions are definitionally equal to each other.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1611-L1638","name":"Lean.Meta.checkpointDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.checkpointDefEq","doc":"`checkpointDefEq x` executes `x` and process all postponed universe level constraints produced by `x`.\nWe keep the modifications only if `processPostponed` return true and `x` returned `true`.\n\nIf `mayPostpone == false`, all new postponed universe level constraints must be solved before returning.\nWe currently try to postpone universe constraints as much as possible, even when by postponing them we\nare not sure whether `x` really succeeded or not.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1585-L1600","name":"Lean.Meta.processPostponed.loop","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.processPostponed.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1578-L1601","name":"Lean.Meta.processPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.processPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1564-L1565","name":"Lean.Meta.mkLevelErrorMessage","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLevelErrorMessage","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1561-L1562","name":"Lean.Meta.mkLevelStuckErrorMessage","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLevelStuckErrorMessage","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1533-L1536","name":"Lean.Meta.getResetPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getResetPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1530-L1531","name":"Lean.Meta.getNumPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getNumPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1525-L1528","name":"Lean.Meta.isListLevelDefEqAux","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isListLevelDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1516-L1523","name":"Lean.Meta.isInductivePredicate","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isInductivePredicate","doc":"Return `true` if `declName` is an inductive predicate. That is, `inductive` type in `Prop`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1504-L1511","name":"Lean.Meta.sortFVarIds","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.sortFVarIds","doc":"Sort free variables using an order `x < y` iff `x` was defined before `y`.\nIf a free variable is not in the local context, we use their id. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1498-L1499","name":"Lean.Meta.mapError","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1491-L1496","name":"Lean.Meta.mapErrorImp","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapErrorImp","doc":"Execute `x`, and apply `f` to the produced error message "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1485-L1488","name":"Lean.Meta.orelseMergeErrors","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.orelseMergeErrors","doc":"Similar to `orelse`, but merge errors. Note that internal errors are not caught.\nThe default `mergeRef` uses the `ref` (position information) for the first message.\nThe default `mergeMsg` combines error messages using `Format.line ++ Format.line` as a separator. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1458-L1460","name":"Lean.Meta.instAlternativeMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instAlternativeMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1456-L1456","name":"Lean.Meta.instOrElseMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instOrElseMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1452-L1454","name":"Lean.Meta.orElse","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.orElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1450-L1450","name":"Lean.Meta.ppExpr","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ppExpr","doc":"Pretty-print the given expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1445-L1447","name":"Lean.Meta.ppExprWithInfos","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ppExprWithInfos","doc":"Pretty-print the given expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1441-L1442","name":"Lean.Meta.instantiateLambda","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instantiateLambda","doc":"Given `e` of the form `fun (a_1 : A_1) ... (a_n : A_n) => t[a_1, ..., a_n]` and `p_1 : A_1, ... p_n : A_n`, return `t[p_1, ..., p_n]`.\nIt uses `whnf` to reduce `e` if it is not a lambda "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1427-L1428","name":"Lean.Meta.instantiateForall","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instantiateForall","doc":"Given `e` of the form `forall (a_1 : A_1) ... (a_n : A_n), B[a_1, ..., a_n]` and `p_1 : A_1, ... p_n : A_n`, return `B[p_1, ..., p_n]`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1411-L1415","name":"Lean.Meta.setInlineAttribute","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setInlineAttribute","doc":"Mark declaration `declName` with the attribute `[inline]`.\nThis method does not check whether the given declaration is a definition.\n\nRecall that this attribute can only be set in the same module where `declName` has been declared.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1402-L1403","name":"Lean.Meta.whnfI","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfI","doc":"`whnf` with instances transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1398-L1399","name":"Lean.Meta.whnfD","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfD","doc":"`whnf` with default transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1394-L1395","name":"Lean.Meta.whnfR","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfR","doc":"`whnf` with reducible transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1389-L1391","name":"Lean.Meta.normalizeLevel","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.normalizeLevel","doc":"Instantiate assigned universe metavariables in `u`, and then normalize it. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1385-L1386","name":"Lean.Meta.fullApproxDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.fullApproxDefEq","doc":"Similar to `approxDefEq`, but uses all available approximations.\nWe don't use `constApprox` by default at `approxDefEq` because it often produces undesirable solution for monadic code.\nFor example, suppose we have `pure (x > 0)` which has type `?m Prop`. We also have the goal `[Pure ?m]`.\nNow, assume the expected type is `IO Bool`. Then, the unification constraint `?m Prop =?= IO Bool` could be solved\nas `?m := fun _ => IO Bool` using `constApprox`, but this spurious solution would generate a failure when we try to\nsolve `[Pure (fun _ => IO Bool)]` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1372-L1373","name":"Lean.Meta.approxDefEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.approxDefEq","doc":"Execute `x` using approximate unification: `foApprox`, `ctxApprox` and `quasiPatternApprox`.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1365-L1366","name":"Lean.Meta.withMCtx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withMCtx","doc":"`withMCtx mctx k` replaces the metavariable context and then executes `k`.\nThe metavariable context is restored after executing `k`.\n\nThis method is used to implement the type class resolution procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1352-L1353","name":"Lean.Meta.withMVarContext","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withMVarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1348-L1349","name":"Lean.MVarId.withContext","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.withContext","doc":"Execute `x` using the given metavariable `LocalContext` and `LocalInstances`.\nThe type class resolution cache is flushed when executing `x` if its `LocalInstances` are\ndifferent from the current ones. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1337-L1338","name":"Lean.Meta.withLCtx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLCtx","doc":"`withLCtx lctx localInsts k` replaces the local context and local instances, and then executes `k`.\nThe local context and instances are restored after executing `k`.\nThis method assumes that the local instances in `localInsts` are in the local context `lctx`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1321-L1322","name":"Lean.Meta.withNewMCtxDepth","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewMCtxDepth","doc":"`withNewMCtxDepth k` executes `k` with a higher metavariable context depth,\nwhere metavariables created outside the `withNewMCtxDepth` (with a lower depth) cannot be assigned.\nIf `allowLevelAssignments` is set to true, then the level metavariable depth\nis not increased, and level metavariables from the outer scope can be\nassigned.  (This is used by TC synthesis.)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1303-L1304","name":"Lean.Meta.withExistingLocalDecls","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withExistingLocalDecls","doc":"`withExistingLocalDecls decls k`, adds the given local declarations to the local context,\nand then executes `k`. This method assumes declarations in `decls` have valid `FVarId`s.\nAfter executing `k`, the local context is restored.\n\nRemark: this method is used, for example, to implement the `match`-compiler.\nEach `match`-alternative commes with a local declarations (corresponding to pattern variables),\nand we use `withExistingLocalDecls` to add them to the local context before we process\nthem.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1284-L1285","name":"Lean.Meta.withLocalInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalInstances","doc":"Register any local instance in `decls` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1271-L1281","name":"Lean.Meta.withLocalInstancesImp","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalInstancesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1268-L1269","name":"Lean.Meta.withLetDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLetDecl","doc":"Add the local declaration `<name> : <type> := <val>` to the local context and execute `k x`, where `x` is a new\nfree variable corresponding to the `let`-declaration. After executing `k x`, the local context is restored.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1247-L1254","name":"Lean.Meta.withInstImplicitAsImplict","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withInstImplicitAsImplict","doc":"Execute `k` using a local context where any `x` in `xs` that is tagged as\ninstance implicit is treated as a regular implicit. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1241-L1242","name":"Lean.Meta.withNewBinderInfos","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewBinderInfos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1232-L1234","name":"Lean.Meta.withLocalDeclsD","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDeclsD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1225-L1230","name":"Lean.Meta.withLocalDecls.loop","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecls.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1218-L1230","name":"Lean.Meta.withLocalDecls","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecls","doc":"Append an array of free variables `xs` to the local context and execute `k xs`.\ndeclInfos takes the form of an array consisting of:\n- the name of the variable\n- the binder info of the variable\n- a type constructor for the variable, where the array consists of all of the free variables\n  defined prior to this one. This is needed because the type of the variable may depend on prior variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1208-L1209","name":"Lean.Meta.withLocalDeclD","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDeclD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1205-L1206","name":"Lean.Meta.withLocalDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecl","doc":"Create a free variable `x` with name, binderInfo and type, add it to the context and run in `k`.\nThen revert the context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1173-L1187","name":"Lean.Meta.lambdaMetaTelescope.process","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaMetaTelescope.process","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1170-L1187","name":"Lean.Meta.lambdaMetaTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaMetaTelescope","doc":"Similar to `forallMetaTelescopeReducingAux` but for lambda expressions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1166-L1167","name":"Lean.Meta.forallMetaBoundedTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaBoundedTelescope","doc":"Similar to `forallMetaTelescopeReducing`, stops\nconstructing the telescope when it reaches size `maxMVars`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1161-L1162","name":"Lean.Meta.forallMetaTelescopeReducing","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescopeReducing","doc":"Similar to `forallMetaTelescope`, but if `e = forall ..xs, A`\nit will reduce `A` to construct further mvars.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1156-L1157","name":"Lean.Meta.forallMetaTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescope","doc":"Given `e` of the form `forall ..xs, A`, this combinator will create a new\nmetavariable for each `x` in `xs` and instantiate `A` with these.\nReturns a product containing\n- the new metavariables\n- the binder info for the `xs`\n- the instantiated `A`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1114-L1118","name":"Lean.Meta.getParamNames","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getParamNames","doc":"Return the parameter names for the given global declaration. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1110-L1111","name":"Lean.Meta.lambdaTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaTelescope","doc":"Given `e` of the form `fun ..xs => A`, execute `k xs A`.\nThis combinator will declare local declarations, create free variables for them,\nexecute `k` with updated local context, and make sure the cache is restored after executing `k`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1103-L1104","name":"Lean.Meta.lambdaLetTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaLetTelescope","doc":"Similar to `lambdaTelescope` but for lambda and let expressions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1075-L1076","name":"Lean.Meta.forallBoundedTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallBoundedTelescope","doc":"Similar to `forallTelescopeReducing`, stops constructing the telescope when\nit reaches size `maxFVars`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1066-L1067","name":"Lean.Meta.forallTelescopeReducing","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallTelescopeReducing","doc":"Similar to `forallTelescope`, but given `type` of the form `forall xs, A`,\nit reduces `A` and continues bulding the telescope if it is a `forall`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1057-L1058","name":"Lean.Meta.forallTelescope","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallTelescope","doc":"Given `type` of the form `forall xs, A`, execute `k xs A`.\nThis combinator will declare local declarations, create free variables for them,\nexecute `k` with updated local context, and make sure the cache is restored after executing `k`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1047-L1048","name":"Lean.Meta.withNewLocalInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewLocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1041-L1042","name":"Lean.Meta.isClass?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isClass?","doc":"`isClass? type` return `some ClsName` if `type` is an instance of the class `ClsName`.\nExample:\n```\n#eval do\n  let x ← mkAppM ``Inhabited #[mkConst ``Nat]\n  IO.println (← isClass? x)\n  -- (some Inhabited)\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L908-L909","name":"Lean.Meta.withNewLocalInstance","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewLocalInstance","doc":"Add entry `{ className := className, fvar := fvar }` to localInstances,\nand then execute continuation `k`.\nIt resets the type class cache using `resettingSynthInstanceCache`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L892-L893","name":"Lean.Meta.resettingSynthInstanceCacheWhen","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resettingSynthInstanceCacheWhen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L889-L890","name":"Lean.Meta.resettingSynthInstanceCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resettingSynthInstanceCache","doc":"Reset `synthInstance` cache, execute `x`, and restore cache "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L881-L882","name":"Lean.Meta.restoreSynthInstanceCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.restoreSynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L876-L879","name":"Lean.Meta.saveAndResetSynthInstanceCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.saveAndResetSynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L820-L824","name":"Lean.Meta.getTheoremInfo","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getTheoremInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L817-L818","name":"Lean.Meta.savingCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.savingCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L809-L810","name":"Lean.Meta.withAssignableSyntheticOpaque","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withAssignableSyntheticOpaque","doc":"Execute `x` allowing `isDefEq` to assign synthetic opaque metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L800-L806","name":"Lean.Meta.withAtLeastTransparency","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withAtLeastTransparency","doc":"Execute `x` ensuring the transparency setting is at least `mode`.\nRecall that `.all > .default > .instances > .reducible`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L793-L794","name":"Lean.Meta.withReducibleAndInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withReducibleAndInstances","doc":"`withReducibleAndInstances x` excutes `x` using the `.instances` transparency setting. In this setting only definitions tagged as `[reducible]`\nor type class instances are unfolded.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L786-L787","name":"Lean.Meta.withReducible","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withReducible","doc":"`withReducible x` excutes `x` using the reducible transparency setting. In this setting only definitions tagged as `[reducible]` are unfolded. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L782-L783","name":"Lean.Meta.withDefault","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withDefault","doc":"`withDefault x` excutes `x` using the default transparency setting. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L778-L779","name":"Lean.Meta.withTransparency","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withTransparency","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L775-L776","name":"Lean.Meta.withoutProofIrrelevance","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withoutProofIrrelevance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L772-L773","name":"Lean.Meta.withTrackingZeta","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withTrackingZeta","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L769-L770","name":"Lean.Meta.withConfig","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withConfig","doc":"`withConfig f x` executes `x` using the updated configuration object obtained by applying `f`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L765-L766","name":"Lean.Meta.elimMVarDeps","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L762-L763","name":"Lean.Meta.mkFunUnit","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFunUnit","doc":"`fun _ : Unit => a` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L758-L759","name":"Lean.Meta.mkLetFVars","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLetFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L755-L756","name":"Lean.Meta.mkLambdaFVars","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLambdaFVars","doc":"Takes an array `xs` of free variables and metavariables and a\nbody term `e` and creates `fun ..xs => e`, suitably\nabstracting `e` and the types in `xs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L749-L750","name":"Lean.Meta.mkForallFVars","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkForallFVars","doc":"Takes an array `xs` of free variables or metavariables and a term `e` that may contain those variables, and abstracts and binds them as universal quantifiers.\n\n- if `usedOnly = true` then only variables that the expression body depends on will appear.\n- if `usedLetOnly = true` same as `usedOnly` except for let-bound variables. (That is, local constants which have been assigned a value.)\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L741-L742","name":"Lean.Meta.collectForwardDeps","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.collectForwardDeps","doc":"Collect forward dependencies for the free variables in `toRevert`.\nRecall that when reverting free variables `xs`, we must also revert their forward dependencies.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L734-L735","name":"Lean.Meta.abstract","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.abstract","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L730-L731","name":"Lean.Expr.abstractM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Expr.abstractM","doc":"Replace free (or meta) variables `xs` with loose bound variables.\nSimilar to `Expr.abstract`, but handles metavariables correctly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L723-L724","name":"Lean.Meta.abstractRange","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.abstractRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L719-L720","name":"Lean.Expr.abstractRangeM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Expr.abstractRangeM","doc":"Similar to `abstracM` but consider only the first `min n xs.size` entries in `xs`\n\nIt is also similar to `Expr.abstractRange`, but handles metavariables correctly.\nIt uses `elimMVarDeps` to ensure `e` and the type of the free variables `xs` do not\ncontain a metavariable `?m` s.t. local context of `?m` contains a free variable in `xs`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L701-L710","name":"Lean.Meta.liftMkBindingM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.liftMkBindingM","doc":"Lift a `MkBindingM` monadic action `x` to `MetaM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L694-L696","name":"Lean.Meta.getFVarFromUserName","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getFVarFromUserName","doc":"Given a user-facing name for a free variable, return the free variable or throw if not declared. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L688-L691","name":"Lean.Meta.getLocalDeclFromUserName","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalDeclFromUserName","doc":"Given a user-facing name for a free variable, return its declaration in the current local context.\nThrow an exception if free variable is not declared.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L681-L682","name":"Lean.Meta.getFVarLocalDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getFVarLocalDecl","doc":"Get the local declaration associated to the given `Expr` in the current local\ncontext. Fails if the given expression is not a fvar or if no such declaration exists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L676-L677","name":"Lean.FVarId.isLetVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.isLetVar","doc":"Return `true` is the free variable is a let-variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L672-L673","name":"Lean.FVarId.getUserName","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getUserName","doc":"Return the user-facing name for the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L668-L669","name":"Lean.FVarId.getValue?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getValue?","doc":"Return `some value` if the given free variable is a let-declaration, and `none` otherwise. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L664-L665","name":"Lean.FVarId.getBinderInfo","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getBinderInfo","doc":"Return the binder information for the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L660-L661","name":"Lean.FVarId.getType","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getType","doc":"Return the type of the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L656-L657","name":"Lean.Meta.getLocalDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L650-L653","name":"Lean.FVarId.getDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getDecl","doc":"Return the local declaration for the given free variable.\nThrow an exception if local declaration is not in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L643-L644","name":"Lean.Meta.findLocalDecl?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.findLocalDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L639-L640","name":"Lean.FVarId.findDecl?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.findDecl?","doc":"Return `some decl` if `fvarId` is declared in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L633-L634","name":"Lean.Meta.throwUnknownFVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.throwUnknownFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L629-L630","name":"Lean.FVarId.throwUnknown","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.throwUnknown","doc":"Throw an exception saying `fvarId` is not declared in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L623-L624","name":"Lean.Meta.setMVarUserName","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L619-L620","name":"Lean.MVarId.setUserName","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setUserName","doc":"Set the user-facing name for the given metavariable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L613-L614","name":"Lean.Meta.isReadOnlyLevelMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyLevelMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L609-L610","name":"Lean.LMVarId.isReadOnly","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.LMVarId.isReadOnly","doc":"Return true if the given universe metavariable is \"read-only\".\nThat is, its `depth` is different from the current metavariable context depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L602-L603","name":"Lean.Meta.getLevelMVarDepth","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLevelMVarDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L596-L599","name":"Lean.LMVarId.getLevel","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.LMVarId.getLevel","doc":"Return the level of the given universe level metavariable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L590-L591","name":"Lean.Meta.isReadOnlyOrSyntheticOpaqueExprMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyOrSyntheticOpaqueExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L583-L587","name":"Lean.MVarId.isReadOnlyOrSyntheticOpaque","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.isReadOnlyOrSyntheticOpaque","doc":"Return true if `mvarId.isReadOnly` return true or if `mvarId` is a synthetic opaque metavariable.\n\nRecall `isDefEq` will not assign a value to `mvarId` if `mvarId.isReadOnlyOrSyntheticOpaque`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L575-L576","name":"Lean.Meta.isReadOnlyExprMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L571-L572","name":"Lean.MVarId.isReadOnly","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.isReadOnly","doc":"Return true if the given metavariable is \"read-only\".\nThat is, its `depth` is different from the current metavariable context depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L564-L565","name":"Lean.Meta.setMVarType","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L560-L561","name":"Lean.MVarId.setType","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setType","doc":"Update the type of the given metavariable. This function assumes the new type is\ndefinitionally equal to the current one "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L555-L556","name":"Lean.Meta.setMVarKind","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L551-L552","name":"Lean.MVarId.setKind","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setKind","doc":"Set `mvarId` kind in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L542-L546","name":"Lean.Meta.isSyntheticMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isSyntheticMVar","doc":"Reture `true` if `e` is a synthetic (or synthetic opaque) metavariable "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L538-L539","name":"Lean.Meta.getMVarDeclKind","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getMVarDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L534-L535","name":"Lean.MVarId.getKind","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.getKind","doc":"Return `mvarId` kind. Throw an exception if `mvarId` is not declarated in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L528-L529","name":"Lean.Meta.getMVarDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getMVarDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L522-L525","name":"Lean.MVarId.getDecl","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.getDecl","doc":"Return `mvarId` declaration in the current metavariable context.\nThrow an exception if `mvarId` is not declarated in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L515-L516","name":"Lean.Meta.findMVarDecl?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.findMVarDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L511-L512","name":"Lean.MVarId.findDecl?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.findDecl?","doc":"Return `some mvarDecl` where `mvarDecl` is `mvarId` declaration in the current metavariable context.\nReturn `none` if `mvarId` has no declaration in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L504-L505","name":"Lean.Meta.shouldReduceReducibleOnly","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.shouldReduceReducibleOnly","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L501-L502","name":"Lean.Meta.shouldReduceAll","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.shouldReduceAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L498-L499","name":"Lean.Meta.getTransparency","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getTransparency","doc":"Return current transparency setting/mode. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L493-L495","name":"Lean.Meta.mkConstWithFreshMVarLevels","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkConstWithFreshMVarLevels","doc":"Create a constant with the given name and new universe metavariables.\nExample: ``mkConstWithFreshMVarLevels `Monad`` returns `@Monad.{?u, ?v}`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L486-L487","name":"Lean.Meta.mkFreshLevelMVarsFor","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVarsFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L482-L484","name":"Lean.Meta.mkFreshLevelMVars","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L474-L480","name":"Lean.Meta.mkFreshExprMVarWithId","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVarWithId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L463-L465","name":"Lean.Meta.mkFreshTypeMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshTypeMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L460-L461","name":"Lean.Meta.mkFreshExprMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L444-L447","name":"Lean.Meta.mkFreshLevelMVar","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L438-L442","name":"Lean.Meta.mkFreshExprMVarAt","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVarAt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L430-L431","name":"Lean.Meta.withIncRecDepth","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withIncRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L425-L427","name":"Lean.Meta.whnfForall","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L423-L423","name":"Lean.Meta.synthPending","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.synthPending","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L422-L422","name":"Lean.Meta.isLevelDefEqAux","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isLevelDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L421-L421","name":"Lean.Meta.isExprDefEqAux","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L420-L420","name":"Lean.Meta.inferType","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.inferType","doc":"Returns the inferred type of the given expression, or fails if it is not type-correct. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L418-L418","name":"Lean.Meta.whnf","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnf","doc":"Reduces an expression to its Weak Head Normal Form.\nThis is when the topmost expression has been fully reduced,\nbut may contain subexpressions which have not been reduced. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L404-L408","name":"Lean.Meta.useEtaStruct","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.useEtaStruct","doc":"`useEtaStruct inductName` return `true` if we eta for structures is enabled for\nfor the inductive datatype `inductName`.\n\nRecall we have three different settings: `.none` (never use it), `.all` (always use it), `.notClasses`\n(enabled only for structure-like inductive types that are not classes).\n\nThe parameter `inductName` affects the result only if the current setting is `.notClasses`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L392-L393","name":"Lean.Meta.modifyPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyPostponed","doc":"Modify the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L388-L389","name":"Lean.Meta.setPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setPostponed","doc":"Set the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L384-L385","name":"Lean.Meta.getPostponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getPostponed","doc":"Return the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L380-L381","name":"Lean.Meta.getZetaFVarIds","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getZetaFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L377-L378","name":"Lean.Meta.resetZetaFVarIds","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resetZetaFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L374-L375","name":"Lean.Meta.getConfig","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L371-L372","name":"Lean.Meta.getLocalInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L368-L369","name":"Lean.Meta.modifyDefEqCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyDefEqCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L365-L366","name":"Lean.Meta.modifyInferTypeCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyInferTypeCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L362-L363","name":"Lean.Meta.modifyCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L356-L357","name":"Lean.Meta.map2MetaM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.map2MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L353-L354","name":"Lean.Meta.map1MetaM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.map1MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L350-L351","name":"Lean.Meta.mapMetaM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L347-L348","name":"Lean.Meta.liftMetaM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.liftMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L338-L339","name":"Lean.Meta.throwIsDefEqStuck","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.throwIsDefEqStuck","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L335-L336","name":"Lean.Meta.instMetaEvalMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMetaEvalMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L331-L333","name":"Lean.Meta.MetaM.toIO","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.toIO","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L328-L329","name":"Lean.Meta.MetaM.run'","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.run'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L325-L326","name":"Lean.Meta.MetaM.run","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L321-L323","name":"Lean.Meta.instMonadBacktrackSavedStateMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadBacktrackSavedStateMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L317-L319","name":"Lean.Meta.SavedState.restore","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState.restore","doc":"Restore backtrackable parts of the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L313-L314","name":"Lean.Meta.saveState","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.saveState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L310-L311","name":"Lean.Meta.instAddMessageContextMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instAddMessageContextMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L306-L308","name":"Lean.Meta.instMonadEnvMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadEnvMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L302-L304","name":"Lean.Meta.instMonadMCtxMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadMCtxMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L299-L300","name":"Lean.Meta.instMonadLCtxMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadLCtxMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L296-L297","name":"Lean.Meta.instInhabitedMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L294-L294","name":"Lean.Meta.instMonadMetaM","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L289-L289","name":"Lean.Meta.MetaM","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L287-L287","name":"Lean.Meta.Context.canUnfold?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.canUnfold?","doc":"A predicate to control whether a constant can be unfolded or not at `whnf`.\nNote that we do not cache results at `whnf` when `canUnfold?` is not `none`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L283-L283","name":"Lean.Meta.Context.synthPendingDepth","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.synthPendingDepth","doc":"Track the number of nested `synthPending` invocations. Nested invocations can happen\nwhen the type class resolution invokes `synthPending`.\n\nRemark: in the current implementation, `synthPending` fails if `synthPendingDepth > 0`.\nWe will add a configuration option if necessary. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L276-L276","name":"Lean.Meta.Context.defEqCtx?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.defEqCtx?","doc":"Not `none` when inside of an `isDefEq` test. See `PostponedEntry`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L274-L274","name":"Lean.Meta.Context.localInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.localInstances","doc":"Local instances in `lctx`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L272-L272","name":"Lean.Meta.Context.lctx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.lctx","doc":"Local context "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L270-L270","name":"Lean.Meta.Context.config","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.config","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L269-L287","name":"Lean.Meta.Context","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context","doc":"Contextual information for the `MetaM` monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L264-L264","name":"Lean.Meta.instNonemptySavedState","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instNonemptySavedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L263-L263","name":"Lean.Meta.SavedState.meta","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState.meta","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L262-L262","name":"Lean.Meta.SavedState.core","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState.core","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L261-L264","name":"Lean.Meta.SavedState","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState","doc":"Backtrackable state for the `MetaM` monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L256-L256","name":"Lean.Meta.instInhabitedState","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L255-L255","name":"Lean.Meta.State.postponed","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State.postponed","doc":"Array of postponed universe level constraints "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L253-L253","name":"Lean.Meta.State.zetaFVarIds","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State.zetaFVarIds","doc":"When `trackZeta == true`, then any let-decl free variable that is zeta expansion performed by `MetaM` is stored in `zetaFVarIds`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L251-L251","name":"Lean.Meta.State.cache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State.cache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L250-L250","name":"Lean.Meta.State.mctx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State.mctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L249-L256","name":"Lean.Meta.State","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State","doc":"`MetaM` monad state.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L244-L244","name":"Lean.Meta.instInhabitedPostponedEntry","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedPostponedEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L243-L243","name":"Lean.Meta.PostponedEntry.ctx?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry.ctx?","doc":"Context for the surrounding `isDefEq` call when entry was created. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L241-L241","name":"Lean.Meta.PostponedEntry.rhs","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry.rhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L240-L240","name":"Lean.Meta.PostponedEntry.lhs","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry.lhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L239-L239","name":"Lean.Meta.PostponedEntry.ref","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry.ref","doc":"We save the `ref` at entry creation time. This is used for reporting errors back to the user. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L237-L244","name":"Lean.Meta.PostponedEntry","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry","doc":"Auxiliary structure for representing postponed universe constraints.\nRemark: the fields `ref` and `rootDefEq?` are used for error message generation only.\nRemark: we may consider improving the error message generation in the future.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L230-L230","name":"Lean.Meta.DefEqContext.localInstances","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext.localInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L229-L229","name":"Lean.Meta.DefEqContext.lctx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext.lctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L228-L228","name":"Lean.Meta.DefEqContext.rhs","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext.rhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L227-L227","name":"Lean.Meta.DefEqContext.lhs","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext.lhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L226-L230","name":"Lean.Meta.DefEqContext","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext","doc":"\"Context\" for a postponed universe constraint.\n`lhs` and `rhs` are the surrounding `isDefEq` call when the postponed constraint was created.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L220-L220","name":"Lean.Meta.instInhabitedCache","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L219-L219","name":"Lean.Meta.Cache.defEq","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.defEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L218-L218","name":"Lean.Meta.Cache.whnfAll","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.whnfAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L217-L217","name":"Lean.Meta.Cache.whnfDefault","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.whnfDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L216-L216","name":"Lean.Meta.Cache.synthInstance","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.synthInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L215-L215","name":"Lean.Meta.Cache.funInfo","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.funInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L214-L214","name":"Lean.Meta.Cache.inferType","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.inferType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L213-L220","name":"Lean.Meta.Cache","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache","doc":"Cache datastructures for type inference, type class resolution, whnf, and definitional equality.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L208-L208","name":"Lean.Meta.DefEqCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqCache","doc":"A mapping `(s, t) ↦ isDefEq s t`.\nTODO: consider more efficient representations (e.g., a proper set) and caching policies (e.g., imperfect cache).\nWe should also investigate the impact on memory consumption. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L202-L202","name":"Lean.Meta.WhnfCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.WhnfCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L201-L201","name":"Lean.Meta.FunInfoCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfoCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L200-L200","name":"Lean.Meta.InferTypeCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InferTypeCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L198-L198","name":"Lean.Meta.SynthInstanceCache","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L194-L195","name":"Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L191-L191","name":"Lean.Meta.instBEqInfoCacheKey","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instBEqInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L191-L191","name":"Lean.Meta.instInhabitedInfoCacheKey","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L190-L190","name":"Lean.Meta.InfoCacheKey.nargs?","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.nargs?","doc":"`nargs? = some n` if the cached information was computed assuming the function has arity `n`.\n  If `nargs? = none`, then the cache information consumed the arrow type as much as possible\n  unsing the current transparency setting.\nX"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L184-L184","name":"Lean.Meta.InfoCacheKey.expr","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.expr","doc":"The function being cached information about. It is quite often an `Expr.const`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L182-L182","name":"Lean.Meta.InfoCacheKey.transparency","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.transparency","doc":"The transparency mode used to compute the `FunInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L180-L191","name":"Lean.Meta.InfoCacheKey","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey","doc":"Key for the function information cache.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L175-L175","name":"Lean.Meta.FunInfo.resultDeps","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfo.resultDeps","doc":"`resultDeps` contains the function result type backwards dependencies.\nThat is, the (0-indexed) position of parameters that the result type depends on.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L170-L170","name":"Lean.Meta.FunInfo.paramInfo","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfo.paramInfo","doc":"Parameter information cache. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L168-L175","name":"Lean.Meta.FunInfo","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfo","doc":"Function information cache. See `ParamInfo`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L161-L162","name":"Lean.Meta.ParamInfo.isExplicit","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isExplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L158-L159","name":"Lean.Meta.ParamInfo.isStrictImplicit","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isStrictImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L155-L156","name":"Lean.Meta.ParamInfo.isInstImplicit","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isInstImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L152-L153","name":"Lean.Meta.ParamInfo.isImplicit","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L150-L150","name":"Lean.Meta.instInhabitedParamInfo","kind":"instance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedParamInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L149-L149","name":"Lean.Meta.ParamInfo.dependsOnHigherOrderOutParam","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.dependsOnHigherOrderOutParam","doc":"`dependsOnHigherOrderOutParam` is true if the type of this parameter depends on\nthe higher-order output parameter of a previous local instance.\nExample:\n```\ngetElem :\n  {cont : Type u_1} → {idx : Type u_2} → {elem : Type u_3} →\n  {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] →\n  (xs : cont) → (i : idx) → dom xs i → elem\n```\nThis flag is true for the parameter with type `dom xs i` since `dom` is an output parameter\nof the instance `[self : GetElem cont idx elem dom]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L135-L135","name":"Lean.Meta.ParamInfo.higherOrderOutParam","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.higherOrderOutParam","doc":"`higherOrderOutParam` is true if this parameter is a higher-order output parameter\nof local instance.\nExample:\n```\ngetElem :\n  {cont : Type u_1} → {idx : Type u_2} → {elem : Type u_3} →\n  {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] →\n  (xs : cont) → (i : idx) → dom xs i → elem\n```\nThis flag is true for the parameter `dom` because it is output parameter of\n`[self : GetElem cont idx elem dom]`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L121-L121","name":"Lean.Meta.ParamInfo.isDecInst","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isDecInst","doc":"`isDecInst` is true if the parameter's type is of the form `Decidable ...`.\nThis information affects the generation of congruence theorems.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L116-L116","name":"Lean.Meta.ParamInfo.isProp","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isProp","doc":"`isProp` is true if the parameter is always a proposition. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L114-L114","name":"Lean.Meta.ParamInfo.backDeps","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.backDeps","doc":"`backDeps` contains the backwards dependencies. That is, the (0-indexed) position of previous parameters that this one depends on. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L112-L112","name":"Lean.Meta.ParamInfo.hasFwdDeps","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.hasFwdDeps","doc":"`hasFwdDeps` is true if there is another parameter whose type depends on this one. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L110-L110","name":"Lean.Meta.ParamInfo.binderInfo","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.binderInfo","doc":"The binder annotation for the parameter. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L108-L150","name":"Lean.Meta.ParamInfo","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo","doc":"Function parameter information cache.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L103-L103","name":"Lean.Meta.Config.etaStruct","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.etaStruct","doc":"Eta for structures configuration mode. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L101-L101","name":"Lean.Meta.Config.offsetCnstrs","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.offsetCnstrs","doc":"Enable/Disable support for offset constraints such as `?x + 1 =?= e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L99-L99","name":"Lean.Meta.Config.assignSyntheticOpaque","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.assignSyntheticOpaque","doc":"By default synthetic opaque metavariables are not assigned by `isDefEq`. Motivation: we want to make\nsure typing constraints resolved during elaboration should not \"fill\" holes that are supposed to be filled using tactics.\nHowever, this restriction is too restrictive for tactics such as `exact t`. When elaborating `t`, we dot not fill\nnamed holes when solving typing constraints or TC resolution. But, we ignore the restriction when we try to unify\nthe type of `t` with the goal target type. We claim this is not a hack and is defensible behavior because\nthis last unification step is not really part of the term elaboration. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L92-L92","name":"Lean.Meta.Config.proofIrrelevance","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.proofIrrelevance","doc":"Enables proof irrelevance at `isDefEq` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L90-L90","name":"Lean.Meta.Config.unificationHints","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.unificationHints","doc":"Enable/disable the unification hints feature. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L88-L88","name":"Lean.Meta.Config.trackZeta","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.trackZeta","doc":"When `trackZeta == true`, we store zetaFVarIds all free variables that have been zeta-expanded. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L86-L86","name":"Lean.Meta.Config.zetaNonDep","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.zetaNonDep","doc":"If zetaNonDep == false, then non dependent let-decls are not zeta expanded. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L84-L84","name":"Lean.Meta.Config.transparency","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.transparency","doc":"Controls which definitions and theorems can be unfolded by `isDefEq` and `whnf`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L80-L80","name":"Lean.Meta.Config.isDefEqStuckEx","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.isDefEqStuckEx","doc":"When the following flag is set,\n`isDefEq` throws the exeption `Exeption.isDefEqStuck`\nwhenever it encounters a constraint `?m ... =?= t` where\n`?m` is read only.\nThis feature is useful for type class resolution where\nwe may want to notify the caller that the TC problem may be solveable\nlater after it assigns `?m`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L71-L71","name":"Lean.Meta.Config.constApprox","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.constApprox","doc":"When `constApprox` is set to true,\nwe solve `?m t =?= c` using\n`?m := fun _ => c`\nwhen `?m t` is not a higher-order pattern and `c` is not an application as "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L66-L66","name":"Lean.Meta.Config.quasiPatternApprox","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.quasiPatternApprox","doc":"When `quasiPatternApprox` is set to true, we ignore condition 2.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L62-L62","name":"Lean.Meta.Config.ctxApprox","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.ctxApprox","doc":"When `ctxApprox` is set to true, we relax condition 4, by creating an\nauxiliary metavariable `?n'` with a smaller context than `?m'`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L57-L57","name":"Lean.Meta.Config.foApprox","kind":"def","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.foApprox","doc":"If `foApprox` is set to true, and some `aᵢ` is not a free variable,\nthen we use first-order unification\n```\n  ?m a_1 ... a_i a_{i+1} ... a_{i+k} =?= f b_1 ... b_k\n```\nreduces to\n```\n  ?m a_1 ... a_i =?= f\n  a_{i+1}        =?= b_1\n  ...\n  a_{i+k}        =?= b_k\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L42-L103","name":"Lean.Meta.Config","kind":"structure","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config","doc":"Configuration flags for the `MetaM` monad.\nMany of them are used to control the `isDefEq` function that checks whether two terms are definitionally equal or not.\nRecall that when `isDefEq` is trying to check whether\n`?m@C a₁ ... aₙ` and `t` are definitionally equal (`?m@C a₁ ... aₙ =?= t`), where\n`?m@C` as a shorthand for `C |- ?m : t` where `t` is the type of `?m`.\nWe solve it using the assignment `?m := fun a₁ ... aₙ => t` if\n1) `a₁ ... aₙ` are pairwise distinct free variables that are ​*not*​ let-variables.\n2) `a₁ ... aₙ` are not in `C`\n3) `t` only contains free variables in `C` and/or `{a₁, ..., aₙ}`\n4) For every metavariable `?m'@C'` occurring in `t`, `C'` is a subprefix of `C`\n5) `?m` does not occur in `t`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L27-L27","name":"Lean.Meta.isDefEqStuckExceptionId","kind":"opaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqStuckExceptionId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.SavedState.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.State.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.PostponedEntry.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.Cache.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.DefEqContext.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.FunInfo.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfo.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.ParamInfo.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.Context.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.InfoCacheKey.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Meta/Basic.lean#L1-L1","name":"Lean.Meta.Config.mk","kind":"ctor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config.mk","doc":""}]}