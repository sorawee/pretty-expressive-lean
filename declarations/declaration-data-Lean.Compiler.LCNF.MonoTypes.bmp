{"name":"Lean.Compiler.LCNF.MonoTypes","instances":[{"typeNames":["Lean.Compiler.LCNF.TrivialStructureInfo"],"name":"Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.TrivialStructureInfo"],"name":"Lean.Compiler.LCNF.instReprTrivialStructureInfo","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.MonoTypeExtState"],"name":"Lean.Compiler.LCNF.instInhabitedMonoTypeExtState","className":"Inhabited"}],"imports":["Init","Lean.Meta.InferType","Lean.Compiler.LCNF.Util","Lean.Compiler.LCNF.BaseTypes","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L123-L129","name":"Lean.Compiler.LCNF.getOtherDeclMonoType","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getOtherDeclMonoType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L120-L121","name":"Lean.Compiler.LCNF.monoTypeExt","kind":"opaque","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.monoTypeExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L118-L118","name":"Lean.Compiler.LCNF.instInhabitedMonoTypeExtState","kind":"instance","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedMonoTypeExtState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L117-L117","name":"Lean.Compiler.LCNF.MonoTypeExtState.mono","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.MonoTypeExtState.mono","doc":"The LCNF type for the `mono` phase. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L115-L118","name":"Lean.Compiler.LCNF.MonoTypeExtState","kind":"structure","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.MonoTypeExtState","doc":"State for the environment extension used to save the LCNF mono phase type for declarations\nthat do not have code associated with them.\nExample: constructors, inductive types, foreign functions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L86-L108","name":"Lean.Compiler.LCNF.toMonoType.visitApp","kind":"opaque","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.toMonoType.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L72-L108","name":"Lean.Compiler.LCNF.toMonoType","kind":"opaque","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.toMonoType","doc":"Convert a LCNF type from the base phase to the mono phase.\n\nLCNF types in the mono phase do not have dependencies,\nand universe levels have been erased.\n\nThe type contains only `â†’` and constants.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L59-L62","name":"Lean.Compiler.LCNF.getParamTypes.go","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getParamTypes.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L56-L62","name":"Lean.Compiler.LCNF.getParamTypes","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getParamTypes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L43-L54","name":"Lean.Compiler.LCNF.hasTrivialStructure?","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.hasTrivialStructure?","doc":"Return `some fieldIdx` if `declName` is the name of an inductive datatype s.t.\n- It does not have builtin support in the runtime.\n- It has only one constructor.\n- This constructor has only one computationally relevant field.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L35-L35","name":"Lean.Compiler.LCNF.instReprTrivialStructureInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instReprTrivialStructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L35-L35","name":"Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","kind":"instance","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L34-L34","name":"Lean.Compiler.LCNF.TrivialStructureInfo.fieldIdx","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.fieldIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L33-L33","name":"Lean.Compiler.LCNF.TrivialStructureInfo.numParams","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.numParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L32-L32","name":"Lean.Compiler.LCNF.TrivialStructureInfo.ctorName","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.ctorName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L31-L35","name":"Lean.Compiler.LCNF.TrivialStructureInfo","kind":"structure","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo","doc":"We say a structure has a trivial structure if it has not builtin support in the runtime,\nit has only one constructor, and this constructor has only one relevant field.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L17-L25","name":"Lean.Compiler.LCNF.getRelevantCtorFields","kind":"def","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getRelevantCtorFields","doc":"Given a constructor, return a bitmask `m` s.t. `m[i]` is true if field `i` is\ncomputationally relevant.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L1-L1","name":"Lean.Compiler.LCNF.MonoTypeExtState.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.MonoTypeExtState.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Lean/Compiler/LCNF/MonoTypes.lean#L1-L1","name":"Lean.Compiler.LCNF.TrivialStructureInfo.mk","kind":"ctor","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.mk","doc":""}]}