{"name":"Init.Control.Except","instances":[{"typeNames":["Except"],"name":"Except.instMonadExcept","className":"Monad"},{"typeNames":["Except","ExceptT"],"name":"ExceptT.instMonadLiftExceptExceptT","className":"MonadLift"},{"typeNames":["ExceptT"],"name":"ExceptT.instMonadLiftExceptT","className":"MonadLift"},{"typeNames":["ExceptT"],"name":"ExceptT.instMonadFunctorExceptT","className":"MonadFunctor"},{"typeNames":["ExceptT"],"name":"ExceptT.instMonadExceptT","className":"Monad"},{"typeNames":["ExceptT"],"name":"instMonadExceptOfExceptT","className":"MonadExceptOf"},{"typeNames":["ExceptT"],"name":"instMonadExceptOfExceptT_1","className":"MonadExceptOf"},{"typeNames":["ExceptT"],"name":"instInhabitedExceptT","className":"Inhabited"},{"typeNames":["Except"],"name":"instMonadExceptOfExcept","className":"MonadExceptOf"},{"typeNames":["ExceptT"],"name":"instMonadControlExceptT","className":"MonadControl"},{"typeNames":["Id"],"name":"Id.finally","className":"MonadFinally"},{"typeNames":["ExceptT"],"name":"ExceptT.finally","className":"MonadFinally"}],"imports":["Init.Control.Basic","Init.Control.Id","Init.Coe"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L198-L206","name":"ExceptT.finally","kind":"instance","docLink":"./Init/Control/Except.html#ExceptT.finally","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L191-L195","name":"Id.finally","kind":"instance","docLink":"./Init/Control/Except.html#Id.finally","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L186-L188","name":"tryFinally","kind":"def","docLink":"./Init/Control/Except.html#tryFinally","doc":"Execute `x` and then execute `finalizer` even if `x` threw an exception "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L180-L180","name":"MonadFinally.tryFinally'","kind":"def","docLink":"./Init/Control/Except.html#MonadFinally.tryFinally'","doc":"`tryFinally' x f` runs `x` and then the \"finally\" computation `f`.\nWhen `x` succeeds with `a : Î±`, `f (some a)` is returned. If `x` fails\nfor `m`'s definition of failure, `f none` is returned. Hence `tryFinally'`\ncan be thought of as performing the same role as a `finally` block in\nan imperative programming language. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L174-L174","name":"MonadFinally.mk","kind":"ctor","docLink":"./Init/Control/Except.html#MonadFinally.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L174-L180","name":"MonadFinally","kind":"class","docLink":"./Init/Control/Except.html#MonadFinally","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L169-L172","name":"instMonadControlExceptT","kind":"instance","docLink":"./Init/Control/Except.html#instMonadControlExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L165-L167","name":"liftExcept","kind":"def","docLink":"./Init/Control/Except.html#liftExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L162-L163","name":"observing","kind":"def","docLink":"./Init/Control/Except.html#observing","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L156-L157","name":"MonadExcept.orelse'","kind":"def","docLink":"./Init/Control/Except.html#MonadExcept.orelse'","doc":"Alternative orelse operator that allows to select which exception should be used.\nThe default is to use the first exception since the standard `orelse` uses the second. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L146-L148","name":"instMonadExceptOfExcept","kind":"instance","docLink":"./Init/Control/Except.html#instMonadExceptOfExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L143-L144","name":"instInhabitedExceptT","kind":"instance","docLink":"./Init/Control/Except.html#instInhabitedExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L139-L141","name":"instMonadExceptOfExceptT_1","kind":"instance","docLink":"./Init/Control/Except.html#instMonadExceptOfExceptT_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L134-L136","name":"instMonadExceptOfExceptT","kind":"instance","docLink":"./Init/Control/Except.html#instMonadExceptOfExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L128-L129","name":"ExceptT.adapt","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.adapt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L122-L125","name":"ExceptT.instMonadExceptT","kind":"instance","docLink":"./Init/Control/Except.html#ExceptT.instMonadExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L119-L119","name":"ExceptT.instMonadFunctorExceptT","kind":"instance","docLink":"./Init/Control/Except.html#ExceptT.instMonadFunctorExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L114-L117","name":"ExceptT.tryCatch","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.tryCatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L111-L111","name":"ExceptT.instMonadLiftExceptT","kind":"instance","docLink":"./Init/Control/Except.html#ExceptT.instMonadLiftExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L110-L110","name":"ExceptT.instMonadLiftExceptExceptT","kind":"instance","docLink":"./Init/Control/Except.html#ExceptT.instMonadLiftExceptExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L106-L107","name":"ExceptT.lift","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.lift","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L100-L103","name":"ExceptT.map","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L96-L97","name":"ExceptT.bind","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.bind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L91-L93","name":"ExceptT.bindCont","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.bindCont","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L87-L88","name":"ExceptT.pure","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.pure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L80-L80","name":"ExceptT.run","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L77-L77","name":"ExceptT.mk","kind":"def","docLink":"./Init/Control/Except.html#ExceptT.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L73-L74","name":"ExceptT","kind":"def","docLink":"./Init/Control/Except.html#ExceptT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L66-L69","name":"Except.instMonadExcept","kind":"instance","docLink":"./Init/Control/Except.html#Except.instMonadExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L60-L63","name":"Except.orElseLazy","kind":"def","docLink":"./Init/Control/Except.html#Except.orElseLazy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L55-L58","name":"Except.tryCatch","kind":"def","docLink":"./Init/Control/Except.html#Except.tryCatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L50-L52","name":"Except.toOption","kind":"def","docLink":"./Init/Control/Except.html#Except.toOption","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L47-L47","name":"Except.isOk","kind":"def","docLink":"./Init/Control/Except.html#Except.isOk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L43-L45","name":"Except.toBool","kind":"def","docLink":"./Init/Control/Except.html#Except.toBool","doc":"Returns true if the value is `Except.ok`, false otherwise. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L36-L39","name":"Except.bind","kind":"def","docLink":"./Init/Control/Except.html#Except.bind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L31-L33","name":"Except.mapError","kind":"def","docLink":"./Init/Control/Except.html#Except.mapError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L25-L28","name":"Except.map_id","kind":"theorem","docLink":"./Init/Control/Except.html#Except.map_id","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L21-L23","name":"Except.map","kind":"def","docLink":"./Init/Control/Except.html#Except.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/3f6c5f17db30c2a2dcaca1b9e9faec4e2cf04b95/src/Init/Control/Except.lean#L17-L18","name":"Except.pure","kind":"def","docLink":"./Init/Control/Except.html#Except.pure","doc":""}]}